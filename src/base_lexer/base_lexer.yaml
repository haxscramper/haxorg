states:
  - { kind: state, name: COMMAND_TEXT }
  - { kind: state, name: SUBTREE_HEAD }
  - { kind: state, name: PROPERTY_ANY }
  - { kind: state, name: LEAD }
  # Separately handle leading whitespaces in list of properties
  # and logbook entries. This is necessary to make `:end:` push
  # and pop different states depending on the context where
  # it was triggered.
  - { kind: state, name: PROPERTY_LEAD }
  - { kind: state, name: LOGBOOK_LEAD }


  - { kind: xstate, name: COMMAND }
  - { kind: xstate, name: COMMAND_RAW }
  - { kind: xstate, name: COMMAND_EXAMPLE }
  - { kind: xstate, name: COMMAND_EXPORT }
  - { kind: xstate, name: COMMAND_SRC }
  - { kind: xstate, name: COMMAND_ARGS }
  - { kind: xstate, name: COMMAND_TBLFM }
  - { kind: xstate, name: BODY_SRC }
  - { kind: xstate, name: PROPERTIES }
  - { kind: xstate, name: PROPERTY_LITERAL }

rx_macros:
  - { name: space, value: "[\\h\\xA0]" }
  # Group of built-in org-mode properties that can be statically identified
  # and lexed to corresponding tokens. All unknown properties and directives
  # will be converted to raw string literals and processed at later
  # stages, mostly in sem layer
  - { name: literal_properties, value: "id|effort" }
  - { name: argument_properties, value: "header-args" }
  - { name: text_properties, value: "description" }
  # Property colon with optional text extension pattern an any number of 
  # following spaces. Used both in line command directives and subtree
  # properties
  - { name: prop_colon, value: "\\+?:[\\h\\xA0]*" }

tokens: 
  - { name: "Indent" }
  - { name: "Dedent" }
  - { name: "SameIndent" }
  - { name: "ListStart" }
  - { name: "ListEnd" }
  - { name: StmtListOpen }
  - { name: StmtListClose }
  - { name: ListItemEnd }
  - { name: Unknown }

rules:
  #region Blocks
  #tag Quote block command
  - re: "begin_quote"
    states: [COMMAND]
    token: CmdQuoteBegin
    actions: [{ do: pop, to: INITIAL, from: COMMAND }]

  - re: "end_quote"
    states: [COMMAND]
    token: CmdQuoteEnd
    actions: [{ do: pop, to: INITIAL, from: COMMAND }]

  - re: "begin_center"
    states: [COMMAND]
    token: CmdCenterBegin
    actions: [{ do: pop, to: INITIAL, from: COMMAND }]

  - re: "end_center"
    states: [COMMAND]
    token: CmdCenterEnd
    actions: [{ do: pop, to: INITIAL, from: COMMAND }]

  #tag Example literal command
  - re: "begin_example"
    states: [COMMAND]
    token: CmdExampleBegin
    actions: [{ do: push, from: COMMAND, to: COMMAND_EXAMPLE }]

  - re: "^{space}*#\\+end_example{space}*$"
    states: [COMMAND_EXAMPLE]
    token: CmdExampleEnd
    actions:
      - { do: pop, from: COMMAND_EXAMPLE, to: COMMAND }
      - { do: pop, from: COMMAND, to: INITIAL }

  - re: "^.*$"
    states: [COMMAND_EXAMPLE]
    token: CmdExampleLine

  - re: "\\n"
    states: [COMMAND_EXAMPLE]
    token: Newline

  - re: "begin_export"
    states: [COMMAND]
    token: CmdExportBegin
    actions: [{ do: push, from: COMMAND, to: COMMAND_EXPORT }]

  - re: "^{space}*#\\+end_export{space}*$"
    states: [COMMAND_EXPORT]
    token: CmdExportEnd
    actions:
      - { do: pop, from: COMMAND_EXPORT, to: COMMAND }
      - { do: pop, from: COMMAND, to: INITIAL }

  - re: "^.*$"
    states: [COMMAND_EXPORT]
    token: CmdExportLine

  - re: "\\n"
    states: [COMMAND_EXPORT]
    token: Newline
    actions:
      - { do: "pop", from: COMMAND_EXPORT, to: COMMAND }
      - { do: "pop", from: COMMAND, to: INITIAL }
      - { do: "push", to: BODY_SRC, from: INITIAL }

  #tag Source code block command
  - re: "begin_src"
    states: [COMMAND]
    token: CmdSrcBegin
    actions: [{ do: "push", to: COMMAND_SRC, from: COMMAND }]
  - re: "^{space}*#\\+end_src{space}*$"
    states: [BODY_SRC]
    token: CmdSrcEnd
    actions:
      - { do: pop, from: BODY_SRC, to: INITIAL }

  - re: "\\n"
    states: [COMMAND_SRC]
    token: Newline
    actions:
      - { do: "pop", from: COMMAND_SRC, to: COMMAND }
      - { do: "pop", from: COMMAND, to: INITIAL }
      - { do: "push", to: BODY_SRC, from: INITIAL }
  - { lit: "<<", states: [BODY_SRC], token: SrcTangleOpen }
  - { lit: ">>", states: [BODY_SRC], token: SrcTangleClose }
  - { re: ".+", states: [BODY_SRC], token: SrcContent }
  - { re: "\\n", states: [BODY_SRC], token: Newline }
  #endregion

  # Command with parameters
  - { re: ":\\w+", states: [COMMAND_ARGS, COMMAND_SRC, COMMAND_EXPORT], token: CmdColonIdent }
  - { re: "\\w+", states: [COMMAND_ARGS, COMMAND_SRC, COMMAND_EXPORT], token: CmdIdent }
  - { re: "{space}+", states: [COMMAND_ARGS, COMMAND_SRC, COMMAND_EXPORT], token: Whitespace }
  - {
      re: "[\\H--[\\n]]+",
      states: [COMMAND_ARGS, COMMAND_SRC, COMMAND_EXPORT],
      token: CmdRawArg,
    }

  #region Line-commands
  - re: "^#\\+"
    token: LineCommand
    actions:
      - { do: push, to: COMMAND, from: INITIAL }

  - lit: "#+"
    states: [LEAD]
    token: LineCommand
    actions:
      - { do: pop, to: INITIAL, from: LEAD }
      - { do: push, to: COMMAND, from: INITIAL }

  #tag Columns
  - re: "columns{prop_colon}"
    token: CmdColumns
    states: [COMMAND]
    actions:
      - { do: push, from: COMMAND, to: COMMAND_RAW }

  #tag Caption command
  - re: "caption{prop_colon}"
    states: [COMMAND]
    token: CmdCaption
    actions: [{ do: push, to: COMMAND_TEXT, from: COMMAND }]

  #tag Title command
  - re: "title{prop_colon}"
    states: [COMMAND]
    token: CmdTitle
    actions: [{ do: push, to: COMMAND_TEXT, from: COMMAND }]

  #tag property command 
  - re: "property{prop_colon}({argument_properties})"
    states: [COMMAND]
    token: CmdPropertyArgs 
    actions: [{ do: push, to: COMMAND_ARGS, from: COMMAND }]

  - re: "property{prop_colon}({text_properties})"
    states: [COMMAND]
    token: CmdPropertyText
    actions: [{ do: push, to: COMMAND_TEXT, from: COMMAND }]

  - re: "property{prop_colon}"
    states: [COMMAND]
    token: CmdPropertyRaw
    actions: [{ do: push, to: COMMAND_RAW, from: COMMAND }]

  #tag Options
  - re: "options{prop_colon}"
    states: [COMMAND]
    token: CmdOptions
    # Full options parsing is deferred to the sem stage
    actions: [{ do: push, to: COMMAND_RAW, from: COMMAND }]

  #tag File tags command
  - re: "filetags{prop_colon}"
    states: [COMMAND]
    token: CmdFiletags
    actions: [{ do: push, to: COMMAND_RAW, from: COMMAND }]

  - re: ".*"
    states: [COMMAND_RAW]
    token: RawText


  #tag Latex header
  - re: "latex_header{prop_colon}"
    states: [COMMAND]
    token: CmdLatexHeader
    actions: [{ do: push, to: COMMAND_ARGS, from: COMMAND }]


  #tag Table formulas
  - re: "tblfm{prop_colon}"
    states: [COMMAND]
    token: CmdTblfm
    actions: [{ do: push, to: COMMAND_TBLFM, from: COMMAND }]
  - { re: "\\$\\d+", states: [COMMAND_TBLFM], token: TblColumnRef }
  - { re: "=", states: [COMMAND_TBLFM], token: TblAssign }
  - { re: "@-?\\d+", states: [COMMAND_TBLFM], token: TblRelativeColumnRef }
  - { re: "{space}+", states: [COMMAND_TBLFM], token: Whitespace }
  - { re: "[-]", states: [COMMAND_TBLFM], token: TblOperator }
  #endregion

  #tag Subtree
  - re: "^\\*+{space}+"
    token: SubtreeStars
    actions:
      - { do: push, from: INITIAL, to: SUBTREE_HEAD }

  - re: "\\[#\\w\\]"
    token: SubtreePriority
    states: [SUBTREE_HEAD]


  # - { lit: "# -*- ", token: FileVarComment }
  - { re: "^[0-9]+", token: LeadingNumber }
  - { re: "[0-9]+", token: Number }
  - re: "^{space}+"
    token: LeadingSpace
    actions:
      - { do: push, to: LEAD, from: INITIAL }

  - { re: "{space}+", token: Whitespace }
  - { lit: "[fn::", token: FootnoteInlineOpen }
  - { lit: "[fn:", token: FootnoteLinkOpen }
  - { re: "\\[", token: BraceOpen }
  - { re: "\\]", token: BraceClose }
  - { re: "\\d{{4}}-\\d{{2}}-\\d{{2}}", token: Date }
  - { re: "\\d{{2}}:\\d{{2}}:\\d{{2}}", token: Time }
  - { re: "=>", token: TimeArrow }
  - { re: "#{space}+.*?$", token: Comment }
  - { lit: ":LOGBOOK:", token: TreePropertyLogbook }

  #region Properties
  ## Subtree property lexing
  - lit: ":PROPERTIES:"
    token: TreePropertyProperties
    states: [LEAD]
    actions:
      - { do: pop, from: LEAD, to: INITIAL }
      - { do: push, from: INITIAL, to: PROPERTIES }


  - re: "^{space}+"
    token: LeadingSpace
    states: [PROPERTIES]
    actions:
      - { do: push, to: PROPERTY_LEAD, from: PROPERTIES }

  - lit: ":END:"
    token: TreePropertyEnd
    states: [PROPERTY_LEAD]
    actions:
      - { do: pop, from: PROPERTY_LEAD, to: PROPERTIES }
      - { do: pop, from: PROPERTIES, to: INITIAL }

  - re: ":({literal_properties}):"
    token: TreePropertyLiteral
    states: [PROPERTY_LEAD]
    actions:
      - { do: pop, from: PROPERTY_LEAD, to: PROPERTIES }
      - { do: push, from: PROPERTIES, to: PROPERTY_LITERAL }

  - re: "{space}+"
    token: Whitespace
    states: [PROPERTY_LITERAL]

  - re: ".*$"
    token: RawText
    states: [PROPERTY_LITERAL]

  - re: "\\n"
    token: Newline
    states: [PROPERTIES]

  - re: "\\n"
    token: Newline
    states: [PROPERTY_LITERAL]
    actions:
      - { do: pop, from: PROPERTY_LITERAL, to: PROPERTIES }

  - re: "\\n"
    token: Newline
    states: [PROPERTY_ANY]
    actions:
      - { do: pop, from: PROPERTY_ANY, to: PROPERTIES }

  # Properties with text content
  - re: ":(created|origin|blocker):"
    token: TreePropertyText
    states: [PROPERTY_LEAD]
    actions:
      - { do: pop, from: PROPERTY_LEAD, to: PROPERTIES }
      - { do: push, from: PROPERTIES, to: PROPERTY_ANY }



  - re: ":\\w+:"
    token: TreePropertyName
    states: [PROPERTIES]
  #endregion

  #region Text-elements
  - { lit: "CLOCK:", token: TreeClock }
  - { lit: "&", token: Ampersand }
  - { lit: "!", token: Exclamation }
  - { lit: "/", token: ForwardSlash }
  - { re: "[,\\.?]", token: AnyPunct }
  - { re: "^\\-", token: LeadingMinus }
  - { re: "^\\+", token: LeadingPlus }

  - { re: "\\+", token: Plus }
  - { re: "\\-", token: Minus }
  - { re: "\\\"", token: DoubleQuote }
  - { re: "\\'", token: SingleQuote }
  - { re: "\\\\\\\\", token: DoubleSlash }
  - { re: "#\\w+", token: HashIdent }
  - { re: "##", token: DoubleHash }
  - { lit: "(", token: LeftPar }
  - { lit: ")", token: RightPar }
  - { lit: "~", token: Tilda }
  - { lit: "=", token: Equals }
  - { lit: ";", token: Semicolon }
  - { lit: "*", token: Asterisk }
  - { lit: "<<", token: DoubleLeftAngle }
  - { lit: ">>", token: DoubleRightAngle }
  - { lit: "<", token: LeftAngle }
  - { lit: ">", token: RightAngle }
  - { lit: "^", token: Circumflex }
  - { lit: ":", token: Colon }
  - { lit: "{{{", token: MacroBegin }
  - { lit: "}}}", token: MacroEnd }
  - { lit: "{", token: LeftCurly }
  - { lit: "}", token: RightCurly }
  - { re: "\\\\.", token: EscapedChar }
  - { lit: "%", token: Percent }
  - { lit: "@", token: At }
  - { lit: "|", token: Pipe }
  - { lit: "```", token: TripleBacktick }
  - { lit: "`", token: Backtick }
  - { re: "\\p{{Punctuation}}", token: AnyPunct }
  - { re: "\\w+", token: Word }
  - { re: "\\$", token: Dollar }
  - { re: "[\\x{{0256}}-\\x{{10FFFF}}]|©", token: MiscUnicode }
  #endregion

  #region Newline-highlevel

  - re: "\\n"
    states: [LEAD]
    token: Newline
    actions: [{ do: pop, from: LEAD, to: INITIAL }]

  - re: "\\n{space}*\\n({space}*\\n)+"
    token: LongNewline
    states: [COMMAND_TEXT, COMMAND_RAW, COMMAND_ARGS, COMMAND_TBLFM]
    actions:
      - { do: pop, to: COMMAND }
      - { do: pop, from: COMMAND, to: INITIAL }
  - re: "\\n{space}*\\n"
    token: MediumNewline
    states: [COMMAND_TEXT, COMMAND_RAW, COMMAND_ARGS, COMMAND_TBLFM]
    actions:
      - { do: pop, to: COMMAND }
      - { do: pop, from: COMMAND, to: INITIAL }
  - re: "\\n"
    token: Newline
    states: [COMMAND_TEXT, COMMAND_RAW, COMMAND_ARGS, COMMAND_TBLFM]
    actions:
      - { do: pop, to: COMMAND }
      - { do: pop, from: COMMAND, to: INITIAL }

  - re: "\\n{space}*\\n({space}*\\n)+"
    token: LongNewline
    states: [LEAD, SUBTREE_HEAD]
    actions: [{ do: pop, to: INITIAL }]
  - re: "\\n{space}*\\n"
    token: MediumNewline
    states: [LEAD, SUBTREE_HEAD]
    actions: [{ do: pop, to: INITIAL }]
  - re: "\\n"
    token: Newline
    states: [LEAD, SUBTREE_HEAD]
    actions: [{ do: pop, to: INITIAL }]

  - re: "\\n{space}*\\n({space}*\\n)+"
    token: LongNewline
  - re: "\\n{space}*\\n"
    token: MediumNewline
  - re: "\\n"
    token: Newline

  #endregion

  - re: "<<EOF>>"
    token: EndOfFile
    states: [SUBTREE_HEAD]
    actions: 
    - { do: pop, from: SUBTREE_HEAD, to: INITIAL }
    - { do: raw, raw: "return 0;" }

  - re: "<<EOF>>"
    token: "EndOfFile"
    actions: [{ do: raw, raw: "return 0;" }]
