states:
  - { kind: state, name: COMMAND_TEXT }
  - { kind: state, name: SUBTREE_HEAD }
  - { kind: state, name: PROPERTY_ANY }
  - { kind: state, name: LEAD }

  - { kind: xstate, name: COMMAND }
  - { kind: xstate, name: COMMAND_EXAMPLE }
  - { kind: xstate, name: COMMAND_COLUMNS }
  - { kind: xstate, name: COMMAND_SRC }
  - { kind: xstate, name: BODY_SRC }
  - { kind: xstate, name: PROPERTIES }
  - { kind: xstate, name: PROPERTY_LITERAL }

rules:
  - lit: "#+"
    token: LineCommand
    actions: [{ do: "push", to: COMMAND, from: INITIAL }]

  # Document columns command
  - re: "columns"
    token: CmdColumns
    states: [COMMAND]
    actions:
      - { do: push, from: COMMAND, to: COMMAND_COLUMNS }

  - { lit: "%", token: Percent, states: [COMMAND_COLUMNS] }
  - { re: "\\d+", token: Digit, states: [COMMAND_COLUMNS] }
  - { re: "[a-zA-Z_]+", token: CmdIdent, states: [COMMAND_COLUMNS] }
  - { lit: "(", token: LeftPar, states: [COMMAND_COLUMNS] }
  - { lit: ")", token: RightPar, states: [COMMAND_COLUMNS] }
  - { lit: "{", token: LeftCurly, states: [COMMAND_COLUMNS] }
  - { lit: "}", token: RightCurly, states: [COMMAND_COLUMNS] }
  - { lit: ":", token: Colon, states: [COMMAND_COLUMNS] }
  - { re: "\\h+", token: Whitespace, states: [COMMAND_COLUMNS] }

  - re: "\\n"
    token: Newline
    states: [COMMAND_COLUMNS]
    actions:
      - { do: pop, from: COMMAND_COLUMNS, to: COMMAND }
      - { do: pop, from: COMMAND, to: INITIAL }

  # Quote block command
  - lit: "begin_quote"
    states: [COMMAND]
    token: CmdQuoteBegin
    actions: [{ do: pop, to: INITIAL, from: COMMAND }]

  - lit: "end_quote"
    states: [COMMAND]
    token: CmdQuoteEnd
    actions: [{ do: pop, to: INITIAL, from: COMMAND }]

  # Example literal command
  - lit: "begin_example"
    states: [COMMAND]
    token: CmdExampleBegin
    actions: [{ do: push, from: COMMAND, to: COMMAND_EXAMPLE }]

  - re: "^\\h*#\\+end_example\\h*$"
    states: [COMMAND_EXAMPLE]
    token: CmdExampleEnd
    actions:
      - { do: pop, from: COMMAND_EXAMPLE, to: COMMAND }
      - { do: pop, from: COMMAND, to: INITIAL }

  - re: "^.*$"
    states: [COMMAND_EXAMPLE]
    token: CmdExampleLine

  - re: "\\n"
    states: [COMMAND_EXAMPLE]
    token: Newline

  # Source code block command
  - re: "begin_src"
    states: [COMMAND]
    token: CmdSrcBegin
    actions: [{ do: "push", to: COMMAND_SRC, from: COMMAND }]
  - re: "^\\h*#\\+end_src\\h*$"
    states: [BODY_SRC]
    token: SrcContentEnd
    actions:
      - { do: pop, from: BODY_SRC, to: INITIAL }

  - re: "\\n"
    states: [COMMAND_SRC]
    token: Newline
    actions:
      - { do: "pop", from: COMMAND_SRC, to: COMMAND }
      - { do: "pop", from: COMMAND, to: INITIAL }
      - { do: "push", to: BODY_SRC, from: INITIAL }
  - { lit: "<<", states: [BODY_SRC], token: SrcTangleOpen }
  - { lit: ">>", states: [BODY_SRC], token: SrcTangleClose }
  - { re: ".+", states: [BODY_SRC], token: SrcContent }
  - { re: "\\n", states: [BODY_SRC], token: Newline }

  # Command with parameters
  - { re: ":\\w+", states: [COMMAND_SRC], token: CmdColonIdent }
  - { re: "\\w+", states: [COMMAND_SRC], token: CmdIdent }
  - { re: "\\h+", states: [COMMAND_SRC], token: Whitespace }

  # Caption command
  - lit: "caption"
    states: [COMMAND]
    token: CmdCaption
    actions: [{ do: push, to: COMMAND_TEXT, from: COMMAND }]
  - re: "\\n"
    token: Newline
    states: [COMMAND_TEXT]
    actions:
      - { do: pop, from: COMMAND_TEXT, to: COMMAND }
      - { do: pop, from: COMMAND, to: INITIAL }

  - re: "^\\*+"
    token: SubtreeStars
    actions:
      - { do: push, from: INITIAL, to: SUBTREE_HEAD }

  - re: "\\[#\\w\\]"
    token: SubtreePriority
    states: [SUBTREE_HEAD]

  - re: "\\n"
    token: Newline
    states: [SUBTREE_HEAD]
    actions:
      - { do: pop, from: SUBTREE_HEAD, to: INITIAL }

  # - { lit: "# -*- ", token: FileVarComment }
  - { re: "[0-9]+", token: Number }
  - { re: "^\\h+", token: LeadingSpace }
  - { re: "\\h+", token: Whitespace }
  - { re: "\\[", token: BraceOpen }
  - { re: "\\]", token: BraceClose }
  - { re: "\\d{4}-\\d{2}-\\d{2}", token: Date }
  - { re: "\\d{2}:\\d{2}:\\d{2}", token: Time }
  - { re: "=>", token: TimeArrow }
  - { re: "#\\h+.*?$", token: Comment }
  - { lit: ":LOGBOOK:", token: TreePropertyLogbook }

  - lit: ":PROPERTIES:"
    token: TreePropertyProperties
    actions:
      - { do: push, from: INITIAL, to: PROPERTIES }

  - re: "\\n"
    token: Newline
    states: [PROPERTIES]

  - re: "^\\h+"
    token: LeadingSpace
    states: [PROPERTIES]

  - lit: ":END:"
    token: TreePropertyEnd
    states: [PROPERTIES]
    actions:
      - { do: pop, from: PROPERTIES, to: INITIAL }

  - re: ":(id|effort):"
    token: TreePropertyLiteral
    states: [PROPERTIES]
    actions:
      - { do: push, from: PROPERTIES, to: PROPERTY_LITERAL }

  - re: "\\h+"
    token: Whitespace
    states: [PROPERTY_LITERAL]

  - re: ".*$"
    token: RawText
    states: [PROPERTY_LITERAL]

  - re: "\\n"
    token: Newline
    states: [PROPERTY_LITERAL]
    actions:
      - { do: pop, from: PROPERTY_LITERAL, to: PROPERTIES }

  # Properties with text content
  - re: ":(created|origin|blocker):"
    token: TreePropertyText
    states: [PROPERTIES]
    actions:
      - { do: push, from: PROPERTIES, to: PROPERTY_ANY }

  - re: "\\n"
    token: Newline
    states: [PROPERTY_ANY]
    actions:
      - { do: pop, from: PROPERTY_ANY, to: PROPERTIES }

  - re: ":\\w+:"
    token: TreePropertyName
    states: [PROPERTIES]

  - { lit: "CLOCK:", token: TreeClock }
  - { lit: "&", token: Ampersand }
  - { lit: "!", token: Exclamation }
  - { re: "[,\\./?]", token: AnyPunct }
  - { re: "\\+", token: Plus }
  - { re: "\\-", token: Minus }
  - { re: "\\\"", token: DoubleQuote }
  - { re: "\\'", token: SingleQuote }
  - { re: "\\\\\\\\", token: DoubleSlash }
  - { re: "#\\w+", token: HashIdent }
  - { re: "##", token: DoubleHash }
  - { lit: "(", token: LeftPar }
  - { lit: ")", token: RightPar }
  - { lit: "~", token: Tilda }
  - { lit: "=", token: Equals }
  - { lit: ";", token: Semicolon }
  - { lit: "*", token: Asterisk }
  - { lit: "<<", token: DoubleLeftAngle }
  - { lit: ">>", token: DoubleRightAngle }
  - { lit: "<", token: LeftAngle }
  - { lit: ">", token: RightAngle }
  - { lit: "^", token: Circumflex }
  - { lit: ":", token: Colon }
  - { lit: "{{{", token: MacroBegin }
  - { lit: "}}}", token: MacroEnd }
  - { lit: "{", token: LeftCurly }
  - { lit: "}", token: RightCurly }
  - { re: "\\\\.", token: EscapedChar }
  - { lit: "%", token: Percent }
  - { lit: "@", token: At }
  - { lit: "|", token: Pipe }
  - { lit: "```", token: TripleBacktick }
  - { lit: "`", token: Backtick }
  - { re: "\\p{Punctuation}", token: AnyPunct }
  - { re: "\\w+", token: Word }
  - { re: "\\$", token: Dollar }
  - { re: "[\\x{0256}-\\x{10FFFF}]|Â©", token: MiscUnicode }
  - { re: "\\n", token: Newline }
