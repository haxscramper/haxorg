/* clang-format off */
syntax = "proto3";
package orgproto;
import "SemOrgProtoManual.proto";
enum ListFormattingMode {
  ListFormattingMode_None_f                                                         = 0;
  ListFormattingMode_Table1D1Col_f                                                  = 1;
  ListFormattingMode_Table1D2Col_f                                                  = 2;
  ListFormattingMode_Table2DColFirst_f                                              = 3;
}

enum InitialSubtreeVisibility {
  InitialSubtreeVisibility_Overview_f                                               = 0;
  InitialSubtreeVisibility_Content_f                                                = 1;
  InitialSubtreeVisibility_ShowAll_f                                                = 2;
  InitialSubtreeVisibility_Show2Levels_f                                            = 3;
  InitialSubtreeVisibility_Show3Levels_f                                            = 4;
  InitialSubtreeVisibility_Show4Levels_f                                            = 5;
  InitialSubtreeVisibility_Show5Levels_f                                            = 6;
  InitialSubtreeVisibility_ShowEverything_f                                         = 7;
}

enum BlockCodeResults {
  BlockCodeResults_Replace_f                                                        = 0;
}

enum BlockCodeExports {
  BlockCodeExports_None_f                                                           = 0;
  BlockCodeExports_Both_f                                                           = 1;
  BlockCodeExports_Code_f                                                           = 2;
  BlockCodeExports_Results_f                                                        = 3;
}

enum OrgSpecName {
  OrgSpecName_Unnamed_f                                                             = 0;
  OrgSpecName_Result_f                                                              = 1;
  OrgSpecName_Year_f                                                                = 2;
  OrgSpecName_Day_f                                                                 = 3;
  OrgSpecName_Clock_f                                                               = 4;
  OrgSpecName_Repeater_f                                                            = 5;
  OrgSpecName_Zone_f                                                                = 6;
  OrgSpecName_Link_f                                                                = 7;
  OrgSpecName_Tags_f                                                                = 8;
  OrgSpecName_Tag_f                                                                 = 9;
  OrgSpecName_State_f                                                               = 10;
  OrgSpecName_Protocol_f                                                            = 11;
  OrgSpecName_Desc_f                                                                = 12;
  OrgSpecName_Times_f                                                               = 13;
  OrgSpecName_Drawer_f                                                              = 14;
  OrgSpecName_Args_f                                                                = 15;
  OrgSpecName_Name_f                                                                = 16;
  OrgSpecName_Definition_f                                                          = 17;
  OrgSpecName_Body_f                                                                = 18;
  OrgSpecName_HeaderArgs_f                                                          = 19;
  OrgSpecName_File_f                                                                = 20;
  OrgSpecName_Kind_f                                                                = 21;
  OrgSpecName_Lang_f                                                                = 22;
  OrgSpecName_Prefix_f                                                              = 23;
  OrgSpecName_Text_f                                                                = 24;
  OrgSpecName_Todo_f                                                                = 25;
  OrgSpecName_Importance_f                                                          = 26;
  OrgSpecName_Title_f                                                               = 27;
  OrgSpecName_Completion_f                                                          = 28;
  OrgSpecName_Head_f                                                                = 29;
  OrgSpecName_Subnodes_f                                                            = 30;
  OrgSpecName_Properties_f                                                          = 31;
  OrgSpecName_Logbook_f                                                             = 32;
  OrgSpecName_Description_f                                                         = 33;
  OrgSpecName_Logs_f                                                                = 34;
  OrgSpecName_Newstate_f                                                            = 35;
  OrgSpecName_Oldstate_f                                                            = 36;
  OrgSpecName_Time_f                                                                = 37;
  OrgSpecName_From_f                                                                = 38;
  OrgSpecName_EndArgs_f                                                             = 39;
  OrgSpecName_Flags_f                                                               = 40;
  OrgSpecName_Value_f                                                               = 41;
  OrgSpecName_Assoc_f                                                               = 42;
  OrgSpecName_Main_f                                                                = 43;
  OrgSpecName_Hash_f                                                                = 44;
  OrgSpecName_Bullet_f                                                              = 45;
  OrgSpecName_Counter_f                                                             = 46;
  OrgSpecName_Checkbox_f                                                            = 47;
  OrgSpecName_Header_f                                                              = 48;
  OrgSpecName_To_f                                                                  = 49;
  OrgSpecName_Diff_f                                                                = 50;
  OrgSpecName_Property_f                                                            = 51;
  OrgSpecName_Subname_f                                                             = 52;
  OrgSpecName_Values_f                                                              = 53;
  OrgSpecName_Cells_f                                                               = 54;
  OrgSpecName_Rows_f                                                                = 55;
  OrgSpecName_Lines_f                                                               = 56;
  OrgSpecName_Chunks_f                                                              = 57;
}

enum OrgNodeKind {
  OrgNodeKind_None_f                                                                = 0;
  OrgNodeKind_Document_f                                                            = 1;
  OrgNodeKind_Empty_f                                                               = 2;
  OrgNodeKind_InlineStmtList_f                                                      = 3;
  OrgNodeKind_StmtList_f                                                            = 4;
  OrgNodeKind_Checkbox_f                                                            = 5;
  OrgNodeKind_List_f                                                                = 6;
  OrgNodeKind_Bullet_f                                                              = 7;
  OrgNodeKind_ListItem_f                                                            = 8;
  OrgNodeKind_ListTag_f                                                             = 9;
  OrgNodeKind_Counter_f                                                             = 10;
  OrgNodeKind_File_f                                                                = 11;
  OrgNodeKind_ColonExample_f                                                        = 12;
  OrgNodeKind_TextSeparator_f                                                       = 13;
  OrgNodeKind_Paragraph_f                                                           = 14;
  OrgNodeKind_TableRow_f                                                            = 15;
  OrgNodeKind_TableCell_f                                                           = 16;
  OrgNodeKind_Table_f                                                               = 17;
  OrgNodeKind_InlineFootnote_f                                                      = 18;
  OrgNodeKind_Footnote_f                                                            = 19;
  OrgNodeKind_Cmd_f                                                                 = 20;
  OrgNodeKind_Attrs_f                                                               = 21;
  OrgNodeKind_AttrValue_f                                                           = 22;
  OrgNodeKind_AttrLisp_f                                                            = 23;
  OrgNodeKind_CmdTitle_f                                                            = 24;
  OrgNodeKind_CmdAuthor_f                                                           = 25;
  OrgNodeKind_CmdCreator_f                                                          = 26;
  OrgNodeKind_CmdInclude_f                                                          = 27;
  OrgNodeKind_CmdLanguage_f                                                         = 28;
  OrgNodeKind_CmdAttr_f                                                             = 29;
  OrgNodeKind_CmdStartup_f                                                          = 30;
  OrgNodeKind_CmdName_f                                                             = 31;
  OrgNodeKind_CmdCustomTextCommand_f                                                = 32;
  OrgNodeKind_CmdCustomArgsCommand_f                                                = 33;
  OrgNodeKind_CmdCustomRawCommand_f                                                 = 34;
  OrgNodeKind_CmdResults_f                                                          = 35;
  OrgNodeKind_CmdHeader_f                                                           = 36;
  OrgNodeKind_CmdOptions_f                                                          = 37;
  OrgNodeKind_CmdTblfm_f                                                            = 38;
  OrgNodeKind_CmdCaption_f                                                          = 39;
  OrgNodeKind_CmdResult_f                                                           = 40;
  OrgNodeKind_CmdCallCode_f                                                         = 41;
  OrgNodeKind_CmdFlag_f                                                             = 42;
  OrgNodeKind_CmdLatexClass_f                                                       = 43;
  OrgNodeKind_CmdLatexHeader_f                                                      = 44;
  OrgNodeKind_CmdLatexCompiler_f                                                    = 45;
  OrgNodeKind_CmdLatexClassOptions_f                                                = 46;
  OrgNodeKind_CmdHtmlHead_f                                                         = 47;
  OrgNodeKind_CmdColumns_f                                                          = 48;
  OrgNodeKind_CmdPropertyArgs_f                                                     = 49;
  OrgNodeKind_CmdPropertyText_f                                                     = 50;
  OrgNodeKind_CmdPropertyRaw_f                                                      = 51;
  OrgNodeKind_CmdFiletags_f                                                         = 52;
  OrgNodeKind_BlockVerbatimMultiline_f                                              = 53;
  OrgNodeKind_CodeLine_f                                                            = 54;
  OrgNodeKind_CodeText_f                                                            = 55;
  OrgNodeKind_CodeTangle_f                                                          = 56;
  OrgNodeKind_CodeCallout_f                                                         = 57;
  OrgNodeKind_BlockCode_f                                                           = 58;
  OrgNodeKind_BlockQuote_f                                                          = 59;
  OrgNodeKind_BlockComment_f                                                        = 60;
  OrgNodeKind_BlockCenter_f                                                         = 61;
  OrgNodeKind_BlockVerse_f                                                          = 62;
  OrgNodeKind_BlockExample_f                                                        = 63;
  OrgNodeKind_BlockExport_f                                                         = 64;
  OrgNodeKind_BlockDetails_f                                                        = 65;
  OrgNodeKind_BlockSummary_f                                                        = 66;
  OrgNodeKind_BlockDynamicFallback_f                                                = 67;
  OrgNodeKind_BigIdent_f                                                            = 68;
  OrgNodeKind_Bold_f                                                                = 69;
  OrgNodeKind_ErrorWrap_f                                                           = 70;
  OrgNodeKind_ErrorToken_f                                                          = 71;
  OrgNodeKind_Italic_f                                                              = 72;
  OrgNodeKind_Verbatim_f                                                            = 73;
  OrgNodeKind_Backtick_f                                                            = 74;
  OrgNodeKind_Underline_f                                                           = 75;
  OrgNodeKind_Strike_f                                                              = 76;
  OrgNodeKind_Quote_f                                                               = 77;
  OrgNodeKind_Angle_f                                                               = 78;
  OrgNodeKind_Monospace_f                                                           = 79;
  OrgNodeKind_Par_f                                                                 = 80;
  OrgNodeKind_InlineMath_f                                                          = 81;
  OrgNodeKind_DisplayMath_f                                                         = 82;
  OrgNodeKind_Space_f                                                               = 83;
  OrgNodeKind_Punctuation_f                                                         = 84;
  OrgNodeKind_Colon_f                                                               = 85;
  OrgNodeKind_Word_f                                                                = 86;
  OrgNodeKind_Escaped_f                                                             = 87;
  OrgNodeKind_Newline_f                                                             = 88;
  OrgNodeKind_RawLink_f                                                             = 89;
  OrgNodeKind_Link_f                                                                = 90;
  OrgNodeKind_Macro_f                                                               = 91;
  OrgNodeKind_Symbol_f                                                              = 92;
  OrgNodeKind_StaticActiveTime_f                                                    = 93;
  OrgNodeKind_StaticInactiveTime_f                                                  = 94;
  OrgNodeKind_DynamicActiveTime_f                                                   = 95;
  OrgNodeKind_DynamicInactiveTime_f                                                 = 96;
  OrgNodeKind_TimeRange_f                                                           = 97;
  OrgNodeKind_SimpleTime_f                                                          = 98;
  OrgNodeKind_HashTag_f                                                             = 99;
  OrgNodeKind_MetaSymbol_f                                                          = 100;
  OrgNodeKind_AtMention_f                                                           = 101;
  OrgNodeKind_Placeholder_f                                                         = 102;
  OrgNodeKind_RadioTarget_f                                                         = 103;
  OrgNodeKind_Target_f                                                              = 104;
  OrgNodeKind_SrcInlineCode_f                                                       = 105;
  OrgNodeKind_InlineCallCode_f                                                      = 106;
  OrgNodeKind_InlineExport_f                                                        = 107;
  OrgNodeKind_InlineComment_f                                                       = 108;
  OrgNodeKind_RawText_f                                                             = 109;
  OrgNodeKind_SubtreeDescription_f                                                  = 110;
  OrgNodeKind_SubtreeUrgency_f                                                      = 111;
  OrgNodeKind_DrawerLogbook_f                                                       = 112;
  OrgNodeKind_Drawer_f                                                              = 113;
  OrgNodeKind_DrawerPropertyList_f                                                  = 114;
  OrgNodeKind_DrawerProperty_f                                                      = 115;
  OrgNodeKind_Subtree_f                                                             = 116;
  OrgNodeKind_SubtreeTimes_f                                                        = 117;
  OrgNodeKind_SubtreeStars_f                                                        = 118;
  OrgNodeKind_SubtreeCompletion_f                                                   = 119;
  OrgNodeKind_SubtreeImportance_f                                                   = 120;
}

enum OrgJsonKind {
  OrgJsonKind_Null_f                                                                = 0;
  OrgJsonKind_Object_f                                                              = 1;
  OrgJsonKind_Array_f                                                               = 2;
  OrgJsonKind_String_f                                                              = 3;
  OrgJsonKind_Boolean_f                                                             = 4;
  OrgJsonKind_Int_f                                                                 = 5;
  OrgJsonKind_Float_f                                                               = 6;
}

enum OrgSemKind {
  OrgSemKind_None_f                                                                 = 0;
  OrgSemKind_ErrorItem_f                                                            = 1;
  OrgSemKind_ErrorGroup_f                                                           = 2;
  OrgSemKind_StmtList_f                                                             = 3;
  OrgSemKind_Empty_f                                                                = 4;
  OrgSemKind_CmdCaption_f                                                           = 5;
  OrgSemKind_CmdColumns_f                                                           = 6;
  OrgSemKind_CmdName_f                                                              = 7;
  OrgSemKind_CmdCustomArgs_f                                                        = 8;
  OrgSemKind_CmdCustomRaw_f                                                         = 9;
  OrgSemKind_CmdCustomText_f                                                        = 10;
  OrgSemKind_CmdCall_f                                                              = 11;
  OrgSemKind_CmdTblfm_f                                                             = 12;
  OrgSemKind_HashTag_f                                                              = 13;
  OrgSemKind_InlineFootnote_f                                                       = 14;
  OrgSemKind_InlineExport_f                                                         = 15;
  OrgSemKind_Time_f                                                                 = 16;
  OrgSemKind_TimeRange_f                                                            = 17;
  OrgSemKind_Macro_f                                                                = 18;
  OrgSemKind_Symbol_f                                                               = 19;
  OrgSemKind_Escaped_f                                                              = 20;
  OrgSemKind_Newline_f                                                              = 21;
  OrgSemKind_Space_f                                                                = 22;
  OrgSemKind_Word_f                                                                 = 23;
  OrgSemKind_AtMention_f                                                            = 24;
  OrgSemKind_RawText_f                                                              = 25;
  OrgSemKind_Punctuation_f                                                          = 26;
  OrgSemKind_Placeholder_f                                                          = 27;
  OrgSemKind_BigIdent_f                                                             = 28;
  OrgSemKind_TextTarget_f                                                           = 29;
  OrgSemKind_Bold_f                                                                 = 30;
  OrgSemKind_Underline_f                                                            = 31;
  OrgSemKind_Monospace_f                                                            = 32;
  OrgSemKind_MarkQuote_f                                                            = 33;
  OrgSemKind_Verbatim_f                                                             = 34;
  OrgSemKind_Italic_f                                                               = 35;
  OrgSemKind_Strike_f                                                               = 36;
  OrgSemKind_Par_f                                                                  = 37;
  OrgSemKind_RadioTarget_f                                                          = 38;
  OrgSemKind_Latex_f                                                                = 39;
  OrgSemKind_Link_f                                                                 = 40;
  OrgSemKind_BlockCenter_f                                                          = 41;
  OrgSemKind_BlockQuote_f                                                           = 42;
  OrgSemKind_BlockComment_f                                                         = 43;
  OrgSemKind_BlockVerse_f                                                           = 44;
  OrgSemKind_BlockDynamicFallback_f                                                 = 45;
  OrgSemKind_BlockExample_f                                                         = 46;
  OrgSemKind_BlockExport_f                                                          = 47;
  OrgSemKind_BlockAdmonition_f                                                      = 48;
  OrgSemKind_BlockCodeEvalResult_f                                                  = 49;
  OrgSemKind_BlockCode_f                                                            = 50;
  OrgSemKind_SubtreeLog_f                                                           = 51;
  OrgSemKind_Subtree_f                                                              = 52;
  OrgSemKind_Cell_f                                                                 = 53;
  OrgSemKind_Row_f                                                                  = 54;
  OrgSemKind_Table_f                                                                = 55;
  OrgSemKind_Paragraph_f                                                            = 56;
  OrgSemKind_ColonExample_f                                                         = 57;
  OrgSemKind_CmdAttr_f                                                              = 58;
  OrgSemKind_CmdExport_f                                                            = 59;
  OrgSemKind_Call_f                                                                 = 60;
  OrgSemKind_List_f                                                                 = 61;
  OrgSemKind_ListItem_f                                                             = 62;
  OrgSemKind_DocumentOptions_f                                                      = 63;
  OrgSemKind_Document_f                                                             = 64;
  OrgSemKind_FileTarget_f                                                           = 65;
  OrgSemKind_TextSeparator_f                                                        = 66;
  OrgSemKind_DocumentGroup_f                                                        = 67;
  OrgSemKind_File_f                                                                 = 68;
  OrgSemKind_Directory_f                                                            = 69;
  OrgSemKind_Symlink_f                                                              = 70;
  OrgSemKind_CmdInclude_f                                                           = 71;
}

message LispCode {
  message Call {
    string                                         name                             = 1;
    repeated LispCode                              args                             = 2;
    string                                         debug                            = 1000;
  }
  message List {
    repeated LispCode                              items                            = 1;
    string                                         debug                            = 1000;
  }
  message KeyValue {
    string                                         name                             = 1;
    repeated LispCode                              value                            = 2;
    string                                         debug                            = 1000;
  }
  message Number {
    int32                                          value                            = 1;
    string                                         debug                            = 1000;
  }
  message Text {
    string                                         value                            = 1;
    string                                         debug                            = 1000;
  }
  message Ident {
    string                                         name                             = 1;
    string                                         debug                            = 1000;
  }
  message Boolean {
    bool                                           value                            = 1;
    string                                         debug                            = 1000;
  }
  message Real {
    float                                          value                            = 1;
    string                                         debug                            = 1000;
  }
  message Data {
    oneof kind {
      LispCode.Call                                call                             = 1;
      LispCode.List                                list                             = 2;
      LispCode.KeyValue                            keyvalue                         = 3;
      LispCode.Number                              number                           = 4;
      LispCode.Text                                text                             = 5;
      LispCode.Ident                               ident                            = 6;
      LispCode.Boolean                             boolean                          = 7;
      LispCode.Real                                real                             = 8;
    }
  }
  enum Kind {
    Kind_Call_f                                                                     = 0;
    Kind_List_f                                                                     = 1;
    Kind_KeyValue_f                                                                 = 2;
    Kind_Number_f                                                                   = 3;
    Kind_Text_f                                                                     = 4;
    Kind_Ident_f                                                                    = 5;
    Kind_Boolean_f                                                                  = 6;
    Kind_Real_f                                                                     = 7;
  }
  LispCode.Data                                    data                             = 1;
  string                                           debug                            = 1000;
}

message Tblfm {
  message Expr {
    message AxisRef {
      message Position {
        message Index {
          int32                                    index                            = 1;
          string                                   debug                            = 1000;
        }
        message Name {
          string                                   name                             = 1;
          string                                   debug                            = 1000;
        }
        message Data {
          oneof kind {
            Tblfm.Expr.AxisRef.Position.Index      index                            = 1;
            Tblfm.Expr.AxisRef.Position.Name       name                             = 2;
          }
        }
        enum Kind {
          Kind_Index_f                                                              = 0;
          Kind_Name_f                                                               = 1;
        }
        Tblfm.Expr.AxisRef.Position.Data           data                             = 1;
        string                                     debug                            = 1000;
      }
      Tblfm.Expr.AxisRef.Position                  col                              = 1;
      optional Tblfm.Expr.AxisRef.Position         row                              = 2;
      string                                       debug                            = 1000;
    }
    message AxisName {
      string                                       name                             = 1;
      string                                       debug                            = 1000;
    }
    message IntLiteral {
      int32                                        value                            = 1;
      string                                       debug                            = 1000;
    }
    message FloatLiteral {
      float                                        value                            = 1;
      string                                       debug                            = 1000;
    }
    message RangeRef {
      optional Tblfm.Expr.AxisRef                  first                            = 1;
      optional Tblfm.Expr.AxisRef                  last                             = 2;
      string                                       debug                            = 1000;
    }
    message Call {
      string                                       name                             = 1;
      repeated Tblfm.Expr                          args                             = 2;
      string                                       debug                            = 1000;
    }
    message Elisp {
      string                                       value                            = 1;
      string                                       debug                            = 1000;
    }
    message Data {
      oneof kind {
        Tblfm.Expr.AxisRef                         axisref                          = 1;
        Tblfm.Expr.AxisName                        axisname                         = 2;
        Tblfm.Expr.IntLiteral                      intliteral                       = 3;
        Tblfm.Expr.FloatLiteral                    floatliteral                     = 4;
        Tblfm.Expr.RangeRef                        rangeref                         = 5;
        Tblfm.Expr.Call                            call                             = 6;
        Tblfm.Expr.Elisp                           elisp                            = 7;
      }
    }
    enum Kind {
      Kind_AxisRef_f                                                                = 0;
      Kind_AxisName_f                                                               = 1;
      Kind_IntLiteral_f                                                             = 2;
      Kind_FloatLiteral_f                                                           = 3;
      Kind_RangeRef_f                                                               = 4;
      Kind_Call_f                                                                   = 5;
      Kind_Elisp_f                                                                  = 6;
    }
    Tblfm.Expr.Data                                data                             = 1;
    string                                         debug                            = 1000;
  }
  message Assign {
    enum Flag {
      Flag_CellLeftAlign_f                                                          = 0;
      Flag_CellRightAlign_f                                                         = 1;
      Flag_CellCenterAlign_f                                                        = 2;
      Flag_CellNumber_f                                                             = 3;
      Flag_CellExponential_f                                                        = 4;
      Flag_CellFloating_f                                                           = 5;
      Flag_CellUnformat_f                                                           = 6;
      Flag_CellText_f                                                               = 7;
      Flag_CellBool_f                                                               = 8;
      Flag_CellDecimal_f                                                            = 9;
      Flag_CellPercentage_f                                                         = 10;
      Flag_CellHours_f                                                              = 11;
      Flag_CellZero_f                                                               = 12;
      Flag_CellMarkInvalid_f                                                        = 13;
      Flag_CellQuote_f                                                              = 14;
    }
    Tblfm.Expr.AxisRef                             target                           = 1;
    repeated Tblfm.Expr                            expr                             = 2;
    repeated Tblfm.Assign.Flag                     flags                            = 3;
    string                                         debug                            = 1000;
  }
  repeated Tblfm.Assign                            exprs                            = 1;
  string                                           debug                            = 1000;
}

message AttrValue {
  enum Kind {
    Kind_String_f                                                                   = 0;
    Kind_Boolean_f                                                                  = 1;
    Kind_Integer_f                                                                  = 2;
    Kind_Float_f                                                                    = 3;
    Kind_FileReference_f                                                            = 4;
  }
  message DimensionSpan {
    int32                                          first                            = 1;
    optional int32                                 last                             = 2;
    string                                         debug                            = 1000;
  }
  message TextValue {
    string                                         value                            = 1;
    string                                         debug                            = 1000;
  }
  message FileReference {
    string                                         file                             = 1;
    string                                         reference                        = 2;
    string                                         debug                            = 1000;
  }
  message LispValue {
    LispCode                                       code                             = 1;
    string                                         debug                            = 1000;
  }
  message DataVariant {
    oneof kind {
      AttrValue.TextValue                          textvalue                        = 1;
      AttrValue.FileReference                      filereference                    = 2;
      AttrValue.LispValue                          lispvalue                        = 3;
    }
  }
  enum DataKind {
    DataKind_TextValue_f                                                            = 0;
    DataKind_FileReference_f                                                        = 1;
    DataKind_LispValue_f                                                            = 2;
  }
  optional string                                  name                             = 1;
  optional string                                  varname                          = 2;
  repeated AttrValue.DimensionSpan                 span                             = 3;
  bool                                             isQuoted                         = 4;
  AttrValue.DataVariant                            data                             = 5;
  string                                           debug                            = 1000;
}

message HashTagFlat {
  repeated string                                  tags                             = 1;
  string                                           debug                            = 1000;
}

message HashTagText {
  string                                           head                             = 1;
  repeated HashTagText                             subtags                          = 2;
  string                                           debug                            = 1000;
}

message SubtreePath {
  repeated string                                  path                             = 1;
  string                                           debug                            = 1000;
}

message LinkTarget {
  message Raw {
    string                                         text                             = 1;
    string                                         debug                            = 1000;
  }
  message Id {
    string                                         text                             = 1;
    string                                         debug                            = 1000;
  }
  message CustomId {
    string                                         text                             = 1;
    string                                         debug                            = 1000;
  }
  message SubtreeTitle {
    SubtreePath                                    title                            = 1;
    int32                                          level                            = 2;
    string                                         debug                            = 1000;
  }
  message Person {
    string                                         name                             = 1;
    string                                         debug                            = 1000;
  }
  message UserProtocol {
    string                                         protocol                         = 1;
    string                                         target                           = 2;
    string                                         debug                            = 1000;
  }
  message Internal {
    string                                         target                           = 1;
    string                                         debug                            = 1000;
  }
  message Footnote {
    string                                         target                           = 1;
    string                                         debug                            = 1000;
  }
  message File {
    string                                         file                             = 1;
    string                                         debug                            = 1000;
  }
  message Attachment {
    string                                         file                             = 1;
    string                                         debug                            = 1000;
  }
  message Data {
    oneof kind {
      LinkTarget.Raw                               raw                              = 1;
      LinkTarget.Id                                id                               = 2;
      LinkTarget.CustomId                          customid                         = 3;
      LinkTarget.SubtreeTitle                      subtreetitle                     = 4;
      LinkTarget.Person                            person                           = 5;
      LinkTarget.UserProtocol                      userprotocol                     = 6;
      LinkTarget.Internal                          internal                         = 7;
      LinkTarget.Footnote                          footnote                         = 8;
      LinkTarget.File                              file                             = 9;
      LinkTarget.Attachment                        attachment                       = 10;
    }
  }
  enum Kind {
    Kind_Raw_f                                                                      = 0;
    Kind_Id_f                                                                       = 1;
    Kind_CustomId_f                                                                 = 2;
    Kind_SubtreeTitle_f                                                             = 3;
    Kind_Person_f                                                                   = 4;
    Kind_UserProtocol_f                                                             = 5;
    Kind_Internal_f                                                                 = 6;
    Kind_Footnote_f                                                                 = 7;
    Kind_File_f                                                                     = 8;
    Kind_Attachment_f                                                               = 9;
  }
  LinkTarget.Data                                  data                             = 1;
  string                                           debug                            = 1000;
}

message SubtreeLogHead {
  message Priority {
    enum Action {
      Action_Added_f                                                                = 0;
      Action_Removed_f                                                              = 1;
      Action_Changed_f                                                              = 2;
    }
    optional string                                oldPriority                      = 1;
    optional string                                newPriority                      = 2;
    hstd.UserTime                                  on                               = 3;
    SubtreeLogHead.Priority.Action                 action                           = 4;
    string                                         debug                            = 1000;
  }
  message Note {
    hstd.UserTime                                  on                               = 1;
    string                                         debug                            = 1000;
  }
  message Refile {
    hstd.UserTime                                  on                               = 1;
    LinkTarget                                     from                             = 2;
    string                                         debug                            = 1000;
  }
  message Clock {
    hstd.UserTime                                  from                             = 1;
    optional hstd.UserTime                         to                               = 2;
    string                                         debug                            = 1000;
  }
  message State {
    string                                         from                             = 1;
    string                                         to                               = 2;
    hstd.UserTime                                  on                               = 3;
    string                                         debug                            = 1000;
  }
  message Deadline {
    optional hstd.UserTime                         from                             = 1;
    hstd.UserTime                                  to                               = 2;
    hstd.UserTime                                  on                               = 3;
    string                                         debug                            = 1000;
  }
  message Schedule {
    optional hstd.UserTime                         from                             = 1;
    hstd.UserTime                                  to                               = 2;
    hstd.UserTime                                  on                               = 3;
    string                                         debug                            = 1000;
  }
  message Tag {
    hstd.UserTime                                  on                               = 1;
    HashTagText                                    tag                              = 2;
    bool                                           added                            = 3;
    string                                         debug                            = 1000;
  }
  message Unknown {
    string                                         debug                            = 1000;
  }
  message LogEntry {
    oneof kind {
      SubtreeLogHead.Priority                      priority                         = 1;
      SubtreeLogHead.Note                          note                             = 2;
      SubtreeLogHead.Refile                        refile                           = 3;
      SubtreeLogHead.Clock                         clock                            = 4;
      SubtreeLogHead.State                         state                            = 5;
      SubtreeLogHead.Deadline                      deadline                         = 6;
      SubtreeLogHead.Schedule                      schedule                         = 7;
      SubtreeLogHead.Tag                           tag                              = 8;
      SubtreeLogHead.Unknown                       unknown                          = 9;
    }
  }
  enum Kind {
    Kind_Priority_f                                                                 = 0;
    Kind_Note_f                                                                     = 1;
    Kind_Refile_f                                                                   = 2;
    Kind_Clock_f                                                                    = 3;
    Kind_State_f                                                                    = 4;
    Kind_Deadline_f                                                                 = 5;
    Kind_Schedule_f                                                                 = 6;
    Kind_Tag_f                                                                      = 7;
    Kind_Unknown_f                                                                  = 8;
  }
  SubtreeLogHead.LogEntry                          log                              = 1;
  string                                           debug                            = 1000;
}

message SubtreeCompletion {
  int32                                            done                             = 1;
  int32                                            full                             = 2;
  bool                                             isPercent                        = 3;
  string                                           debug                            = 1000;
}

message AttrList {
  repeated AttrValue                               items                            = 1;
  string                                           debug                            = 1000;
}

message AttrGroup {
  AttrList                                         positional                       = 1;
  map<string, AttrList>                            named                            = 2;
  string                                           debug                            = 1000;
}

message OrgCodeEvalInput {
  message Var {
    string                                         name                             = 1;
    OrgJson                                        value                            = 2;
    string                                         debug                            = 1000;
  }
  enum ResultType {
    ResultType_None_f                                                               = 0;
    ResultType_Table_f                                                              = 1;
    ResultType_List_f                                                               = 2;
    ResultType_Scalar_f                                                             = 3;
    ResultType_SaveFile_f                                                           = 4;
  }
  enum ResultFormat {
    ResultFormat_None_f                                                             = 0;
    ResultFormat_Raw_f                                                              = 1;
    ResultFormat_Code_f                                                             = 2;
    ResultFormat_Drawer_f                                                           = 3;
    ResultFormat_ExportType_f                                                       = 4;
    ResultFormat_Link_f                                                             = 5;
  }
  enum ResultHandling {
    ResultHandling_None_f                                                           = 0;
    ResultHandling_Replace_f                                                        = 1;
    ResultHandling_Silent_f                                                         = 2;
    ResultHandling_Discard_f                                                        = 3;
    ResultHandling_Append_f                                                         = 4;
    ResultHandling_Prepend_f                                                        = 5;
  }
  AttrGroup                                        blockAttrs                       = 1;
  string                                           tangledCode                      = 2;
  optional string                                  exportType                       = 3;
  OrgCodeEvalInput.ResultType                      resultType                       = 4;
  OrgCodeEvalInput.ResultFormat                    resultFormat                     = 5;
  OrgCodeEvalInput.ResultHandling                  resultHandling                   = 6;
  string                                           language                         = 7;
  repeated OrgCodeEvalInput.Var                    argList                          = 8;
  string                                           debug                            = 1000;
}

message OrgCodeEvalOutput {
  string                                           stdout                           = 1;
  string                                           stderr                           = 2;
  int32                                            code                             = 3;
  optional string                                  cmd                              = 4;
  repeated string                                  args                             = 5;
  string                                           cwd                              = 6;
  AttrGroup                                        appliedHeaderArg                 = 7;
  string                                           debug                            = 1000;
}

message ColumnView {
  message Summary {
    message CheckboxAggregate {
      enum Kind {
        Kind_IfAllNested_f                                                          = 0;
        Kind_AggregateFractionRec_f                                                 = 1;
        Kind_AggregatePercentRec_f                                                  = 2;
      }
      ColumnView.Summary.CheckboxAggregate.Kind    kind                             = 1;
      string                                       debug                            = 1000;
    }
    message MathAggregate {
      enum Kind {
        Kind_Min_f                                                                  = 0;
        Kind_Max_f                                                                  = 1;
        Kind_Mean_f                                                                 = 2;
        Kind_Sum_f                                                                  = 3;
        Kind_LowHighEst_f                                                           = 4;
      }
      ColumnView.Summary.MathAggregate.Kind        kind                             = 1;
      optional int32                               formatDigits                     = 2;
      optional int32                               formatPrecision                  = 3;
      string                                       debug                            = 1000;
    }
    message Data {
      oneof kind {
        ColumnView.Summary.CheckboxAggregate       checkboxaggregate                = 1;
        ColumnView.Summary.MathAggregate           mathaggregate                    = 2;
      }
    }
    enum Kind {
      Kind_CheckboxAggregate_f                                                      = 0;
      Kind_MathAggregate_f                                                          = 1;
    }
    ColumnView.Summary.Data                        data                             = 1;
    string                                         debug                            = 1000;
  }
  message Column {
    optional ColumnView.Summary                    summary                          = 1;
    optional int32                                 width                            = 2;
    optional string                                property                         = 3;
    optional string                                propertyTitle                    = 4;
    string                                         debug                            = 1000;
  }
  repeated ColumnView.Column                       columns                          = 1;
  string                                           debug                            = 1000;
}

message BlockCodeLine {
  message Part {
    message Raw {
      string                                       code                             = 1;
      string                                       debug                            = 1000;
    }
    message Callout {
      string                                       name                             = 1;
      string                                       debug                            = 1000;
    }
    message Tangle {
      string                                       target                           = 1;
      string                                       debug                            = 1000;
    }
    message Data {
      oneof kind {
        BlockCodeLine.Part.Raw                     raw                              = 1;
        BlockCodeLine.Part.Callout                 callout                          = 2;
        BlockCodeLine.Part.Tangle                  tangle                           = 3;
      }
    }
    enum Kind {
      Kind_Raw_f                                                                    = 0;
      Kind_Callout_f                                                                = 1;
      Kind_Tangle_f                                                                 = 2;
    }
    BlockCodeLine.Part.Data                        data                             = 1;
    string                                         debug                            = 1000;
  }
  repeated BlockCodeLine.Part                      parts                            = 1;
  string                                           debug                            = 1000;
}

message DocumentExportConfig {
  message TaskExport {
    repeated string                                taskWhitelist                    = 1;
    string                                         debug                            = 1000;
  }
  enum TagExport {
    TagExport_None_f                                                                = 0;
    TagExport_All_f                                                                 = 1;
    TagExport_NotInToc_f                                                            = 2;
  }
  enum TaskFiltering {
    TaskFiltering_Whitelist_f                                                       = 0;
    TaskFiltering_Done_f                                                            = 1;
    TaskFiltering_None_f                                                            = 2;
    TaskFiltering_All_f                                                             = 3;
  }
  enum BrokenLinks {
    BrokenLinks_Mark_f                                                              = 0;
    BrokenLinks_Raise_f                                                             = 1;
    BrokenLinks_Ignore_f                                                            = 2;
  }
  message DoExport {
    bool                                           exportToc                        = 1;
    string                                         debug                            = 1000;
  }
  message ExportFixed {
    int32                                          exportLevels                     = 1;
    string                                         debug                            = 1000;
  }
  message TocExport {
    oneof kind {
      DocumentExportConfig.DoExport                doexport                         = 1;
      DocumentExportConfig.ExportFixed             exportfixed                      = 2;
    }
  }
  enum TocExportKind {
    TocExportKind_DoExport_f                                                        = 0;
    TocExportKind_ExportFixed_f                                                     = 1;
  }
  optional bool                                    inlinetasks                      = 1;
  optional bool                                    footnotes                        = 2;
  optional bool                                    clock                            = 3;
  optional bool                                    author                           = 4;
  optional bool                                    emphasis                         = 5;
  optional bool                                    specialStrings                   = 6;
  optional bool                                    propertyDrawers                  = 7;
  optional bool                                    statisticsCookies                = 8;
  optional bool                                    todoText                         = 9;
  DocumentExportConfig.BrokenLinks                 brokenLinks                      = 10;
  DocumentExportConfig.TocExport                   tocExport                        = 11;
  DocumentExportConfig.TagExport                   tagExport                        = 12;
  DocumentExportConfig.TocExport                   data                             = 13;
  string                                           debug                            = 1000;
}

message SubtreePeriod {
  enum Kind {
    Kind_Clocked_f                                                                  = 0;
    Kind_Closed_f                                                                   = 1;
    Kind_Scheduled_f                                                                = 2;
    Kind_Titled_f                                                                   = 3;
    Kind_Deadline_f                                                                 = 4;
    Kind_Created_f                                                                  = 5;
    Kind_Repeated_f                                                                 = 6;
  }
  SubtreePeriod.Kind                               kind                             = 1;
  hstd.UserTime                                    from                             = 2;
  optional hstd.UserTime                           to                               = 3;
  string                                           debug                            = 1000;
}

message NamedProperty {
  message Nonblocking {
    bool                                           isBlocking                       = 1;
    string                                         debug                            = 1000;
  }
  message ArchiveTime {
    hstd.UserTime                                  time                             = 1;
    string                                         debug                            = 1000;
  }
  message ArchiveFile {
    string                                         file                             = 1;
    string                                         debug                            = 1000;
  }
  message ArchiveOlpath {
    SubtreePath                                    path                             = 1;
    string                                         debug                            = 1000;
  }
  message ArchiveTarget {
    SubtreePath                                    path                             = 1;
    string                                         pattern                          = 2;
    string                                         debug                            = 1000;
  }
  message ArchiveCategory {
    string                                         category                         = 1;
    string                                         debug                            = 1000;
  }
  message ArchiveTodo {
    string                                         todo                             = 1;
    string                                         debug                            = 1000;
  }
  message Trigger {
    string                                         debug                            = 1000;
  }
  message ExportLatexClass {
    string                                         latexClass                       = 1;
    string                                         debug                            = 1000;
  }
  message CookieData {
    enum TodoSource {
      TodoSource_Checkbox_f                                                         = 0;
      TodoSource_Todo_f                                                             = 1;
      TodoSource_Both_f                                                             = 2;
    }
    bool                                           isRecursive                      = 1;
    NamedProperty.CookieData.TodoSource            source                           = 2;
    string                                         debug                            = 1000;
  }
  message ExportLatexClassOptions {
    repeated string                                options                          = 1;
    string                                         debug                            = 1000;
  }
  message ExportLatexHeader {
    string                                         header                           = 1;
    string                                         debug                            = 1000;
  }
  message ExportLatexCompiler {
    string                                         compiler                         = 1;
    string                                         debug                            = 1000;
  }
  message Ordered {
    bool                                           isOrdered                        = 1;
    string                                         debug                            = 1000;
  }
  message Effort {
    int32                                          hours                            = 1;
    int32                                          minutes                          = 2;
    string                                         debug                            = 1000;
  }
  message Visibility {
    enum Level {
      Level_Folded_f                                                                = 0;
      Level_Children_f                                                              = 1;
      Level_Content_f                                                               = 2;
      Level_All_f                                                                   = 3;
    }
    NamedProperty.Visibility.Level                 level                            = 1;
    string                                         debug                            = 1000;
  }
  message ExportOptions {
    string                                         backend                          = 1;
    map<string, string>                            values                           = 2;
    string                                         debug                            = 1000;
  }
  message Blocker {
    repeated string                                blockers                         = 1;
    string                                         debug                            = 1000;
  }
  message Unnumbered {
    string                                         debug                            = 1000;
  }
  message Created {
    hstd.UserTime                                  time                             = 1;
    string                                         debug                            = 1000;
  }
  message RadioId {
    repeated string                                words                            = 1;
    string                                         debug                            = 1000;
  }
  message HashtagDef {
    HashTagText                                    hashtag                          = 1;
    string                                         debug                            = 1000;
  }
  message CustomArgs {
    string                                         name                             = 1;
    optional string                                sub                              = 2;
    AttrGroup                                      attrs                            = 3;
    string                                         debug                            = 1000;
  }
  message CustomRaw {
    string                                         name                             = 1;
    string                                         value                            = 2;
    string                                         debug                            = 1000;
  }
  message CustomSubtreeJson {
    string                                         name                             = 1;
    OrgJson                                        value                            = 2;
    string                                         debug                            = 1000;
  }
  message CustomSubtreeFlags {
    string                                         name                             = 1;
    AttrGroup                                      value                            = 2;
    string                                         debug                            = 1000;
  }
  message Data {
    oneof kind {
      NamedProperty.Nonblocking                    nonblocking                      = 1;
      NamedProperty.ArchiveTime                    archivetime                      = 2;
      NamedProperty.ArchiveFile                    archivefile                      = 3;
      NamedProperty.ArchiveOlpath                  archiveolpath                    = 4;
      NamedProperty.ArchiveTarget                  archivetarget                    = 5;
      NamedProperty.ArchiveCategory                archivecategory                  = 6;
      NamedProperty.ArchiveTodo                    archivetodo                      = 7;
      NamedProperty.Trigger                        trigger                          = 8;
      NamedProperty.ExportLatexClass               exportlatexclass                 = 9;
      NamedProperty.CookieData                     cookiedata                       = 10;
      NamedProperty.ExportLatexClassOptions        exportlatexclassoptions          = 11;
      NamedProperty.ExportLatexHeader              exportlatexheader                = 12;
      NamedProperty.ExportLatexCompiler            exportlatexcompiler              = 13;
      NamedProperty.Ordered                        ordered                          = 14;
      NamedProperty.Effort                         effort                           = 15;
      NamedProperty.Visibility                     visibility                       = 16;
      NamedProperty.ExportOptions                  exportoptions                    = 17;
      NamedProperty.Blocker                        blocker                          = 18;
      NamedProperty.Unnumbered                     unnumbered                       = 19;
      NamedProperty.Created                        created                          = 20;
      NamedProperty.RadioId                        radioid                          = 21;
      NamedProperty.HashtagDef                     hashtagdef                       = 22;
      NamedProperty.CustomArgs                     customargs                       = 23;
      NamedProperty.CustomRaw                      customraw                        = 24;
      NamedProperty.CustomSubtreeJson              customsubtreejson                = 25;
      NamedProperty.CustomSubtreeFlags             customsubtreeflags               = 26;
    }
  }
  enum Kind {
    Kind_Nonblocking_f                                                              = 0;
    Kind_ArchiveTime_f                                                              = 1;
    Kind_ArchiveFile_f                                                              = 2;
    Kind_ArchiveOlpath_f                                                            = 3;
    Kind_ArchiveTarget_f                                                            = 4;
    Kind_ArchiveCategory_f                                                          = 5;
    Kind_ArchiveTodo_f                                                              = 6;
    Kind_Trigger_f                                                                  = 7;
    Kind_ExportLatexClass_f                                                         = 8;
    Kind_CookieData_f                                                               = 9;
    Kind_ExportLatexClassOptions_f                                                  = 10;
    Kind_ExportLatexHeader_f                                                        = 11;
    Kind_ExportLatexCompiler_f                                                      = 12;
    Kind_Ordered_f                                                                  = 13;
    Kind_Effort_f                                                                   = 14;
    Kind_Visibility_f                                                               = 15;
    Kind_ExportOptions_f                                                            = 16;
    Kind_Blocker_f                                                                  = 17;
    Kind_Unnumbered_f                                                               = 18;
    Kind_Created_f                                                                  = 19;
    Kind_RadioId_f                                                                  = 20;
    Kind_HashtagDef_f                                                               = 21;
    Kind_CustomArgs_f                                                               = 22;
    Kind_CustomRaw_f                                                                = 23;
    Kind_CustomSubtreeJson_f                                                        = 24;
    Kind_CustomSubtreeFlags_f                                                       = 25;
  }
  NamedProperty.Data                               data                             = 1;
  string                                           debug                            = 1000;
}

message None {
  repeated AnyNode                                 subnodes                         = 1;
  optional LineCol                                 loc                              = 2;
  OrgSemKind                                       staticKind                       = 3;
  string                                           debug                            = 1000;
}

message ErrorItem {
  repeated AnyNode                                 subnodes                         = 1;
  optional LineCol                                 loc                              = 2;
  OrgSemKind                                       staticKind                       = 3;
  string                                           message                          = 4;
  optional string                                  function                         = 5;
  optional int32                                   line                             = 6;
  string                                           debug                            = 1000;
}

message ErrorGroup {
  repeated AnyNode                                 subnodes                         = 1;
  optional LineCol                                 loc                              = 2;
  OrgSemKind                                       staticKind                       = 3;
  repeated ErrorItem                               diagnostics                      = 4;
  optional string                                  function                         = 5;
  optional int32                                   line                             = 6;
  string                                           debug                            = 1000;
}

message Stmt {
  repeated AnyNode                                 subnodes                         = 1;
  optional LineCol                                 loc                              = 2;
  repeated AnyNode                                 attached                         = 3;
  string                                           debug                            = 1000;
}

message Inline {
  repeated AnyNode                                 subnodes                         = 1;
  optional LineCol                                 loc                              = 2;
  string                                           debug                            = 1000;
}

message StmtList {
  repeated AnyNode                                 subnodes                         = 1;
  optional LineCol                                 loc                              = 2;
  OrgSemKind                                       staticKind                       = 3;
  string                                           debug                            = 1000;
}

message Empty {
  repeated AnyNode                                 subnodes                         = 1;
  optional LineCol                                 loc                              = 2;
  OrgSemKind                                       staticKind                       = 3;
  string                                           debug                            = 1000;
}

message Cmd {
  repeated AnyNode                                 attached                         = 1;
  repeated AnyNode                                 subnodes                         = 2;
  optional LineCol                                 loc                              = 3;
  optional AttrGroup                               attrs                            = 4;
  string                                           debug                            = 1000;
}

message Block {
  optional AttrGroup                               attrs                            = 1;
  repeated AnyNode                                 attached                         = 2;
  repeated AnyNode                                 subnodes                         = 3;
  optional LineCol                                 loc                              = 4;
  string                                           debug                            = 1000;
}

message LineCommand {
  optional AttrGroup                               attrs                            = 1;
  repeated AnyNode                                 attached                         = 2;
  repeated AnyNode                                 subnodes                         = 3;
  optional LineCol                                 loc                              = 4;
  string                                           debug                            = 1000;
}

message Attached {
  optional AttrGroup                               attrs                            = 1;
  repeated AnyNode                                 attached                         = 2;
  repeated AnyNode                                 subnodes                         = 3;
  optional LineCol                                 loc                              = 4;
  string                                           debug                            = 1000;
}

message Leaf {
  repeated AnyNode                                 subnodes                         = 1;
  optional LineCol                                 loc                              = 2;
  string                                           text                             = 3;
  string                                           debug                            = 1000;
}

message CmdCaption {
  optional AttrGroup                               attrs                            = 1;
  repeated AnyNode                                 attached                         = 2;
  repeated AnyNode                                 subnodes                         = 3;
  optional LineCol                                 loc                              = 4;
  OrgSemKind                                       staticKind                       = 5;
  Paragraph                                        text                             = 6;
  string                                           debug                            = 1000;
}

message CmdColumns {
  optional AttrGroup                               attrs                            = 1;
  repeated AnyNode                                 attached                         = 2;
  repeated AnyNode                                 subnodes                         = 3;
  optional LineCol                                 loc                              = 4;
  OrgSemKind                                       staticKind                       = 5;
  ColumnView                                       view                             = 6;
  string                                           debug                            = 1000;
}

message CmdName {
  optional AttrGroup                               attrs                            = 1;
  repeated AnyNode                                 attached                         = 2;
  repeated AnyNode                                 subnodes                         = 3;
  optional LineCol                                 loc                              = 4;
  OrgSemKind                                       staticKind                       = 5;
  string                                           name                             = 6;
  string                                           debug                            = 1000;
}

message CmdCustomArgs {
  optional AttrGroup                               attrs                            = 1;
  repeated AnyNode                                 attached                         = 2;
  repeated AnyNode                                 subnodes                         = 3;
  optional LineCol                                 loc                              = 4;
  OrgSemKind                                       staticKind                       = 5;
  string                                           name                             = 6;
  bool                                             isAttached                       = 7;
  string                                           debug                            = 1000;
}

message CmdCustomRaw {
  repeated AnyNode                                 attached                         = 1;
  repeated AnyNode                                 subnodes                         = 2;
  optional LineCol                                 loc                              = 3;
  OrgSemKind                                       staticKind                       = 4;
  string                                           name                             = 5;
  bool                                             isAttached                       = 6;
  string                                           text                             = 7;
  string                                           debug                            = 1000;
}

message CmdCustomText {
  repeated AnyNode                                 attached                         = 1;
  repeated AnyNode                                 subnodes                         = 2;
  optional LineCol                                 loc                              = 3;
  OrgSemKind                                       staticKind                       = 4;
  string                                           name                             = 5;
  bool                                             isAttached                       = 6;
  Paragraph                                        text                             = 7;
  string                                           debug                            = 1000;
}

message CmdCall {
  optional AttrGroup                               attrs                            = 1;
  repeated AnyNode                                 attached                         = 2;
  repeated AnyNode                                 subnodes                         = 3;
  optional LineCol                                 loc                              = 4;
  OrgSemKind                                       staticKind                       = 5;
  string                                           name                             = 6;
  optional string                                  fileName                         = 7;
  AttrGroup                                        insideHeaderAttrs                = 8;
  AttrGroup                                        callAttrs                        = 9;
  AttrGroup                                        endHeaderAttrs                   = 10;
  repeated BlockCodeEvalResult                     result                           = 11;
  string                                           debug                            = 1000;
}

message CmdTblfm {
  optional AttrGroup                               attrs                            = 1;
  repeated AnyNode                                 attached                         = 2;
  repeated AnyNode                                 subnodes                         = 3;
  optional LineCol                                 loc                              = 4;
  OrgSemKind                                       staticKind                       = 5;
  Tblfm                                            expr                             = 6;
  string                                           debug                            = 1000;
}

message HashTag {
  repeated AnyNode                                 subnodes                         = 1;
  optional LineCol                                 loc                              = 2;
  OrgSemKind                                       staticKind                       = 3;
  HashTagText                                      text                             = 4;
  string                                           debug                            = 1000;
}

message InlineFootnote {
  repeated AnyNode                                 subnodes                         = 1;
  optional LineCol                                 loc                              = 2;
  OrgSemKind                                       staticKind                       = 3;
  string                                           tag                              = 4;
  optional AnyNode                                 definition                       = 5;
  string                                           debug                            = 1000;
}

message InlineExport {
  repeated AnyNode                                 subnodes                         = 1;
  optional LineCol                                 loc                              = 2;
  OrgSemKind                                       staticKind                       = 3;
  string                                           exporter                         = 4;
  string                                           content                          = 5;
  string                                           debug                            = 1000;
}

message Time {
  message Repeat {
    enum Mode {
      Mode_None_f                                                                   = 0;
      Mode_Exact_f                                                                  = 1;
      Mode_FirstMatch_f                                                             = 2;
      Mode_SameDay_f                                                                = 3;
    }
    enum Period {
      Period_Year_f                                                                 = 0;
      Period_Month_f                                                                = 1;
      Period_Week_f                                                                 = 2;
      Period_Day_f                                                                  = 3;
      Period_Hour_f                                                                 = 4;
      Period_Minute_f                                                               = 5;
    }
    Time.Repeat.Mode                               mode                             = 1;
    Time.Repeat.Period                             period                           = 2;
    int32                                          count                            = 3;
    string                                         debug                            = 1000;
  }
  message Static {
    optional Time.Repeat                           repeat                           = 1;
    hstd.UserTime                                  time                             = 2;
    string                                         debug                            = 1000;
  }
  message Dynamic {
    string                                         expr                             = 1;
    string                                         debug                            = 1000;
  }
  message TimeVariant {
    oneof kind {
      Time.Static                                  static                           = 1;
      Time.Dynamic                                 dynamic                          = 2;
    }
  }
  enum TimeKind {
    TimeKind_Static_f                                                               = 0;
    TimeKind_Dynamic_f                                                              = 1;
  }
  repeated AnyNode                                 subnodes                         = 1;
  optional LineCol                                 loc                              = 2;
  OrgSemKind                                       staticKind                       = 3;
  bool                                             isActive                         = 4;
  Time.TimeVariant                                 time                             = 5;
  string                                           debug                            = 1000;
}

message TimeRange {
  repeated AnyNode                                 subnodes                         = 1;
  optional LineCol                                 loc                              = 2;
  OrgSemKind                                       staticKind                       = 3;
  Time                                             from                             = 4;
  Time                                             to                               = 5;
  string                                           debug                            = 1000;
}

message Macro {
  repeated AnyNode                                 subnodes                         = 1;
  optional LineCol                                 loc                              = 2;
  OrgSemKind                                       staticKind                       = 3;
  string                                           name                             = 4;
  AttrGroup                                        attrs                            = 5;
  string                                           debug                            = 1000;
}

message Symbol {
  message Param {
    optional string                                key                              = 1;
    string                                         value                            = 2;
    string                                         debug                            = 1000;
  }
  repeated AnyNode                                 subnodes                         = 1;
  optional LineCol                                 loc                              = 2;
  OrgSemKind                                       staticKind                       = 3;
  string                                           name                             = 4;
  repeated Symbol.Param                            parameters                       = 5;
  repeated AnyNode                                 positional                       = 6;
  string                                           debug                            = 1000;
}

message Escaped {
  string                                           text                             = 1;
  repeated AnyNode                                 subnodes                         = 2;
  optional LineCol                                 loc                              = 3;
  OrgSemKind                                       staticKind                       = 4;
  string                                           debug                            = 1000;
}

message Newline {
  string                                           text                             = 1;
  repeated AnyNode                                 subnodes                         = 2;
  optional LineCol                                 loc                              = 3;
  OrgSemKind                                       staticKind                       = 4;
  string                                           debug                            = 1000;
}

message Space {
  string                                           text                             = 1;
  repeated AnyNode                                 subnodes                         = 2;
  optional LineCol                                 loc                              = 3;
  OrgSemKind                                       staticKind                       = 4;
  string                                           debug                            = 1000;
}

message Word {
  string                                           text                             = 1;
  repeated AnyNode                                 subnodes                         = 2;
  optional LineCol                                 loc                              = 3;
  OrgSemKind                                       staticKind                       = 4;
  string                                           debug                            = 1000;
}

message AtMention {
  string                                           text                             = 1;
  repeated AnyNode                                 subnodes                         = 2;
  optional LineCol                                 loc                              = 3;
  OrgSemKind                                       staticKind                       = 4;
  string                                           debug                            = 1000;
}

message RawText {
  string                                           text                             = 1;
  repeated AnyNode                                 subnodes                         = 2;
  optional LineCol                                 loc                              = 3;
  OrgSemKind                                       staticKind                       = 4;
  string                                           debug                            = 1000;
}

message Punctuation {
  string                                           text                             = 1;
  repeated AnyNode                                 subnodes                         = 2;
  optional LineCol                                 loc                              = 3;
  OrgSemKind                                       staticKind                       = 4;
  string                                           debug                            = 1000;
}

message Placeholder {
  string                                           text                             = 1;
  repeated AnyNode                                 subnodes                         = 2;
  optional LineCol                                 loc                              = 3;
  OrgSemKind                                       staticKind                       = 4;
  string                                           debug                            = 1000;
}

message BigIdent {
  string                                           text                             = 1;
  repeated AnyNode                                 subnodes                         = 2;
  optional LineCol                                 loc                              = 3;
  OrgSemKind                                       staticKind                       = 4;
  string                                           debug                            = 1000;
}

message TextTarget {
  string                                           text                             = 1;
  repeated AnyNode                                 subnodes                         = 2;
  optional LineCol                                 loc                              = 3;
  OrgSemKind                                       staticKind                       = 4;
  string                                           debug                            = 1000;
}

message Markup {
  repeated AnyNode                                 subnodes                         = 1;
  optional LineCol                                 loc                              = 2;
  string                                           debug                            = 1000;
}

message Bold {
  repeated AnyNode                                 subnodes                         = 1;
  optional LineCol                                 loc                              = 2;
  OrgSemKind                                       staticKind                       = 3;
  string                                           debug                            = 1000;
}

message Underline {
  repeated AnyNode                                 subnodes                         = 1;
  optional LineCol                                 loc                              = 2;
  OrgSemKind                                       staticKind                       = 3;
  string                                           debug                            = 1000;
}

message Monospace {
  repeated AnyNode                                 subnodes                         = 1;
  optional LineCol                                 loc                              = 2;
  OrgSemKind                                       staticKind                       = 3;
  string                                           debug                            = 1000;
}

message MarkQuote {
  repeated AnyNode                                 subnodes                         = 1;
  optional LineCol                                 loc                              = 2;
  OrgSemKind                                       staticKind                       = 3;
  string                                           debug                            = 1000;
}

message Verbatim {
  repeated AnyNode                                 subnodes                         = 1;
  optional LineCol                                 loc                              = 2;
  OrgSemKind                                       staticKind                       = 3;
  string                                           debug                            = 1000;
}

message Italic {
  repeated AnyNode                                 subnodes                         = 1;
  optional LineCol                                 loc                              = 2;
  OrgSemKind                                       staticKind                       = 3;
  string                                           debug                            = 1000;
}

message Strike {
  repeated AnyNode                                 subnodes                         = 1;
  optional LineCol                                 loc                              = 2;
  OrgSemKind                                       staticKind                       = 3;
  string                                           debug                            = 1000;
}

message Par {
  repeated AnyNode                                 subnodes                         = 1;
  optional LineCol                                 loc                              = 2;
  OrgSemKind                                       staticKind                       = 3;
  string                                           debug                            = 1000;
}

message RadioTarget {
  repeated AnyNode                                 subnodes                         = 1;
  optional LineCol                                 loc                              = 2;
  OrgSemKind                                       staticKind                       = 3;
  repeated string                                  words                            = 4;
  string                                           debug                            = 1000;
}

message Latex {
  repeated AnyNode                                 subnodes                         = 1;
  optional LineCol                                 loc                              = 2;
  OrgSemKind                                       staticKind                       = 3;
  string                                           debug                            = 1000;
}

message Link {
  repeated AnyNode                                 attached                         = 1;
  repeated AnyNode                                 subnodes                         = 2;
  optional LineCol                                 loc                              = 3;
  OrgSemKind                                       staticKind                       = 4;
  optional Paragraph                               description                      = 5;
  LinkTarget                                       target                           = 6;
  string                                           debug                            = 1000;
}

message BlockCenter {
  optional AttrGroup                               attrs                            = 1;
  repeated AnyNode                                 attached                         = 2;
  repeated AnyNode                                 subnodes                         = 3;
  optional LineCol                                 loc                              = 4;
  OrgSemKind                                       staticKind                       = 5;
  string                                           debug                            = 1000;
}

message BlockQuote {
  optional AttrGroup                               attrs                            = 1;
  repeated AnyNode                                 attached                         = 2;
  repeated AnyNode                                 subnodes                         = 3;
  optional LineCol                                 loc                              = 4;
  OrgSemKind                                       staticKind                       = 5;
  string                                           debug                            = 1000;
}

message BlockComment {
  repeated AnyNode                                 attached                         = 1;
  repeated AnyNode                                 subnodes                         = 2;
  optional LineCol                                 loc                              = 3;
  OrgSemKind                                       staticKind                       = 4;
  string                                           debug                            = 1000;
}

message BlockVerse {
  optional AttrGroup                               attrs                            = 1;
  repeated AnyNode                                 attached                         = 2;
  repeated AnyNode                                 subnodes                         = 3;
  optional LineCol                                 loc                              = 4;
  OrgSemKind                                       staticKind                       = 5;
  string                                           debug                            = 1000;
}

message BlockDynamicFallback {
  optional AttrGroup                               attrs                            = 1;
  repeated AnyNode                                 attached                         = 2;
  repeated AnyNode                                 subnodes                         = 3;
  optional LineCol                                 loc                              = 4;
  OrgSemKind                                       staticKind                       = 5;
  string                                           name                             = 6;
  string                                           debug                            = 1000;
}

message BlockExample {
  optional AttrGroup                               attrs                            = 1;
  repeated AnyNode                                 attached                         = 2;
  repeated AnyNode                                 subnodes                         = 3;
  optional LineCol                                 loc                              = 4;
  OrgSemKind                                       staticKind                       = 5;
  string                                           debug                            = 1000;
}

message BlockExport {
  optional AttrGroup                               attrs                            = 1;
  repeated AnyNode                                 attached                         = 2;
  repeated AnyNode                                 subnodes                         = 3;
  optional LineCol                                 loc                              = 4;
  OrgSemKind                                       staticKind                       = 5;
  string                                           exporter                         = 6;
  string                                           content                          = 7;
  string                                           debug                            = 1000;
}

message BlockAdmonition {
  optional AttrGroup                               attrs                            = 1;
  repeated AnyNode                                 attached                         = 2;
  repeated AnyNode                                 subnodes                         = 3;
  optional LineCol                                 loc                              = 4;
  OrgSemKind                                       staticKind                       = 5;
  string                                           debug                            = 1000;
}

message BlockCodeEvalResult {
  optional AttrGroup                               attrs                            = 1;
  repeated AnyNode                                 attached                         = 2;
  repeated AnyNode                                 subnodes                         = 3;
  optional LineCol                                 loc                              = 4;
  OrgSemKind                                       staticKind                       = 5;
  repeated OrgCodeEvalOutput                       raw                              = 6;
  AnyNode                                          node                             = 7;
  string                                           debug                            = 1000;
}

message BlockCode {
  optional AttrGroup                               attrs                            = 1;
  repeated AnyNode                                 attached                         = 2;
  repeated AnyNode                                 subnodes                         = 3;
  optional LineCol                                 loc                              = 4;
  OrgSemKind                                       staticKind                       = 5;
  optional string                                  lang                             = 6;
  BlockCodeExports                                 exports                          = 7;
  repeated BlockCodeEvalResult                     result                           = 8;
  repeated BlockCodeLine                           lines                            = 9;
  bool                                             cache                            = 10;
  bool                                             eval                             = 11;
  bool                                             noweb                            = 12;
  bool                                             hlines                           = 13;
  bool                                             tangle                           = 14;
  AttrGroup                                        executionVars                    = 15;
  AttrGroup                                        switches                         = 16;
  string                                           debug                            = 1000;
}

message SubtreeLog {
  repeated AnyNode                                 subnodes                         = 1;
  optional LineCol                                 loc                              = 2;
  OrgSemKind                                       staticKind                       = 3;
  SubtreeLogHead                                   head                             = 4;
  optional StmtList                                desc                             = 5;
  string                                           debug                            = 1000;
}

message Subtree {
  repeated AnyNode                                 subnodes                         = 1;
  optional LineCol                                 loc                              = 2;
  OrgSemKind                                       staticKind                       = 3;
  int32                                            level                            = 4;
  optional string                                  treeId                           = 5;
  optional string                                  todo                             = 6;
  optional SubtreeCompletion                       completion                       = 7;
  optional Paragraph                               description                      = 8;
  repeated HashTag                                 tags                             = 9;
  Paragraph                                        title                            = 10;
  repeated SubtreeLog                              logbook                          = 11;
  repeated NamedProperty                           properties                       = 12;
  optional hstd.UserTime                           closed                           = 13;
  optional hstd.UserTime                           deadline                         = 14;
  optional hstd.UserTime                           scheduled                        = 15;
  bool                                             isComment                        = 16;
  bool                                             isArchived                       = 17;
  optional string                                  priority                         = 18;
  string                                           debug                            = 1000;
}

message Cell {
  optional AttrGroup                               attrs                            = 1;
  repeated AnyNode                                 attached                         = 2;
  repeated AnyNode                                 subnodes                         = 3;
  optional LineCol                                 loc                              = 4;
  OrgSemKind                                       staticKind                       = 5;
  bool                                             isBlock                          = 6;
  string                                           debug                            = 1000;
}

message Row {
  optional AttrGroup                               attrs                            = 1;
  repeated AnyNode                                 attached                         = 2;
  repeated AnyNode                                 subnodes                         = 3;
  optional LineCol                                 loc                              = 4;
  OrgSemKind                                       staticKind                       = 5;
  repeated Cell                                    cells                            = 6;
  bool                                             isBlock                          = 7;
  string                                           debug                            = 1000;
}

message Table {
  optional AttrGroup                               attrs                            = 1;
  repeated AnyNode                                 attached                         = 2;
  repeated AnyNode                                 subnodes                         = 3;
  optional LineCol                                 loc                              = 4;
  OrgSemKind                                       staticKind                       = 5;
  repeated Row                                     rows                             = 6;
  bool                                             isBlock                          = 7;
  string                                           debug                            = 1000;
}

message Paragraph {
  repeated AnyNode                                 attached                         = 1;
  repeated AnyNode                                 subnodes                         = 2;
  optional LineCol                                 loc                              = 3;
  OrgSemKind                                       staticKind                       = 4;
  string                                           debug                            = 1000;
}

message ColonExample {
  repeated AnyNode                                 subnodes                         = 1;
  optional LineCol                                 loc                              = 2;
  OrgSemKind                                       staticKind                       = 3;
  string                                           debug                            = 1000;
}

message CmdAttr {
  optional AttrGroup                               attrs                            = 1;
  repeated AnyNode                                 attached                         = 2;
  repeated AnyNode                                 subnodes                         = 3;
  optional LineCol                                 loc                              = 4;
  OrgSemKind                                       staticKind                       = 5;
  string                                           target                           = 6;
  string                                           debug                            = 1000;
}

message CmdExport {
  optional AttrGroup                               attrs                            = 1;
  repeated AnyNode                                 attached                         = 2;
  repeated AnyNode                                 subnodes                         = 3;
  optional LineCol                                 loc                              = 4;
  OrgSemKind                                       staticKind                       = 5;
  string                                           exporter                         = 6;
  string                                           content                          = 7;
  string                                           debug                            = 1000;
}

message Call {
  repeated AnyNode                                 subnodes                         = 1;
  optional LineCol                                 loc                              = 2;
  OrgSemKind                                       staticKind                       = 3;
  string                                           name                             = 4;
  AttrGroup                                        attrs                            = 5;
  bool                                             isCommand                        = 6;
  string                                           debug                            = 1000;
}

message List {
  repeated AnyNode                                 attached                         = 1;
  repeated AnyNode                                 subnodes                         = 2;
  optional LineCol                                 loc                              = 3;
  OrgSemKind                                       staticKind                       = 4;
  string                                           debug                            = 1000;
}

message ListItem {
  enum Checkbox {
    Checkbox_None_f                                                                 = 0;
    Checkbox_Done_f                                                                 = 1;
    Checkbox_Empty_f                                                                = 2;
    Checkbox_Partial_f                                                              = 3;
  }
  repeated AnyNode                                 subnodes                         = 1;
  optional LineCol                                 loc                              = 2;
  OrgSemKind                                       staticKind                       = 3;
  ListItem.Checkbox                                checkbox                         = 4;
  optional Paragraph                               header                           = 5;
  optional string                                  bullet                           = 6;
  string                                           debug                            = 1000;
}

message DocumentOptions {
  repeated AnyNode                                 subnodes                         = 1;
  optional LineCol                                 loc                              = 2;
  OrgSemKind                                       staticKind                       = 3;
  InitialSubtreeVisibility                         initialVisibility                = 4;
  repeated NamedProperty                           properties                       = 5;
  DocumentExportConfig                             exportConfig                     = 6;
  optional bool                                    fixedWidthSections               = 7;
  optional bool                                    startupIndented                  = 8;
  optional string                                  category                         = 9;
  optional string                                  setupfile                        = 10;
  optional int32                                   maxSubtreeLevelExport            = 11;
  optional ColumnView                              columns                          = 12;
  string                                           debug                            = 1000;
}

message Document {
  repeated AnyNode                                 subnodes                         = 1;
  optional LineCol                                 loc                              = 2;
  OrgSemKind                                       staticKind                       = 3;
  optional Paragraph                               title                            = 4;
  optional Paragraph                               author                           = 5;
  optional Paragraph                               creator                          = 6;
  repeated HashTag                                 filetags                         = 7;
  optional RawText                                 email                            = 8;
  repeated string                                  language                         = 9;
  DocumentOptions                                  options                          = 10;
  optional string                                  exportFileName                   = 11;
  string                                           debug                            = 1000;
}

message FileTarget {
  repeated AnyNode                                 subnodes                         = 1;
  optional LineCol                                 loc                              = 2;
  OrgSemKind                                       staticKind                       = 3;
  string                                           path                             = 4;
  optional int32                                   line                             = 5;
  optional string                                  searchTarget                     = 6;
  bool                                             restrictToHeadlines              = 7;
  optional string                                  targetId                         = 8;
  optional string                                  regexp                           = 9;
  string                                           debug                            = 1000;
}

message TextSeparator {
  repeated AnyNode                                 subnodes                         = 1;
  optional LineCol                                 loc                              = 2;
  OrgSemKind                                       staticKind                       = 3;
  string                                           debug                            = 1000;
}

message DocumentGroup {
  repeated AnyNode                                 subnodes                         = 1;
  optional LineCol                                 loc                              = 2;
  OrgSemKind                                       staticKind                       = 3;
  string                                           debug                            = 1000;
}

message File {
  message Document {
    string                                         debug                            = 1000;
  }
  message Attachment {
    string                                         debug                            = 1000;
  }
  message Source {
    string                                         debug                            = 1000;
  }
  message Data {
    oneof kind {
      File.Document                                document                         = 1;
      File.Attachment                              attachment                       = 2;
      File.Source                                  source                           = 3;
    }
  }
  enum Kind {
    Kind_Document_f                                                                 = 0;
    Kind_Attachment_f                                                               = 1;
    Kind_Source_f                                                                   = 2;
  }
  repeated AnyNode                                 subnodes                         = 1;
  optional LineCol                                 loc                              = 2;
  OrgSemKind                                       staticKind                       = 3;
  string                                           relPath                          = 4;
  string                                           absPath                          = 5;
  File.Data                                        data                             = 6;
  string                                           debug                            = 1000;
}

message Directory {
  repeated AnyNode                                 subnodes                         = 1;
  optional LineCol                                 loc                              = 2;
  OrgSemKind                                       staticKind                       = 3;
  string                                           relPath                          = 4;
  string                                           absPath                          = 5;
  string                                           debug                            = 1000;
}

message Symlink {
  repeated AnyNode                                 subnodes                         = 1;
  optional LineCol                                 loc                              = 2;
  OrgSemKind                                       staticKind                       = 3;
  bool                                             isDirectory                      = 4;
  string                                           absPath                          = 5;
  string                                           debug                            = 1000;
}

message CmdInclude {
  message IncludeBase {
    string                                         debug                            = 1000;
  }
  message Example {
    string                                         debug                            = 1000;
  }
  message Export {
    string                                         language                         = 1;
    string                                         debug                            = 1000;
  }
  message Custom {
    string                                         blockName                        = 1;
    string                                         debug                            = 1000;
  }
  message Src {
    string                                         language                         = 1;
    string                                         debug                            = 1000;
  }
  message OrgDocument {
    optional bool                                  onlyContent                      = 1;
    optional SubtreePath                           subtreePath                      = 2;
    optional int32                                 minLevel                         = 3;
    optional string                                customIdTarget                   = 4;
    string                                         debug                            = 1000;
  }
  message Data {
    oneof kind {
      CmdInclude.Example                           example                          = 1;
      CmdInclude.Export                            export                           = 2;
      CmdInclude.Custom                            custom                           = 3;
      CmdInclude.Src                               src                              = 4;
      CmdInclude.OrgDocument                       orgdocument                      = 5;
    }
  }
  enum Kind {
    Kind_Example_f                                                                  = 0;
    Kind_Export_f                                                                   = 1;
    Kind_Custom_f                                                                   = 2;
    Kind_Src_f                                                                      = 3;
    Kind_OrgDocument_f                                                              = 4;
  }
  repeated AnyNode                                 subnodes                         = 1;
  optional LineCol                                 loc                              = 2;
  OrgSemKind                                       staticKind                       = 3;
  string                                           path                             = 4;
  optional int32                                   firstLine                        = 5;
  optional int32                                   lastLine                         = 6;
  CmdInclude.Data                                  data                             = 7;
  string                                           debug                            = 1000;
}

message AnyNode {
  oneof kind {
    None                                             none                             = 1;
    ErrorItem                                        erroritem                        = 2;
    ErrorGroup                                       errorgroup                       = 3;
    StmtList                                         stmtlist                         = 4;
    Empty                                            empty                            = 5;
    CmdCaption                                       cmdcaption                       = 6;
    CmdColumns                                       cmdcolumns                       = 7;
    CmdName                                          cmdname                          = 8;
    CmdCustomArgs                                    cmdcustomargs                    = 9;
    CmdCustomRaw                                     cmdcustomraw                     = 10;
    CmdCustomText                                    cmdcustomtext                    = 11;
    CmdCall                                          cmdcall                          = 12;
    CmdTblfm                                         cmdtblfm                         = 13;
    HashTag                                          hashtag                          = 14;
    InlineFootnote                                   inlinefootnote                   = 15;
    InlineExport                                     inlineexport                     = 16;
    Time                                             time                             = 17;
    TimeRange                                        timerange                        = 18;
    Macro                                            macro                            = 19;
    Symbol                                           symbol                           = 20;
    Escaped                                          escaped                          = 21;
    Newline                                          newline                          = 22;
    Space                                            space                            = 23;
    Word                                             word                             = 24;
    AtMention                                        atmention                        = 25;
    RawText                                          rawtext                          = 26;
    Punctuation                                      punctuation                      = 27;
    Placeholder                                      placeholder                      = 28;
    BigIdent                                         bigident                         = 29;
    TextTarget                                       texttarget                       = 30;
    Bold                                             bold                             = 31;
    Underline                                        underline                        = 32;
    Monospace                                        monospace                        = 33;
    MarkQuote                                        markquote                        = 34;
    Verbatim                                         verbatim                         = 35;
    Italic                                           italic                           = 36;
    Strike                                           strike                           = 37;
    Par                                              par                              = 38;
    RadioTarget                                      radiotarget                      = 39;
    Latex                                            latex                            = 40;
    Link                                             link                             = 41;
    BlockCenter                                      blockcenter                      = 42;
    BlockQuote                                       blockquote                       = 43;
    BlockComment                                     blockcomment                     = 44;
    BlockVerse                                       blockverse                       = 45;
    BlockDynamicFallback                             blockdynamicfallback             = 46;
    BlockExample                                     blockexample                     = 47;
    BlockExport                                      blockexport                      = 48;
    BlockAdmonition                                  blockadmonition                  = 49;
    BlockCodeEvalResult                              blockcodeevalresult              = 50;
    BlockCode                                        blockcode                        = 51;
    SubtreeLog                                       subtreelog                       = 52;
    Subtree                                          subtree                          = 53;
    Cell                                             cell                             = 54;
    Row                                              row                              = 55;
    Table                                            table                            = 56;
    Paragraph                                        paragraph                        = 57;
    ColonExample                                     colonexample                     = 58;
    CmdAttr                                          cmdattr                          = 59;
    CmdExport                                        cmdexport                        = 60;
    Call                                             call                             = 61;
    List                                             list                             = 62;
    ListItem                                         listitem                         = 63;
    DocumentOptions                                  documentoptions                  = 64;
    Document                                         document                         = 65;
    FileTarget                                       filetarget                       = 66;
    TextSeparator                                    textseparator                    = 67;
    DocumentGroup                                    documentgroup                    = 68;
    File                                             file                             = 69;
    Directory                                        directory                        = 70;
    Symlink                                          symlink                          = 71;
    CmdInclude                                       cmdinclude                       = 72;
  }
}
/* clang-format on */