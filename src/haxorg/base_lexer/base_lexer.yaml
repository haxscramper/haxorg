states:
  - { kind: state, name: COMMAND_TEXT }
  - { kind: state, name: SUBTREE_HEAD }
  - { kind: state, name: LEAD }

  - { kind: xstate, name: COMMAND }
  - { kind: xstate, name: COMMAND_RAW }
  - { kind: xstate, name: COMMAND_EXAMPLE }
  - { kind: xstate, name: COMMAND_EXPORT }
  - { kind: xstate, name: COMMAND_SRC }
  - { kind: xstate, name: COMMAND_ARGS }
  - { kind: xstate, name: COMMAND_TBLFM }
  - { kind: xstate, name: BODY_SRC }
  - { kind: xstate, name: BODY_EXPORT }
  - { kind: xstate, name: PROPERTIES }
  - { kind: xstate, name: PROPERTY_LITERAL }
  - { kind: xstate, name: PROPERTY_ARGUMENT }

rx_macros:
  - { name: space, value: "[\\h\\xA0]" }
  - { name: lead_space, value: "^[\\h\\xA0]*" }
  # Group of built-in org-mode properties that can be statically identified
  # and lexed to corresponding tokens. All unknown properties and directives
  # will be converted to raw string literals and processed at later
  # stages, mostly in sem layer
  - { name: literal_properties, value: "id|effort|(archive_(olpath|file|time|category|todo))|archive|prop_json" }
  # `:header-args` property for setting the parameters of the code blocks
  # `:property-set` and `:property-set-sub` for configuring how individual properties are computed
  - { name: argument_properties, value: "header-args|prop_args" }
  - { name: text_properties, value: "description|created|hashtag_?def" }
  - { name: dsl_links, value: "file|attachment|id" }
  - { name: "property_sub_kind", "value": "\\S+:"}
  # Property colon with optional text extension pattern an any number of
  # following spaces. Used both in line command directives and subtree
  # properties
  - { name: prop_colon, value: "\\+?:[\\h\\xA0]*" }
  - { name: maybe_12h_time, value: "(\\s?(am|AM|pm|PM))?" }
  - { name: "any_non_space_link", value: "[^\\s\\]}}]" }
  - { name: "any_non_brace_link", value: "[^\\]}}]" }
  - { name: "word_letter", value: "[\\p{L}\\p{Nd}--[_()]]" }

sub_lexers:
  http_link:
    - re: "^https?"
      token: LinkProtocolHttp

    - re: ":\\/\\/.*?$"
      token: LinkTarget

  inline_export:
    - re: "^@@\\w+"
      token: InlineExportBackend

    - re: ":.*?@@$"
      token: InlineExportContent

  link_protocol_split:
    - re: "^\\[\\["
      token: LinkBegin

    - re: "id"
      token: LinkProtocolId

    - re: "file"
      token: LinkProtocolFile

    - re: "attachment"
      token: LinkProtocolAttachment

    - re: https?
      token: LinkProtocolHttp

    - re: "\\w+:"
      token: LinkProtocol

  raw_dsl_link:
    - re: "^\\[\\[\\w+"
      sub: link_protocol_split

    - re: ":.*?$"
      token: LinkTarget

  no_protocol_file_link:
    - re: "^\\[\\["
      token: LinkBegin

    - re: "[\\|\\.].*?$"
      token: LinkTargetFile

  link_protocol_internal:
    - re: "^\\[\\["
      token: LinkBegin

    - re: "\\]\\["
      token: LinkSplit

    - re: "\\]\\]"
      token: LinkEnd

    - re: "(\\w|-|_)+"
      token: LinkProtocolInternal

    - re: "#"
      token: LinkProtocolCustomId

    - re: "\\*+[^\\]]+"
      token: LinkProtocolTitle

  timestamp_repeater:
    - re: "(\\.|\\+)?\\+"
      token: "TimeRepeaterSpec"

    - re: "\\d+[a-zA-Z]"
      token: TimeRepeaterDuration

  sub_call_cmd:
    - { re: "call{prop_colon}", token: CmdCall }
    - { re: ":(\\w|-)+", token: CmdColonIdent }
    - { re: "{space}+", token: Whitespace }
    - { re: "[\\H--[\\n\\[\\]\\(\\)=]]+", token: CmdRawArg }


tokens:
  - name: Indent
  - name: Dedent
  - name: SameIndent
  - name: ListBegin
  - name: ListEnd
  - name: StmtListBegin
  - name: StmtListEnd
  - name: ListItemEnd
  - name: Unknown
  - name: ListItemBegin
  - name: Punctuation
  - name: CmdPrefix
  - name: LinkTargetBegin
  - name: LinkTargetEnd
  - name: LinkDescriptionBegin
  - name: LinkProtocol
  - name: CmdContentBegin
  - name: HashTagBegin
  - name: BraceBegin
  - name: BoldBegin
  - name: BoldEnd
  - name: ItalicBegin
  - name: ItalicEnd
  - name: VerbatimBegin
  - name: VerbatimEnd
  - name: StrikeBegin
  - name: StrikeEnd
  - name: LatexParBegin
  - name: LatexParEnd
  - name: LatexInlineRaw
  - name: UnderlineBegin
  - name: UnderlineEnd
  - name: CmdFlag
  - name: CmdContentEnd
  - name: LinkFull
  - name: LinkTarget
  - name: LinkDescriptionEnd
  - name: CmdAdmonitionEnd
  - name: BigIdent
  - name: MonospaceBegin
  - name: MonospaceEnd

  - name: ItalicUnknown
  - name: BoldUnknown
  - name: StrikeUnknown
  - name: UnderlineUnknown
  - name: VerbatimUnknown
  - name: MonospaceUnknown

rules:
  #region Blocks
  #tag begin_quote
  - re: "begin_quote"
    states: [COMMAND]
    token: CmdQuoteBegin
    actions: [{ do: push, to: COMMAND_ARGS, from: COMMAND }]

  - re: "end_quote"
    states: [COMMAND]
    token: CmdQuoteEnd
    actions: [{ do: pop, to: INITIAL, from: COMMAND }]

  #tag begin_table
  - re: "begin_table"
    states: [COMMAND]
    token: CmdTableBegin
    actions: [{ do: push, to: COMMAND_ARGS, from: COMMAND }]

  - re: "end_table"
    states: [COMMAND]
    token: CmdTableEnd
    actions: [{ do: pop, to: INITIAL, from: COMMAND }]

  - re: "begin_cell"
    states: [COMMAND]
    token: CmdCellBegin
    actions: [{ do: push, to: COMMAND_ARGS, from: COMMAND }]

  - re: "end_cell"
    states: [COMMAND]
    token: CmdCellEnd
    actions: [{ do: pop, to: INITIAL, from: COMMAND }]

  - re: "begin_row"
    states: [COMMAND]
    token: CmdRowBegin
    actions: [{ do: push, to: COMMAND_ARGS, from: COMMAND }]

  - re: "end_row"
    states: [COMMAND]
    token: CmdRowEnd
    actions: [{ do: pop, to: INITIAL, from: COMMAND }]

  #tag begin_comment
  - re: "begin_comment"
    states: [COMMAND]
    token: CmdCommentBegin
    actions: [{ do: push, to: COMMAND_ARGS, from: COMMAND }]

  - re: "end_comment"
    states: [COMMAND]
    token: CmdCommentEnd
    actions: [{ do: pop, to: INITIAL, from: COMMAND }]

  #tag begin_verse
  - re: "begin_verse"
    states: [COMMAND]
    token: CmdVerseBegin
    actions: [{ do: push, to: COMMAND_ARGS, from: COMMAND }]

  - re: "end_verse"
    states: [COMMAND]
    token: CmdVerseEnd
    actions: [{ do: pop, to: INITIAL, from: COMMAND }]

  #tag begin_center
  - re: "begin_center"
    states: [COMMAND]
    token: CmdCenterBegin
    actions: [{ do: push, to: COMMAND_ARGS, from: COMMAND }]

  - re: "end_center"
    states: [COMMAND]
    token: CmdCenterEnd
    actions: [{ do: pop, to: INITIAL, from: COMMAND }]

  #tag begin dynamic
  - re: "begin:"
    states: [COMMAND]
    token: CmdDynamicBegin
    actions: [{ do: push, to: COMMAND_ARGS, from: COMMAND }]

  - re: "end:"
    states: [COMMAND]
    token: CmdDynamicEnd
    actions: [{ do: pop, to: INITIAL, from: COMMAND }]


  #region begin_example
  - re: "begin_example"
    states: [COMMAND]
    token: CmdExampleBegin
    actions: [{ do: push, from: COMMAND, to: COMMAND_EXAMPLE }]

  - re: "^{space}*#\\+end_example{space}*$"
    states: [COMMAND_EXAMPLE]
    token: CmdExampleEnd
    actions:
      - { do: pop, from: COMMAND_EXAMPLE, to: COMMAND }
      - { do: pop, from: COMMAND, to: INITIAL }

  - re: "^.*$"
    states: [COMMAND_EXAMPLE]
    token: CmdExampleLine

  - re: "\\n"
    states: [COMMAND_EXAMPLE]
    token: Newline

  #endregion

  #region begin_export
  - re: "begin_export"
    states: [COMMAND]
    token: CmdExportBegin
    actions: [{ do: push, from: COMMAND, to: COMMAND_EXPORT }]

  - re: "^{space}*#\\+end_export{space}*$"
    states: [BODY_EXPORT]
    token: CmdExportEnd
    actions:
      - { do: pop, from: BODY_EXPORT, to: INITIAL }

  - re: ".*"
    states: [BODY_EXPORT]
    token: CmdExportLine

  - re: "\\n"
    states: [BODY_EXPORT]
    token: Newline

  - re: "\\n"
    states: [COMMAND_EXPORT]
    token: Newline
    actions:
      - { do: "pop", from: COMMAND_EXPORT, to: COMMAND }
      - { do: "pop", from: COMMAND, to: INITIAL }
      - { do: "push", to: BODY_EXPORT, from: INITIAL }

  #endregion

  #region begin_src
  - re: "begin_src"
    states: [COMMAND]
    token: CmdSrcBegin
    actions: [{ do: "push", to: COMMAND_SRC, from: COMMAND }]
  - re: "^{space}*#\\+end_src{space}*$"
    states: [BODY_SRC]
    token: CmdSrcEnd
    actions:
      - { do: pop, from: BODY_SRC, to: INITIAL }

  - re: "\\n"
    states: [COMMAND_SRC]
    token: Newline
    actions:
      - { do: "pop", from: COMMAND_SRC, to: COMMAND }
      - { do: "pop", from: COMMAND, to: INITIAL }
      - { do: "push", to: BODY_SRC, from: INITIAL }
  - { lit: "<<", states: [BODY_SRC], token: SrcTangleOpen }
  - { lit: ">>", states: [BODY_SRC], token: SrcTangleClose }
  - { re: ".+", states: [BODY_SRC], token: SrcContent }
  - { re: "\\n", states: [BODY_SRC], token: Newline }
  #endregion

  - re: "begin_\\w+"
    states: [COMMAND]
    token: CmdDynamicBlockBegin
    actions: [{ do: push, to: COMMAND_ARGS, from: COMMAND }]

  - re: "end_\\w+"
    states: [COMMAND]
    token: CmdDynamicBlockEnd
    actions: [{ do: pop, to: INITIAL, from: COMMAND }]


  #endregion

  #region Command-parameters
  - lit: "("
    token: ParBegin
    states: [COMMAND_ARGS, COMMAND_SRC, COMMAND_EXPORT, PROPERTY_ARGUMENT]
    
  - lit: ")"
    token: ParEnd
    states: [COMMAND_ARGS, COMMAND_SRC, COMMAND_EXPORT, PROPERTY_ARGUMENT]
    
  - re: "\\["
    token: BraceBegin
    states: [COMMAND_ARGS, COMMAND_SRC, COMMAND_EXPORT, PROPERTY_ARGUMENT]
    
  - re: "\\]"
    token: BraceEnd
    states: [COMMAND_ARGS, COMMAND_SRC, COMMAND_EXPORT, PROPERTY_ARGUMENT]
    
  - lit: "="
    token: Equals
    states: [COMMAND_ARGS, COMMAND_SRC, COMMAND_EXPORT, PROPERTY_ARGUMENT]
    
  - lit: ","
    token: Comma
    states: [COMMAND_ARGS, COMMAND_SRC, COMMAND_EXPORT, PROPERTY_ARGUMENT]
    
  - re: ":(\\w|-)+"
    states: [COMMAND_ARGS, COMMAND_SRC, COMMAND_EXPORT, PROPERTY_ARGUMENT]
    token: CmdColonIdent
    
  - re: "{space}+"
    states: [COMMAND_ARGS, COMMAND_SRC, COMMAND_EXPORT, PROPERTY_ARGUMENT]
    token: Whitespace

  - re: "[\\H--[\\n\\[\\]\\(\\)=]]+"
    states: [COMMAND_ARGS, COMMAND_SRC, COMMAND_EXPORT, PROPERTY_ARGUMENT]
    token: CmdRawArg
  #endregion

  #region Line-commands
  #tag Prefix
  - re: "^#\\+"
    token: LineCommand
    actions:
      - { do: push, to: COMMAND, from: INITIAL }

  - lit: "#+"
    states: [LEAD]
    token: LineCommand
    keepLead: true
    actions:
      - { do: pop, to: INITIAL, from: LEAD }
      - { do: push, to: COMMAND, from: INITIAL }

  - re: ":{space}.*"
    states: [LEAD]
    token: ColonExampleLine
  - re: "^:{space}.*"
    states: [INITIAL]
    token: ColonExampleLine

  #region DSL-commands
  - re: "columns{prop_colon}"
    token: CmdColumns
    states: [COMMAND]
    actions:
      - { do: push, from: COMMAND, to: COMMAND_RAW }

  - re: "startup{prop_colon}"
    states: [COMMAND]
    token: CmdStartup
    actions: [{ do: push, to: COMMAND_ARGS, from: COMMAND }]

  - re: "options{prop_colon}"
    states: [COMMAND]
    token: CmdOptions
    # Full options parsing is deferred to the sem stage
    actions: [{ do: push, to: COMMAND_RAW, from: COMMAND }]

  - re: "tblfm{prop_colon}"
    states: [COMMAND]
    token: CmdTblfm
    actions: [{ do: push, to: COMMAND_RAW, from: COMMAND }]

  - re: "property{prop_colon}"
    states: [COMMAND]
    token: CmdPropertyRaw
    actions: [{ do: push, to: COMMAND_RAW, from: COMMAND }]

  - re: "email{prop_colon}"
    states: [COMMAND]
    token: CmdEmailRaw
    actions: [{ do: push, to: COMMAND_RAW, from: COMMAND }]

  - re: "macro{prop_colon}"
    states: [COMMAND]
    token: CmdMacroRaw
    actions: [{ do: push, to: COMMAND_RAW, from: COMMAND }]

  - re: "seq_todo{prop_colon}"
    states: [COMMAND]
    token: CmdSeqTodoRaw
    actions: [{ do: push, to: COMMAND_RAW, from: COMMAND }]

  - re: "bind{prop_colon}"
    states: [COMMAND]
    token: CmdBindRaw
    actions: [{ do: push, to: COMMAND_RAW, from: COMMAND }]

  - re: "tags{prop_colon}"
    states: [COMMAND]
    token: CmdTagsRaw
    actions: [{ do: push, to: COMMAND_RAW, from: COMMAND }]

  - re: "exclude_tags{prop_colon}"
    states: [COMMAND]
    token: CmdExcludeTagsRaw
    actions: [{ do: push, to: COMMAND_RAW, from: COMMAND }]

  - re: "select_tags{prop_colon}"
    states: [COMMAND]
    token: CmdSelectTagsRaw
    actions: [{ do: push, to: COMMAND_RAW, from: COMMAND }]

  - re: "drawers{prop_colon}"
    states: [COMMAND]
    token: CmdDrawersRaw
    actions: [{ do: push, to: COMMAND_RAW, from: COMMAND }]

  - re: "keywords{prop_colon}"
    states: [COMMAND]
    token: CmdDateRaw
    actions: [{ do: push, to: COMMAND_RAW, from: COMMAND }]

  - re: "category{prop_colon}"
    states: [COMMAND]
    token: CmdCategoryRaw
    actions: [{ do: push, to: COMMAND_RAW, from: COMMAND }]

  - re: "priorities{prop_colon}"
    states: [COMMAND]
    token: CmdPrioritiesRaw
    actions: [{ do: push, to: COMMAND_RAW, from: COMMAND }]

  - re: "setupfile{prop_colon}"
    states: [COMMAND]
    token: CmdSetupfileRaw
    actions: [{ do: push, to: COMMAND_RAW, from: COMMAND }]

  - re: "html_head{prop_colon}"
    states: [COMMAND]
    token: CmdHtmlHeadRaw
    actions: [{ do: push, to: COMMAND_RAW, from: COMMAND }]

  - re: "latex_header_extra{prop_colon}"
    states: [COMMAND]
    token: CmdLatexHeaderExtraRaw
    actions: [{ do: push, to: COMMAND_RAW, from: COMMAND }]

  - re: ".*"
    states: [COMMAND_RAW]
    token: RawText

  #region Table-command
  - re: "{lead_space}\\|"
    token: LeadingPipe
  - re: "\\|$"
    token: TrailingPipe
  - re: "{lead_space}\\|([:-]+[\\|\\+]+)+[:|-]*\\|"
    token: TableSeparator

  #endregion

  #endregion

  #region Text-commands
  - re: "caption{prop_colon}"
    states: [COMMAND]
    token: CmdCaption
    actions: [{ do: push, to: COMMAND_TEXT, from: COMMAND }]

  - re: "description{prop_colon}"
    states: [COMMAND]
    token: CmdDescription
    actions: [{ do: push, to: COMMAND_TEXT, from: COMMAND }]

  - re: "date{prop_colon}"
    states: [COMMAND]
    token: CmdDateRaw
    actions: [{ do: push, to: COMMAND_TEXT, from: COMMAND }]

  - re: "link{prop_colon}"
    states: [COMMAND]
    token: CmdLinkRaw
    actions: [{ do: push, to: COMMAND_TEXT, from: COMMAND }]

  - re: "property{prop_colon}({text_properties})"
    states: [COMMAND]
    token: CmdPropertyText
    actions: [{ do: push, to: COMMAND_TEXT, from: COMMAND }]

  - re: "title{prop_colon}"
    states: [COMMAND]
    token: CmdTitle
    actions: [{ do: push, to: COMMAND_TEXT, from: COMMAND }]

  - re: "creator{prop_colon}"
    states: [COMMAND]
    token: CmdCreator
    actions: [{ do: push, to: COMMAND_TEXT, from: COMMAND }]

  - re: "author{prop_colon}"
    states: [COMMAND]
    token: CmdAuthor
    actions: [{ do: push, to: COMMAND_TEXT, from: COMMAND }]

  - re: "language{prop_colon}"
    states: [COMMAND]
    token: CmdLanguage
    actions: [{ do: push, to: COMMAND_TEXT, from: COMMAND }]

  - re: "filetags{prop_colon}"
    states: [COMMAND]
    token: CmdFiletags
    actions: [{ do: push, to: COMMAND_TEXT, from: COMMAND }]

  #endregion

  #region Argument-commands
  - re: "property{prop_colon}({argument_properties})"
    states: [COMMAND]
    token: CmdPropertyArgs
    actions: [{ do: push, to: COMMAND_ARGS, from: COMMAND }]

  - re: "header{prop_colon}"
    states: [COMMAND]
    token: CmdHeader
    actions: [{ do: push, to: COMMAND_ARGS, from: COMMAND }]

  - re: "results{prop_colon}"
    states: [COMMAND]
    token: CmdResults
    actions: [{ do: push, to: COMMAND_ARGS, from: COMMAND }]

  - re: "name{prop_colon}"
    states: [COMMAND]
    token: CmdName
    actions: [{ do: push, to: COMMAND_ARGS, from: COMMAND }]

  - re: "constants{prop_colon}"
    states: [COMMAND]
    token: CmdConstants
    actions: [{ do: push, to: COMMAND_ARGS, from: COMMAND }]


  - re: "attr_\\w+{prop_colon}"
    states: [COMMAND]
    token: CmdAttr
    actions: [{ do: push, to: COMMAND_ARGS, from: COMMAND }]

  - re: "include{prop_colon}"
    states: [COMMAND]
    token: CmdInclude
    actions: [{ do: push, to: COMMAND_ARGS, from: COMMAND }]

  - re: "call{prop_colon}"
    states: [COMMAND]
    token: CmdCall
    actions: [{ do: push, to: COMMAND_ARGS, from: COMMAND }]

  - re: "row{prop_colon}"
    states: [COMMAND]
    token: CmdRow
    actions: [{ do: push, to: COMMAND_ARGS, from: COMMAND }]

  - re: "cell{prop_colon}"
    states: [COMMAND]
    token: CmdCell
    actions: [{ do: push, to: COMMAND_ARGS, from: COMMAND }]

  - re: "latex_class{prop_colon}"
    states: [COMMAND]
    token: CmdLatexClass
    actions: [{ do: push, to: COMMAND_ARGS, from: COMMAND }]

  - re: "latex_class_options{prop_colon}"
    states: [COMMAND]
    token: CmdLatexClassOptions
    actions: [{ do: push, to: COMMAND_ARGS, from: COMMAND }]

  - re: "latex_compiler{prop_colon}"
    states: [COMMAND]
    token: CmdLatexCompiler
    actions: [{ do: push, to: COMMAND_ARGS, from: COMMAND }]

  - re: "latex_header{prop_colon}"
    states: [COMMAND]
    token: CmdLatexHeader
    actions: [{ do: push, to: COMMAND_ARGS, from: COMMAND }]
  #endregion

  - re: "(\\w|_)+?{prop_colon}"
    states: [COMMAND]
    token: CmdCustomRaw
    actions: [{ do: push, to: COMMAND_RAW, from: COMMAND }]

  #endregion

  #region Subtree
  - re: "^\\*+(?={space}+)"
    token: SubtreeStars
    actions:
      - { do: push, from: INITIAL, to: SUBTREE_HEAD }

  - re: "\\[#\\w\\]"
    token: SubtreePriority
    states: [SUBTREE_HEAD]

  - { re: "{lead_space}[0-9]+[\\.\\)](?={space}+)", token: LeadingNumber }
  - { re: "[0-9]+", token: Number }
  - re: "^{space}+"
    token: LeadingSpace
    keepLead: true
    actions:
      - { do: push, to: LEAD, from: INITIAL }

  #region Properties
  - re: "{lead_space}:LOGBOOK:"
    token: ColonLogbook
  - re: "{lead_space}:PROPERTIES:"
    token: ColonProperties
  - re: "{lead_space}:END:"
    token: ColonEnd
  - re: "{lead_space}:({literal_properties}):({property_sub_kind})?"
    token: ColonLiteralProperty
    actions:
      - { do: push, from: INITIAL, to: PROPERTY_LITERAL }

  - re: "{space}+"
    token: Whitespace
    states: [PROPERTY_LITERAL]

  - re: ".*$"
    token: RawText
    states: [PROPERTY_LITERAL]

  - re: "\\n"
    token: Newline
    states: [PROPERTIES]

  - re: "\\n"
    token: Newline
    states: [PROPERTY_LITERAL]
    actions:
      - { do: pop, from: PROPERTY_LITERAL, to: INITIAL }

  - re: "{lead_space}:({argument_properties}):({property_sub_kind})?"
    token: ColonArgumentsProperty
    actions:
      - { do: push, from: INITIAL, to: PROPERTY_ARGUMENT }

  - re: "{space}+"
    token: Whitespace
    states: [PROPERTY_ARGUMENT]

  - re: "\\n"
    token: Newline
    states: [PROPERTY_ARGUMENT]
    actions:
      - { do: pop, from: PROPERTY_ARGUMENT, to: INITIAL }

  # Properties with text content
  - re: "{lead_space}:({text_properties}):"
    token: ColonPropertyText
  - re: "{lead_space}:\\w+:"
    token: ColonLiteralProperty
    actions:
      - { do: push, from: INITIAL, to: PROPERTY_LITERAL }
  #endregion

  #endregion

  #region Text-elements
  #region Links and footnotes
  - { re: "{space}+", token: Whitespace }
  - re: "https?:\\/\\/{any_non_space_link}+"
    sub: "http_link"

  - { re: "\\[fn:[^:].*?\\]", token: FootnoteLinked }
  - { re: "\\[fn::", token: FootnoteInlineBegin }
  - re: "\\[\\[({dsl_links}):({any_non_brace_link})+"
    sub: raw_dsl_link

  - re: "\\[\\[https?:\\/\\/{any_non_space_link}+"
    sub: "raw_dsl_link"

  - re: "\\[\\[(\\/|\\.){any_non_brace_link}+"
    sub: no_protocol_file_link

  - re: "\\[\\[(\\w|-|_|#)+(\\]\\]|\\]\\[)"
    sub: link_protocol_internal

  - re: "\\[\\[\\*+.+(\\]\\]|\\]\\[)"
    sub: link_protocol_internal

  - re: "\\[\\[\\w+:"
    sub: link_protocol_split

  - re: "\\[\\d+\\/\\d+\\]"
    token: SubtreeCompletion

  - re: "@@\\w+:[^@]+@@"
    sub: "inline_export"

  - re: "\\[\\d+%\\]"
    token: SubtreeCompletion

  - { re: "\\]\\]", token: LinkEnd }
  - { re: "\\]\\[", token: LinkSplit }
  #endregion

  - { re: "\\[", token: BraceBegin }
  - { re: "\\]", token: BraceEnd }
  - { re: "\\d{{4}}-\\d{{2}}-\\d{{2}}", token: Date }
  - { re: "\\d{{2}}:\\d{{2}}:\\d{{2}}{maybe_12h_time}", token: Time }
  - { re: "\\d{{1,}}:\\d{{2}}{maybe_12h_time}", token: Time }
  - re: "(\\.|\\+)?\\+(\\d+[a-zA-Z])+"
    sub: timestamp_repeater

  - re: "-\\d+\\w"
    token: TimeWarnPeriod

  - re: "(sun|mon|tue|wed|thu|fri|sat|sunday|monday|tuesday|wednesday|thursday|friday|saturday)"
    token: WeekdayName
  - { re: "=>", token: TimeArrow }
  - { re: "--", token: DoubleDash }
  - { lit: "::", token: DoubleColon }
  - { re: "#{space}+.*?$", token: Comment }

  - { re: "{lead_space}CLOCK:", token: TreeClock }
  - { re: "(CLOSED|SCHEDULED|DEADLINE):", token: TreeTime }

  #region Punctuation
  - { lit: "&", token: Ampersand }
  - { lit: "!", token: Exclamation }
  - { lit: "/", token: ForwardSlash }
  - { lit: "_", token: "Underline" }
  - { re: "[\\.?]", token: AnyPunct }
  - { re: "{lead_space}-(?={space}+)", token: LeadingMinus }
  - { re: "{lead_space}\\+(?={space}+)", token: LeadingPlus }
  - { re: "\\[(\\s|x|X|-)\\]", token: Checkbox }

  - { re: "\\+", token: Plus }
  - { re: "^\\-{{5,}}", token: TextSeparator }
  - { re: "\\-", token: Minus }
  - { re: "\\\"", token: DoubleQuote }
  - { re: "\\'", token: SingleQuote }
  - { re: "\\\\\\\\", token: DoubleSlash }
  - { re: "src_\\w+", token: TextSrcBegin }
  - { re: "#\\w+", token: HashIdent }
  - { re: "##", token: DoubleHash }
  - { lit: "(", token: ParBegin }
  - { lit: ")", token: ParEnd }
  - { lit: "~", token: Tilda }
  - { lit: "=", token: Equals }
  - { lit: ";", token: Semicolon }
  - { lit: "*", token: Asterisk }
  - { lit: ",", token: Comma }
  - { re: "<(\\w|\\s)+>", token: "Placeholder" }
  - { lit: "<<<", token: TripleAngleBegin }
  - { lit: ">>>", token: TripleAngleEnd }
  - { lit: "<<", token: DoubleAngleBegin }
  - { lit: ">>", token: DoubleAngleEnd }
  - { lit: "<", token: AngleBegin }
  - { lit: ">", token: AngleEnd }
  - { lit: "^", token: Circumflex }
  - { lit: ":", token: Colon }
  - { lit: "{", token: CurlyBegin }
  - { lit: "}", token: CurlyEnd }

  - { re: "\\\\\\w+", token: Symbol }
  - { re: "\\\\.", token: Escaped }
  - { lit: "%", token: Percent }
  - { re: "@\\w+", token: At }
  - { lit: "|", token: Pipe }
  - { lit: "`", token: Backtick }
  - { re: "\\p{{Punctuation}}", token: AnyPunct }
  - { re: "({word_letter})|({word_letter}({word_letter}|[-'_])*{word_letter}'?)", token: Word }
  - { re: "\\$", token: Dollar }
  - {
      re: "[\\x{{0128}}-\\x{{10FFFF}}]|×|©|°|¹|²|³|¥|π|√|¶|∆",
      token: MiscUnicode,
    }
  - { lit: "<%%", token: DynamicTimeContent }
  #endregion
  #endregion

  #region Newline-highlevel
  - re: "\\n"
    states: [LEAD]
    token: Newline
    keepLead: true
    actions: [{ do: pop, from: LEAD, to: INITIAL }]

  - re: "\\n{space}*\\n({space}*\\n)+"
    token: LongNewline
    states: [COMMAND_TEXT, COMMAND_RAW, COMMAND_ARGS, COMMAND_TBLFM]
    actions:
      - { do: pop, to: COMMAND }
      - { do: pop, from: COMMAND, to: INITIAL }
  - re: "\\n{space}*\\n"
    token: MediumNewline
    states: [COMMAND_TEXT, COMMAND_RAW, COMMAND_ARGS, COMMAND_TBLFM]
    actions:
      - { do: pop, to: COMMAND }
      - { do: pop, from: COMMAND, to: INITIAL }
  - re: "\\n"
    token: Newline
    states: [COMMAND_TEXT, COMMAND_RAW, COMMAND_ARGS, COMMAND_TBLFM]
    actions:
      - { do: pop, to: COMMAND }
      - { do: pop, from: COMMAND, to: INITIAL }

  - re: "\\n{space}*\\n({space}*\\n)+"
    token: LongNewline
    states: [LEAD, SUBTREE_HEAD]
    keepLead: true
    actions: [{ do: pop, to: INITIAL }]
  - re: "\\n{space}*\\n"
    token: MediumNewline
    states: [LEAD, SUBTREE_HEAD]
    keepLead: true
    actions: [{ do: pop, to: INITIAL }]
  - re: "\\n"
    token: Newline
    states: [LEAD, SUBTREE_HEAD]
    keepLead: true
    actions: [{ do: pop, to: INITIAL }]

  - re: "\\n{space}*\\n({space}*\\n)+"
    token: LongNewline
  - re: "\\n{space}*\\n"
    token: MediumNewline
  - re: "\\n"
    token: Newline
  #endregion

  - re: "<<EOF>>"
    token: EndOfFile
    states: [SUBTREE_HEAD]
    actions:
      - { do: pop, from: SUBTREE_HEAD, to: INITIAL }
      - { do: raw, raw: "return 0;" }

  - re: "<<EOF>>"
    token: "EndOfFile"
    actions: [{ do: raw, raw: "return 0;" }]
