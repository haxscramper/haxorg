#+title: Code generation steps used in the project

NOTE:  Code generation  artifacts in  this project  *are* committed  to the
repository. Unless  you need to update  the data model or  update generated
bindings it should not affect the regular compilation process.

* Org data type description

Org-mode data type  definition is the central part of  the whole project --
it is used by the sem converter, exporter, annotators, python API and cache
serialization.   All    the   defined   record   types    are   placed   in
~sem/SemOrgTypes.hpp~ and  are committed  to the  repository, but  they are
actually  automatically  generated  based  on  the  data  provided  in  the
~scripts/code/org_codegen_data.py~ the  file itself is nothing  more than a
huge hardcoded  object literal  that is  imported by  the ~codegen.py~
script.

Code  generation pipeline  starts at  the  codegen data  which is  directly
imported by  the code  generator script.  It iterates over  a list  of file
specifications and  writes generated  code out into  the main  source tree.
There is  no intermediate build  step that  implicitly runs codegen  -- all
files are stored and committed directly to the repository.

Currently, those are the main code-generated file groups in the repository:

- Org-mode data types :: Stored in ~sem/SemOrgTypes.hpp~ this step provides
  description of  the final data  format that generated  at the end  of the
  initial file processing pipeline.
- Exporter          ::         Two   files,  ~exporters/Exporter.tcc~   and
  ~exporters/ExporterMethods.tcc~  are used  to implement  recursive =CRTP=
  walker over the data model described in the previous step.
- Enumerations :: ~sem/SemOrgEnums.hpp~  and ~sem/SemOrgEnums.cpp~ provides
  a list of enumeration types alongside  with reflection data to be used in
  the org type definitions.
- Python  bindings  :: =pybind11=  wrappers  are  automatically created  to
  expose all the fields in the org types.
