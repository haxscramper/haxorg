from typing import *
from enum import Enum
from datetime import datetime, date, time
class GraphPoint:
    def __init__(self, x: double, y: double) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    x: double
    y: double

class GraphPath:
    def __init__(self, points: List[GraphPoint], startPoint: Optional[GraphPoint], endPoint: Optional[GraphPoint], bezier: bool) -> None: ...
    def point(self, x: double, y: double) -> None: ...
    def point(self, p: GraphPoint) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    points: List[GraphPoint]
    startPoint: Optional[GraphPoint]
    endPoint: Optional[GraphPoint]
    bezier: bool

class GraphSize:
    def __init__(self, w: double, h: double) -> None: ...
    def height(self) -> double: ...
    def width(self) -> double: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    w: double
    h: double

class GraphRect:
    def __init__(self, left: double, top: double, width: double, height: double) -> None: ...
    def size(self) -> GraphSize: ...
    def setBottomLeft(self, x: double, y: double) -> None: ...
    def setTopRight(self, x: double, y: double) -> None: ...
    def setBottomLeft(self, p: GraphPoint) -> None: ...
    def setTopRight(self, p: GraphPoint) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    left: double
    top: double
    width: double
    height: double

class GraphConstraint:
    def __init__(self) -> None: ...
    @staticmethod
    def InitEmptyStatic(self, arg: GraphConstraintEmpty) -> GraphConstraint: ...
    @staticmethod
    def InitAlignStatic(self, arg: GraphConstraintAlign) -> GraphConstraint: ...
    @staticmethod
    def InitSeparateStatic(self, arg: GraphConstraintSeparate) -> GraphConstraint: ...
    @staticmethod
    def InitMultiSeparateStatic(self, arg: GraphConstraintMultiSeparate) -> GraphConstraint: ...
    @staticmethod
    def InitFixedRelativeStatic(self, arg: GraphConstraintFixedRelative) -> GraphConstraint: ...
    @staticmethod
    def InitPageBoundaryStatic(self, arg: GraphConstraintPageBoundary) -> GraphConstraint: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class GraphConstraintEmpty:
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class GraphConstraintAlign:
    def __init__(self, nodes: List[GraphConstraintAlignSpec], dimension: GraphDimension) -> None: ...
    def toColaString(self) -> str: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    nodes: List[GraphConstraintAlignSpec]
    dimension: GraphDimension

class GraphConstraintAlignSpec:
    def __init__(self, node: int, fixPos: Optional[double], offset: double) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    node: int
    fixPos: Optional[double]
    offset: double

class GraphConstraintSeparate:
    def __init__(self, left: GraphConstraintAlign, right: GraphConstraintAlign, separationDistance: double, isExactSeparation: bool, dimension: GraphDimension) -> None: ...
    def toColaString(self) -> str: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    left: GraphConstraintAlign
    right: GraphConstraintAlign
    separationDistance: double
    isExactSeparation: bool
    dimension: GraphDimension

class GraphConstraintMultiSeparate:
    def __init__(self, lines: List[GraphConstraintAlign], alignPairs: List[stdpair[int, int]], dimension: GraphDimension, separationDistance: double, isExactSeparation: bool) -> None: ...
    def toColaString(self) -> str: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    lines: List[GraphConstraintAlign]
    alignPairs: List[stdpair[int, int]]
    dimension: GraphDimension
    separationDistance: double
    isExactSeparation: bool

class GraphConstraintFixedRelative:
    def __init__(self, nodes: List[int], fixedPosition: bool) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    nodes: List[int]
    fixedPosition: bool

class GraphConstraintPageBoundary:
    def __init__(self, rect: GraphRect, weight: double) -> None: ...
    def toColaString(self) -> str: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    rect: GraphRect
    weight: double

class GraphEdge:
    def __init__(self, source: int, target: int) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    source: int
    target: int

class GraphLayoutIR:
    def __init__(self, rectangles: List[GraphSize], edges: List[GraphEdge], constraints: List[GraphConstraint], subgraphs: List[GraphLayoutIRSubgraph], edgeLabels: Dict[GraphEdge, GraphSize], width: double, height: double, leftBBoxMargin: double, rightBBoxMargin: double, topBBoxMargin: double, bottomBBoxMargin: double, graphName: str, graphviz_size_scaling: int) -> None: ...
    def validate(self) -> None: ...
    def doHolaConvert(self) -> GraphLayoutIRResult: ...
    def doColaConvert(self) -> GraphLayoutIRResult: ...
    def doColaSvgWrite(self, path: str) -> None: ...
    def doColaStrFormat(self) -> str: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    rectangles: List[GraphSize]
    edges: List[GraphEdge]
    constraints: List[GraphConstraint]
    subgraphs: List[GraphLayoutIRSubgraph]
    edgeLabels: Dict[GraphEdge, GraphSize]
    width: double
    height: double
    leftBBoxMargin: double
    rightBBoxMargin: double
    topBBoxMargin: double
    bottomBBoxMargin: double
    graphName: str
    graphviz_size_scaling: int

class GraphLayoutIRSubgraph:
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class GraphLayoutIREdge:
    def __init__(self, paths: List[GraphPath], labelRect: Optional[GraphRect]) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    paths: List[GraphPath]
    labelRect: Optional[GraphRect]

class GraphLayoutIRResult:
    def __init__(self, fixed: List[GraphRect], lines: Dict[GraphEdge, GraphLayoutIREdge], bbox: GraphRect, subgraphs: List[GraphLayoutIRResultSubgraph], subgraphPaths: List[List[int]]) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    fixed: List[GraphRect]
    lines: Dict[GraphEdge, GraphLayoutIREdge]
    bbox: GraphRect
    subgraphs: List[GraphLayoutIRResultSubgraph]
    subgraphPaths: List[List[int]]

class GraphLayoutIRResultSubgraph:
    def __init__(self, bbox: GraphRect, subgraphs: List[GraphLayoutIRResultSubgraph]) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    bbox: GraphRect
    subgraphs: List[GraphLayoutIRResultSubgraph]

class GraphDimension(Enum):
    XDIM = 1
    YDIM = 2
    UNSET = 3
