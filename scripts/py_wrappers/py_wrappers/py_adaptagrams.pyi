from typing import *
from enum import Enum
from datetime import datetime, date, time
class hstdextGraphPoint:
    def __init__(self, x: double, y: double) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    x: double
    y: double

class hstdextGraphPath:
    def __init__(self, points: hstdVec[hstdextGraphPoint], startPoint: Optional[hstdextGraphPoint], endPoint: Optional[hstdextGraphPoint], bezier: bool) -> None: ...
    def point(self, x: double, y: double) -> None: ...
    def point(self, p: hstdextGraphPoint) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    points: hstdVec[hstdextGraphPoint]
    startPoint: Optional[hstdextGraphPoint]
    endPoint: Optional[hstdextGraphPoint]
    bezier: bool

class hstdextGraphSize:
    def __init__(self, w: double, h: double) -> None: ...
    def height(self) -> double: ...
    def width(self) -> double: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    w: double
    h: double

class hstdextGraphRect:
    def __init__(self, left: double, top: double, width: double, height: double) -> None: ...
    def size(self) -> hstdextGraphSize: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    left: double
    top: double
    width: double
    height: double

class hstdextGraphNodeConstraint:
    def __init__(self) -> None: ...
    def getEmpty(self) -> hstdextGraphNodeConstraintEmpty: ...
    def getAlign(self) -> hstdextGraphNodeConstraintAlign: ...
    def getFixedRelative(self) -> hstdextGraphNodeConstraintFixedRelative: ...
    def getSeparate(self) -> hstdextGraphNodeConstraintSeparate: ...
    def getMultiSeparate(self) -> hstdextGraphNodeConstraintMultiSeparate: ...
    def getPageBoundary(self) -> hstdextGraphNodeConstraintPageBoundary: ...
    def getKind(self) -> hstdextGraphNodeConstraintKind: ...
    @staticmethod
    def InitEmptyStatic(self, arg: hstdextGraphNodeConstraintEmpty) -> hstdextGraphNodeConstraint: ...
    @staticmethod
    def InitAlignStatic(self, arg: hstdextGraphNodeConstraintAlign) -> hstdextGraphNodeConstraint: ...
    @staticmethod
    def InitSeparateStatic(self, arg: hstdextGraphNodeConstraintSeparate) -> hstdextGraphNodeConstraint: ...
    @staticmethod
    def InitMultiSeparateStatic(self, arg: hstdextGraphNodeConstraintMultiSeparate) -> hstdextGraphNodeConstraint: ...
    @staticmethod
    def InitFixedRelativeStatic(self, arg: hstdextGraphNodeConstraintFixedRelative) -> hstdextGraphNodeConstraint: ...
    @staticmethod
    def InitPageBoundaryStatic(self, arg: hstdextGraphNodeConstraintPageBoundary) -> hstdextGraphNodeConstraint: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class hstdextGraphNodeConstraintEmpty:
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class hstdextGraphNodeConstraintAlign:
    def __init__(self, nodes: hstdVec[hstdextGraphNodeConstraintAlignSpec], dimension: GraphDimension) -> None: ...
    def toColaString(self) -> str: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    nodes: hstdVec[hstdextGraphNodeConstraintAlignSpec]
    dimension: GraphDimension

class hstdextGraphNodeConstraintAlignSpec:
    def __init__(self, node: int, fixPos: Optional[double], offset: double) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    node: int
    fixPos: Optional[double]
    offset: double

class hstdextGraphNodeConstraintSeparate:
    def __init__(self, left: hstdextGraphNodeConstraintAlign, right: hstdextGraphNodeConstraintAlign, separationDistance: double, isExactSeparation: bool, dimension: GraphDimension) -> None: ...
    def toColaString(self) -> str: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    left: hstdextGraphNodeConstraintAlign
    right: hstdextGraphNodeConstraintAlign
    separationDistance: double
    isExactSeparation: bool
    dimension: GraphDimension

class hstdextGraphNodeConstraintMultiSeparate:
    def __init__(self, lines: hstdVec[hstdextGraphNodeConstraintAlign], alignPairs: hstdVec[stdpair[int, int]], dimension: GraphDimension, separationDistance: double, isExactSeparation: bool) -> None: ...
    def toColaString(self) -> str: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    lines: hstdVec[hstdextGraphNodeConstraintAlign]
    alignPairs: hstdVec[stdpair[int, int]]
    dimension: GraphDimension
    separationDistance: double
    isExactSeparation: bool

class hstdextGraphNodeConstraintFixedRelative:
    def __init__(self, nodes: hstdVec[int], fixedPosition: bool) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    nodes: hstdVec[int]
    fixedPosition: bool

class hstdextGraphNodeConstraintPageBoundary:
    def __init__(self, rect: hstdextGraphRect, weight: double, nodes: hstdVec[int]) -> None: ...
    def toColaString(self, allRects: stdvector[vpscRectangle]) -> str: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    rect: hstdextGraphRect
    weight: double
    nodes: hstdVec[int]

class hstdextGraphEdge:
    def __init__(self, source: int, target: int, bundle: int) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    source: int
    target: int
    bundle: int

class hstdextGraphEdgeConstraint:
    def __init__(self, sourcePort: Port, targetPort: Port, sourceOffset: Optional[double], targetOffset: Optional[double], sourceCheckpoint: Optional[double], targetCheckpoint: Optional[double]) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    sourcePort: Port
    targetPort: Port
    sourceOffset: Optional[double]
    targetOffset: Optional[double]
    sourceCheckpoint: Optional[double]
    targetCheckpoint: Optional[double]

class hstdextGraphLayoutIR:
    def __init__(self, rectangles: hstdVec[hstdextGraphSize], edges: hstdVec[hstdextGraphEdge], nodeConstraints: hstdVec[hstdextGraphNodeConstraint], subgraphs: hstdVec[hstdextGraphLayoutIRSubgraph], edgeLabels: hstdUnorderedMap[hstdextGraphEdge, hstdextGraphSize], edgeConstraints: hstdUnorderedMap[hstdextGraphEdge, hstdextGraphEdgeConstraint], width: double, height: double, leftBBoxMargin: double, rightBBoxMargin: double, topBBoxMargin: double, bottomBBoxMargin: double, graphName: hstdStr, graphviz_size_scaling: int) -> None: ...
    def validate(self) -> None: ...
    def doGraphvizConvert(self) -> hstdextGraphLayoutIRResult: ...
    def doHolaConvert(self) -> hstdextGraphLayoutIRResult: ...
    def doColaConvert(self) -> hstdextGraphLayoutIRResult: ...
    def doColaSvgWrite(self, path: str) -> None: ...
    def doColaStrFormat(self) -> str: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    rectangles: hstdVec[hstdextGraphSize]
    edges: hstdVec[hstdextGraphEdge]
    nodeConstraints: hstdVec[hstdextGraphNodeConstraint]
    subgraphs: hstdVec[hstdextGraphLayoutIRSubgraph]
    edgeLabels: hstdUnorderedMap[hstdextGraphEdge, hstdextGraphSize]
    edgeConstraints: hstdUnorderedMap[hstdextGraphEdge, hstdextGraphEdgeConstraint]
    width: double
    height: double
    leftBBoxMargin: double
    rightBBoxMargin: double
    topBBoxMargin: double
    bottomBBoxMargin: double
    graphName: hstdStr
    graphviz_size_scaling: int

class hstdextGraphLayoutIRSubgraph:
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class hstdextGraphLayoutIREdge:
    def __init__(self, paths: hstdVec[hstdextGraphPath], labelRect: Optional[hstdextGraphRect]) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    paths: hstdVec[hstdextGraphPath]
    labelRect: Optional[hstdextGraphRect]

class hstdextGraphLayoutIRResult:
    def __init__(self, fixed: hstdVec[hstdextGraphRect], lines: hstdUnorderedMap[hstdextGraphEdge, hstdextGraphLayoutIREdge], bbox: hstdextGraphRect, subgraphs: hstdVec[hstdextGraphLayoutIRResultSubgraph], subgraphPaths: hstdVec[hstdVec[int]]) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    fixed: hstdVec[hstdextGraphRect]
    lines: hstdUnorderedMap[hstdextGraphEdge, hstdextGraphLayoutIREdge]
    bbox: hstdextGraphRect
    subgraphs: hstdVec[hstdextGraphLayoutIRResultSubgraph]
    subgraphPaths: hstdVec[hstdVec[int]]

class hstdextGraphLayoutIRResultSubgraph:
    def __init__(self, bbox: hstdextGraphRect, subgraphs: hstdVec[hstdextGraphLayoutIRResultSubgraph]) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    bbox: hstdextGraphRect
    subgraphs: hstdVec[hstdextGraphLayoutIRResultSubgraph]

class hstdextGraphDimension(Enum):
    XDIM = 1
    YDIM = 2
    UNSET = 3

class hstdextGraphNodeConstraintKind(Enum):
    Empty = 1
    Align = 2
    FixedRelative = 3
    Separate = 4
    MultiSeparate = 5
    PageBoundary = 6

class hstdextGraphEdgeConstraintPort(Enum):
    Default = 1
    North = 2
    South = 3
    West = 4
    East = 5
    Center = 6
