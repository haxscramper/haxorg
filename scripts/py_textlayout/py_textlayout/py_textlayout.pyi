from typing import *

BlockId = NewType("BlockId", int)

class TextOptions:
    leftMargin: int
    rightMargin: int

class TextLayout:
    def dbg(self) -> None: ...
    def text(self, a1: str) -> BlockId: ...
    def stack(self, a1: List[BlockId]) -> BlockId: ...
    def indent(self, indent: int, block: BlockId) -> BlockId: ...
    def line(self, a1: List[BlockId]) -> BlockId: ...
    def choice(self, a1: List[BlockId]) -> BlockId: ...
    def space(self, count: int) -> BlockId: ...
    def empty(self) -> BlockId: ...
    def wrap(self, ids: List[BlockId], sep: str) -> BlockId: ...
    def toString(self, id: BlockId, options: TextOptions) -> str: ...
    def toTreeRepr(self, id: BlockId) -> str: ...
    def add_at(self, arg: BlockId, next: Union[BlockId, List[BlockId]]) -> None: ...
    def join(self, items: List[BlockId], join: BlockId, isLine: bool = True, isTrailing: bool = False) -> BlockId: ...
    def surround_non_empty(self, content: BlockId, before: BlockId, after: BlockId) -> BlockId: ...
    def isLine(self, block: BlockId) -> bool: ...
    def isStack(self, block: BlockId) -> bool: ...
    def size(self, block: BlockId) -> int: ...
