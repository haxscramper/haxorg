/* clang-format off */
from typing import *
from enum import Enum
from datetime import datetime, date, time
class Org:
    def __init__(self, loc: Optional[LineCol], documentId: Optional[int], subnodes: List[Org]) -> None: ...
    def getKind(self) -> OrgSemKind: ...
    def isGenerated(self) -> bool: ...
    def push_back(self, sub: Org) -> None: ...
    def insert(self, pos: int, node: Org) -> None: ...
    def at(self, idx: int) -> Org: ...
    def is_(self, kind: OrgSemKind) -> bool: ...
    def __getitem__(self, idx: int) -> Org: ...
    def __iter__(self, node: Org) -> auto: ...
    loc: Optional[LineCol]
    documentId: Optional[int]
    subnodes: List[Org]

class LineCol:
    def __init__(self, line: int, column: int, pos: int) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    line: int
    column: int
    pos: int

class ErrorItem(Org):
    def __init__(self, message: str, function: Optional[str], line: Optional[int]) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    message: str
    function: Optional[str]
    line: Optional[int]

class ErrorGroup(Org):
    def __init__(self, diagnostics: List[ErrorItem], function: Optional[str], line: Optional[str]) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    diagnostics: List[ErrorItem]
    function: Optional[str]
    line: Optional[str]

class CmdArgument(Org):
    def __init__(self, key: Optional[str], varname: Optional[str], value: str) -> None: ...
    def getInt(self) -> Optional[int]: ...
    def getBool(self) -> Optional[bool]: ...
    def getString(self) -> str: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    key: Optional[str]
    varname: Optional[str]
    value: str

class CmdArgumentList(Org):
    def __init__(self, args: List[CmdArgument]) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    args: List[CmdArgument]

class Stmt(Org):
    def __init__(self, attached: List[Org]) -> None: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getArguments(self, kind: Optional[str]) -> Optional[CmdArgumentList]: ...
    def getFirstArgument(self, kind: str) -> Optional[CmdArgument]: ...
    attached: List[Org]

class Inline(Org):
    def __init__(self) -> None: ...

class StmtList(Org):
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class Empty(Org):
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class Command(Stmt):
    def __init__(self, parameters: Optional[CmdArguments], attached: List[Org]) -> None: ...
    def getArguments(self, key: Optional[str]) -> Optional[CmdArgumentList]: ...
    def getFirstArgument(self, kind: str) -> Optional[CmdArgument]: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getArguments(self, kind: Optional[str]) -> Optional[CmdArgumentList]: ...
    def getFirstArgument(self, kind: str) -> Optional[CmdArgument]: ...
    parameters: Optional[CmdArguments]
    attached: List[Org]

class Block(Command):
    def __init__(self, parameters: Optional[CmdArguments], attached: List[Org]) -> None: ...
    def getArguments(self, key: Optional[str]) -> Optional[CmdArgumentList]: ...
    def getFirstArgument(self, kind: str) -> Optional[CmdArgument]: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getArguments(self, kind: Optional[str]) -> Optional[CmdArgumentList]: ...
    def getFirstArgument(self, kind: str) -> Optional[CmdArgument]: ...
    parameters: Optional[CmdArguments]
    attached: List[Org]

class Cell(Command):
    def __init__(self, isBlock: bool, parameters: Optional[CmdArguments], attached: List[Org]) -> None: ...
    def getArguments(self, key: Optional[str]) -> Optional[CmdArgumentList]: ...
    def getFirstArgument(self, kind: str) -> Optional[CmdArgument]: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getArguments(self, kind: Optional[str]) -> Optional[CmdArgumentList]: ...
    def getFirstArgument(self, kind: str) -> Optional[CmdArgument]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    isBlock: bool
    parameters: Optional[CmdArguments]
    attached: List[Org]

class Row(Command):
    def __init__(self, cells: List[Cell], isBlock: bool, parameters: Optional[CmdArguments], attached: List[Org]) -> None: ...
    def getArguments(self, key: Optional[str]) -> Optional[CmdArgumentList]: ...
    def getFirstArgument(self, kind: str) -> Optional[CmdArgument]: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getArguments(self, kind: Optional[str]) -> Optional[CmdArgumentList]: ...
    def getFirstArgument(self, kind: str) -> Optional[CmdArgument]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    cells: List[Cell]
    isBlock: bool
    parameters: Optional[CmdArguments]
    attached: List[Org]

class Table(Block):
    def __init__(self, rows: List[Row], isBlock: bool, parameters: Optional[CmdArguments], attached: List[Org]) -> None: ...
    def getArguments(self, key: Optional[str]) -> Optional[CmdArgumentList]: ...
    def getFirstArgument(self, kind: str) -> Optional[CmdArgument]: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getArguments(self, kind: Optional[str]) -> Optional[CmdArgumentList]: ...
    def getFirstArgument(self, kind: str) -> Optional[CmdArgument]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    rows: List[Row]
    isBlock: bool
    parameters: Optional[CmdArguments]
    attached: List[Org]

class HashTag(Inline):
    def __init__(self, head: str, subtags: List[HashTag]) -> None: ...
    def prefixMatch(self, prefix: List[str]) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    head: str
    subtags: List[HashTag]

class Footnote(Inline):
    def __init__(self, tag: str, definition: Optional[Org]) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    tag: str
    definition: Optional[Org]

class Completion(Inline):
    def __init__(self, done: int, full: int, isPercent: bool) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    done: int
    full: int
    isPercent: bool

class Paragraph(Stmt):
    def __init__(self, attached: List[Org]) -> None: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getArguments(self, kind: Optional[str]) -> Optional[CmdArgumentList]: ...
    def getFirstArgument(self, kind: str) -> Optional[CmdArgument]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    attached: List[Org]

class AnnotatedParagraphNone:
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class AnnotatedParagraphFootnote:
    def __init__(self, name: str) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    name: str

class AnnotatedParagraphAdmonition:
    def __init__(self, name: BigIdent) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    name: BigIdent

class AnnotatedParagraphTimestamp:
    def __init__(self, time: Time) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    time: Time

AnnotatedParagraphData = Union[AnnotatedParagraphNone, AnnotatedParagraphFootnote, AnnotatedParagraphAdmonition, AnnotatedParagraphTimestamp]
class AnnotatedParagraphAnnotationKind(Enum):
    _None = 1
    Footnote = 2
    Admonition = 3
    Timestamp = 4

class AnnotatedParagraph(Stmt):
    def __init__(self, data: AnnotatedParagraphData, attached: List[Org]) -> None: ...
    def getNone(self) -> AnnotatedParagraphNone: ...
    def getFootnote(self) -> AnnotatedParagraphFootnote: ...
    def getAdmonition(self) -> AnnotatedParagraphAdmonition: ...
    def getTimestamp(self) -> AnnotatedParagraphTimestamp: ...
    @staticmethod
    def getAnnotationKindStatic(self, __input: AnnotatedParagraphData) -> AnnotatedParagraphAnnotationKind: ...
    def getAnnotationKind(self) -> AnnotatedParagraphAnnotationKind: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getArguments(self, kind: Optional[str]) -> Optional[CmdArgumentList]: ...
    def getFirstArgument(self, kind: str) -> Optional[CmdArgument]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    data: AnnotatedParagraphData
    attached: List[Org]

class Format(Org):
    def __init__(self) -> None: ...

class Center(Format):
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class LineCommand(Command):
    def __init__(self, parameters: Optional[CmdArguments], attached: List[Org]) -> None: ...
    def getArguments(self, key: Optional[str]) -> Optional[CmdArgumentList]: ...
    def getFirstArgument(self, kind: str) -> Optional[CmdArgument]: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getArguments(self, kind: Optional[str]) -> Optional[CmdArgumentList]: ...
    def getFirstArgument(self, kind: str) -> Optional[CmdArgument]: ...
    parameters: Optional[CmdArguments]
    attached: List[Org]

class Standalone(LineCommand):
    def __init__(self, parameters: Optional[CmdArguments], attached: List[Org]) -> None: ...
    def getArguments(self, key: Optional[str]) -> Optional[CmdArgumentList]: ...
    def getFirstArgument(self, kind: str) -> Optional[CmdArgument]: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getArguments(self, kind: Optional[str]) -> Optional[CmdArgumentList]: ...
    def getFirstArgument(self, kind: str) -> Optional[CmdArgument]: ...
    parameters: Optional[CmdArguments]
    attached: List[Org]

class Attached(LineCommand):
    def __init__(self, parameters: Optional[CmdArguments], attached: List[Org]) -> None: ...
    def getArguments(self, key: Optional[str]) -> Optional[CmdArgumentList]: ...
    def getFirstArgument(self, kind: str) -> Optional[CmdArgument]: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getArguments(self, kind: Optional[str]) -> Optional[CmdArgumentList]: ...
    def getFirstArgument(self, kind: str) -> Optional[CmdArgument]: ...
    parameters: Optional[CmdArguments]
    attached: List[Org]

class Caption(Attached):
    def __init__(self, text: Paragraph, parameters: Optional[CmdArguments], attached: List[Org]) -> None: ...
    def getArguments(self, key: Optional[str]) -> Optional[CmdArgumentList]: ...
    def getFirstArgument(self, kind: str) -> Optional[CmdArgument]: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getArguments(self, kind: Optional[str]) -> Optional[CmdArgumentList]: ...
    def getFirstArgument(self, kind: str) -> Optional[CmdArgument]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    text: Paragraph
    parameters: Optional[CmdArguments]
    attached: List[Org]

class CmdName(Attached):
    def __init__(self, name: str, parameters: Optional[CmdArguments], attached: List[Org]) -> None: ...
    def getArguments(self, key: Optional[str]) -> Optional[CmdArgumentList]: ...
    def getFirstArgument(self, kind: str) -> Optional[CmdArgument]: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getArguments(self, kind: Optional[str]) -> Optional[CmdArgumentList]: ...
    def getFirstArgument(self, kind: str) -> Optional[CmdArgument]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    name: str
    parameters: Optional[CmdArguments]
    attached: List[Org]

class CmdCustomArgs(Command):
    def __init__(self, name: str, isAttached: bool, parameters: Optional[CmdArguments], attached: List[Org]) -> None: ...
    def getArguments(self, key: Optional[str]) -> Optional[CmdArgumentList]: ...
    def getFirstArgument(self, kind: str) -> Optional[CmdArgument]: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getArguments(self, kind: Optional[str]) -> Optional[CmdArgumentList]: ...
    def getFirstArgument(self, kind: str) -> Optional[CmdArgument]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    name: str
    isAttached: bool
    parameters: Optional[CmdArguments]
    attached: List[Org]

class CmdCustomRaw(Stmt):
    def __init__(self, name: str, isAttached: bool, text: str, attached: List[Org]) -> None: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getArguments(self, kind: Optional[str]) -> Optional[CmdArgumentList]: ...
    def getFirstArgument(self, kind: str) -> Optional[CmdArgument]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    name: str
    isAttached: bool
    text: str
    attached: List[Org]

class CmdCustomText(Stmt):
    def __init__(self, name: str, isAttached: bool, text: Paragraph, attached: List[Org]) -> None: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getArguments(self, kind: Optional[str]) -> Optional[CmdArgumentList]: ...
    def getFirstArgument(self, kind: str) -> Optional[CmdArgument]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    name: str
    isAttached: bool
    text: Paragraph
    attached: List[Org]

class CmdResults(Attached):
    def __init__(self, parameters: Optional[CmdArguments], attached: List[Org]) -> None: ...
    def getArguments(self, key: Optional[str]) -> Optional[CmdArgumentList]: ...
    def getFirstArgument(self, kind: str) -> Optional[CmdArgument]: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getArguments(self, kind: Optional[str]) -> Optional[CmdArgumentList]: ...
    def getFirstArgument(self, kind: str) -> Optional[CmdArgument]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    parameters: Optional[CmdArguments]
    attached: List[Org]

class CommandGroup(Stmt):
    def __init__(self, attached: List[Org]) -> None: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getArguments(self, kind: Optional[str]) -> Optional[CmdArgumentList]: ...
    def getFirstArgument(self, kind: str) -> Optional[CmdArgument]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    attached: List[Org]

class Tblfm(Command):
    def __init__(self, parameters: Optional[CmdArguments], attached: List[Org]) -> None: ...
    def getArguments(self, key: Optional[str]) -> Optional[CmdArgumentList]: ...
    def getFirstArgument(self, kind: str) -> Optional[CmdArgument]: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getArguments(self, kind: Optional[str]) -> Optional[CmdArgumentList]: ...
    def getFirstArgument(self, kind: str) -> Optional[CmdArgument]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    parameters: Optional[CmdArguments]
    attached: List[Org]

class Quote(Block):
    def __init__(self, parameters: Optional[CmdArguments], attached: List[Org]) -> None: ...
    def getArguments(self, key: Optional[str]) -> Optional[CmdArgumentList]: ...
    def getFirstArgument(self, kind: str) -> Optional[CmdArgument]: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getArguments(self, kind: Optional[str]) -> Optional[CmdArgumentList]: ...
    def getFirstArgument(self, kind: str) -> Optional[CmdArgument]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    parameters: Optional[CmdArguments]
    attached: List[Org]

class CommentBlock(Stmt):
    def __init__(self, attached: List[Org]) -> None: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getArguments(self, kind: Optional[str]) -> Optional[CmdArgumentList]: ...
    def getFirstArgument(self, kind: str) -> Optional[CmdArgument]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    attached: List[Org]

class Verse(Block):
    def __init__(self, parameters: Optional[CmdArguments], attached: List[Org]) -> None: ...
    def getArguments(self, key: Optional[str]) -> Optional[CmdArgumentList]: ...
    def getFirstArgument(self, kind: str) -> Optional[CmdArgument]: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getArguments(self, kind: Optional[str]) -> Optional[CmdArgumentList]: ...
    def getFirstArgument(self, kind: str) -> Optional[CmdArgument]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    parameters: Optional[CmdArguments]
    attached: List[Org]

class Example(Block):
    def __init__(self, parameters: Optional[CmdArguments], attached: List[Org]) -> None: ...
    def getArguments(self, key: Optional[str]) -> Optional[CmdArgumentList]: ...
    def getFirstArgument(self, kind: str) -> Optional[CmdArgument]: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getArguments(self, kind: Optional[str]) -> Optional[CmdArgumentList]: ...
    def getFirstArgument(self, kind: str) -> Optional[CmdArgument]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    parameters: Optional[CmdArguments]
    attached: List[Org]

class ColonExample(Org):
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class CmdArguments(Org):
    def __init__(self, positional: CmdArgumentList, named: Dict[str, CmdArgumentList]) -> None: ...
    def getArguments(self, key: Optional[str]) -> Optional[CmdArgumentList]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    positional: CmdArgumentList
    named: Dict[str, CmdArgumentList]

class CmdAttr(Attached):
    def __init__(self, target: str, parameters: Optional[CmdArguments], attached: List[Org]) -> None: ...
    def getArguments(self, key: Optional[str]) -> Optional[CmdArgumentList]: ...
    def getFirstArgument(self, kind: str) -> Optional[CmdArgument]: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getArguments(self, kind: Optional[str]) -> Optional[CmdArgumentList]: ...
    def getFirstArgument(self, kind: str) -> Optional[CmdArgument]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    target: str
    parameters: Optional[CmdArguments]
    attached: List[Org]

class ExportFormat(Enum):
    Inline = 1
    Line = 2
    Block = 3

class Export(Block):
    def __init__(self, format: ExportFormat, exporter: str, placement: Optional[str], content: str, parameters: Optional[CmdArguments], attached: List[Org]) -> None: ...
    def getArguments(self, key: Optional[str]) -> Optional[CmdArgumentList]: ...
    def getFirstArgument(self, kind: str) -> Optional[CmdArgument]: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getArguments(self, kind: Optional[str]) -> Optional[CmdArgumentList]: ...
    def getFirstArgument(self, kind: str) -> Optional[CmdArgument]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    format: ExportFormat
    exporter: str
    placement: Optional[str]
    content: str
    parameters: Optional[CmdArguments]
    attached: List[Org]

class AdmonitionBlock(Block):
    def __init__(self, parameters: Optional[CmdArguments], attached: List[Org]) -> None: ...
    def getArguments(self, key: Optional[str]) -> Optional[CmdArgumentList]: ...
    def getFirstArgument(self, kind: str) -> Optional[CmdArgument]: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getArguments(self, kind: Optional[str]) -> Optional[CmdArgumentList]: ...
    def getFirstArgument(self, kind: str) -> Optional[CmdArgument]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    parameters: Optional[CmdArguments]
    attached: List[Org]

class Call(Org):
    def __init__(self, name: str, parameters: CmdArguments, isCommand: bool) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    name: str
    parameters: CmdArguments
    isCommand: bool

class CodeLinePartRaw:
    def __init__(self, code: str) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    code: str

class CodeLinePartCallout:
    def __init__(self, name: str) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    name: str

class CodeLinePartTangle:
    def __init__(self, target: str) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    target: str

CodeLinePartData = Union[CodeLinePartRaw, CodeLinePartCallout, CodeLinePartTangle]
class CodeLinePartKind(Enum):
    Raw = 1
    Callout = 2
    Tangle = 3

class CodeLinePart:
    def __init__(self, data: CodeLinePartData) -> None: ...
    def getRaw(self) -> CodeLinePartRaw: ...
    def getCallout(self) -> CodeLinePartCallout: ...
    def getTangle(self) -> CodeLinePartTangle: ...
    @staticmethod
    def getKindStatic(self, __input: CodeLinePartData) -> CodeLinePartKind: ...
    def getKind(self) -> CodeLinePartKind: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    data: CodeLinePartData

class CodeLine:
    def __init__(self, parts: List[CodeLinePart]) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    parts: List[CodeLinePart]

class CodeSwitchLineStart:
    def __init__(self, start: int, extendLast: bool) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    start: int
    extendLast: bool

class CodeSwitchCalloutFormat:
    def __init__(self, format: str) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    format: str

class CodeSwitchRemoveCallout:
    def __init__(self, remove: bool) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    remove: bool

class CodeSwitchEmphasizeLine:
    def __init__(self, line: List[int]) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    line: List[int]

class CodeSwitchDedent:
    def __init__(self, value: int) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    value: int

CodeSwitchData = Union[CodeSwitchLineStart, CodeSwitchCalloutFormat, CodeSwitchRemoveCallout, CodeSwitchEmphasizeLine, CodeSwitchDedent]
class CodeSwitchKind(Enum):
    LineStart = 1
    CalloutFormat = 2
    RemoveCallout = 3
    EmphasizeLine = 4
    Dedent = 5

class CodeSwitch:
    def __init__(self, data: CodeSwitchData) -> None: ...
    def getLineStart(self) -> CodeSwitchLineStart: ...
    def getCalloutFormat(self) -> CodeSwitchCalloutFormat: ...
    def getRemoveCallout(self) -> CodeSwitchRemoveCallout: ...
    def getEmphasizeLine(self) -> CodeSwitchEmphasizeLine: ...
    def getDedent(self) -> CodeSwitchDedent: ...
    @staticmethod
    def getKindStatic(self, __input: CodeSwitchData) -> CodeSwitchKind: ...
    def getKind(self) -> CodeSwitchKind: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    data: CodeSwitchData

class CodeResults(Enum):
    Replace = 1

class CodeExports(Enum):
    _None = 1
    Both = 2
    Code = 3
    Results = 4

class CodeEvalResultNone:
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class CodeEvalResultOrgValue:
    def __init__(self, value: Org) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    value: Org

class CodeEvalResultFile:
    def __init__(self, path: str) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    path: str

class CodeEvalResultRaw:
    def __init__(self, text: str) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    text: str

CodeEvalResultData = Union[CodeEvalResultNone, CodeEvalResultOrgValue, CodeEvalResultFile, CodeEvalResultRaw]
class CodeEvalResultKind(Enum):
    _None = 1
    OrgValue = 2
    File = 3
    Raw = 4

class CodeEvalResult:
    def __init__(self, data: CodeEvalResultData) -> None: ...
    def getNone(self) -> CodeEvalResultNone: ...
    def getOrgValue(self) -> CodeEvalResultOrgValue: ...
    def getFile(self) -> CodeEvalResultFile: ...
    def getRaw(self) -> CodeEvalResultRaw: ...
    @staticmethod
    def getKindStatic(self, __input: CodeEvalResultData) -> CodeEvalResultKind: ...
    def getKind(self) -> CodeEvalResultKind: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    data: CodeEvalResultData

class Code(Block):
    def __init__(self, lang: Optional[str], switches: List[CodeSwitch], exports: CodeExports, result: Optional[CodeEvalResult], lines: List[CodeLine], cache: bool, eval: bool, noweb: bool, hlines: bool, tangle: bool, parameters: Optional[CmdArguments], attached: List[Org]) -> None: ...
    def getArguments(self, key: Optional[str]) -> Optional[CmdArgumentList]: ...
    def getFirstArgument(self, kind: str) -> Optional[CmdArgument]: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getArguments(self, kind: Optional[str]) -> Optional[CmdArgumentList]: ...
    def getFirstArgument(self, kind: str) -> Optional[CmdArgument]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    lang: Optional[str]
    switches: List[CodeSwitch]
    exports: CodeExports
    result: Optional[CodeEvalResult]
    lines: List[CodeLine]
    cache: bool
    eval: bool
    noweb: bool
    hlines: bool
    tangle: bool
    parameters: Optional[CmdArguments]
    attached: List[Org]

class TimeRepeatMode(Enum):
    _None = 1
    Exact = 2
    FirstMatch = 3
    SameDay = 4

class TimeRepeatPeriod(Enum):
    Year = 1
    Month = 2
    Week = 3
    Day = 4
    Hour = 5
    Minute = 6

class TimeRepeat:
    def __init__(self, mode: TimeRepeatMode, period: TimeRepeatPeriod, count: int) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    mode: TimeRepeatMode
    period: TimeRepeatPeriod
    count: int

class TimeStatic:
    def __init__(self, repeat: Optional[TimeRepeat], time: UserTime) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    repeat: Optional[TimeRepeat]
    time: UserTime

class TimeDynamic:
    def __init__(self, expr: str) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    expr: str

TimeTimeVariant = Union[TimeStatic, TimeDynamic]
class TimeTimeKind(Enum):
    Static = 1
    Dynamic = 2

class Time(Org):
    def __init__(self, isActive: bool, time: TimeTimeVariant) -> None: ...
    def getStatic(self) -> TimeStatic: ...
    def getDynamic(self) -> TimeDynamic: ...
    @staticmethod
    def getTimeKindStatic(self, __input: TimeTimeVariant) -> TimeTimeKind: ...
    def getTimeKind(self) -> TimeTimeKind: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    isActive: bool
    time: TimeTimeVariant

class TimeRange(Org):
    def __init__(self, from_: Time, to: Time) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    from_: Time
    to: Time

class Macro(Org):
    def __init__(self, name: str, parameters: CmdArguments) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    name: str
    parameters: CmdArguments

class SymbolParam:
    def __init__(self, key: Optional[str], value: str) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    key: Optional[str]
    value: str

class Symbol(Org):
    def __init__(self, name: str, parameters: List[SymbolParam], positional: List[Org]) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    name: str
    parameters: List[SymbolParam]
    positional: List[Org]

class SubtreeLogDescribedLog:
    def __init__(self, desc: Optional[StmtList]) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    desc: Optional[StmtList]

class SubtreeLogPriorityAction(Enum):
    Added = 1
    Removed = 2
    Changed = 3

class SubtreeLogPriority(SubtreeLogDescribedLog):
    def __init__(self, oldPriority: Optional[str], newPriority: Optional[str], on: Time, action: SubtreeLogPriorityAction) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    oldPriority: Optional[str]
    newPriority: Optional[str]
    on: Time
    action: SubtreeLogPriorityAction

class SubtreeLogNote(SubtreeLogDescribedLog):
    def __init__(self, on: Time) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    on: Time

class SubtreeLogRefile(SubtreeLogDescribedLog):
    def __init__(self, on: Time, from_: Link) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    on: Time
    from_: Link

class SubtreeLogClock(SubtreeLogDescribedLog):
    def __init__(self, from_: Time, to: Optional[Time]) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    from_: Time
    to: Optional[Time]

class SubtreeLogState(SubtreeLogDescribedLog):
    def __init__(self, from_: str, to: str, on: Time) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    from_: str
    to: str
    on: Time

class SubtreeLogTag(SubtreeLogDescribedLog):
    def __init__(self, on: Time, tag: HashTag, added: bool) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    on: Time
    tag: HashTag
    added: bool

class SubtreeLogUnknown(SubtreeLogDescribedLog):
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

SubtreeLogLogEntry = Union[SubtreeLogPriority, SubtreeLogNote, SubtreeLogRefile, SubtreeLogClock, SubtreeLogState, SubtreeLogTag, SubtreeLogUnknown]
class SubtreeLogKind(Enum):
    Priority = 1
    Note = 2
    Refile = 3
    Clock = 4
    State = 5
    Tag = 6
    Unknown = 7

class SubtreeLog(Org):
    def __init__(self, log: SubtreeLogLogEntry) -> None: ...
    def setDescription(self, desc: StmtList) -> None: ...
    def getPriority(self) -> SubtreeLogPriority: ...
    def getNote(self) -> SubtreeLogNote: ...
    def getRefile(self) -> SubtreeLogRefile: ...
    def getClock(self) -> SubtreeLogClock: ...
    def getState(self) -> SubtreeLogState: ...
    def getTag(self) -> SubtreeLogTag: ...
    def getUnknown(self) -> SubtreeLogUnknown: ...
    @staticmethod
    def getLogKindStatic(self, __input: SubtreeLogLogEntry) -> SubtreeLogKind: ...
    def getLogKind(self) -> SubtreeLogKind: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    log: SubtreeLogLogEntry

class SubtreePeriodKind(Enum):
    Clocked = 1
    Closed = 2
    Scheduled = 3
    Titled = 4
    Deadline = 5
    Created = 6
    Repeated = 7

class SubtreePeriod:
    def __init__(self, kind: SubtreePeriodKind, from_: Time, to: Optional[Time]) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    kind: SubtreePeriodKind
    from_: Time
    to: Optional[Time]

class SubtreePropertySetMode(Enum):
    Override = 1
    Add = 2
    Subtract = 3

class SubtreePropertyInheritanceMode(Enum):
    ThisAndSub = 1
    OnlyThis = 2
    OnlySub = 3

class SubtreePropertyNonblocking:
    def __init__(self, isBlocking: bool) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    isBlocking: bool

class SubtreePropertyTrigger:
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class SubtreePropertyOrigin:
    def __init__(self, text: Paragraph) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    text: Paragraph

class SubtreePropertyExportLatexClass:
    def __init__(self, latexClass: str) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    latexClass: str

class SubtreePropertyExportLatexClassOptions:
    def __init__(self, options: List[str]) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    options: List[str]

class SubtreePropertyExportLatexHeader:
    def __init__(self, header: str) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    header: str

class SubtreePropertyExportLatexCompiler:
    def __init__(self, compiler: str) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    compiler: str

class SubtreePropertyOrdered:
    def __init__(self, isOrdered: bool) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    isOrdered: bool

class SubtreePropertyEffort:
    def __init__(self, hours: int, minutes: int) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    hours: int
    minutes: int

class SubtreePropertyVisibilityLevel(Enum):
    Folded = 1
    Children = 2
    Content = 3
    All = 4

class SubtreePropertyVisibility:
    def __init__(self, level: SubtreePropertyVisibilityLevel) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    level: SubtreePropertyVisibilityLevel

class SubtreePropertyExportOptions:
    def __init__(self, backend: str, values: Dict[str, str]) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    backend: str
    values: Dict[str, str]

class SubtreePropertyBlocker:
    def __init__(self, blockers: List[str]) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    blockers: List[str]

class SubtreePropertyUnnumbered:
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class SubtreePropertyCreated:
    def __init__(self, time: Time) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    time: Time

class SubtreePropertyUnknown:
    def __init__(self, value: Org, name: str) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    value: Org
    name: str

SubtreePropertyData = Union[SubtreePropertyNonblocking, SubtreePropertyTrigger, SubtreePropertyOrigin, SubtreePropertyExportLatexClass, SubtreePropertyExportLatexClassOptions, SubtreePropertyExportLatexHeader, SubtreePropertyExportLatexCompiler, SubtreePropertyOrdered, SubtreePropertyEffort, SubtreePropertyVisibility, SubtreePropertyExportOptions, SubtreePropertyBlocker, SubtreePropertyUnnumbered, SubtreePropertyCreated, SubtreePropertyUnknown]
class SubtreePropertyKind(Enum):
    Nonblocking = 1
    Trigger = 2
    Origin = 3
    ExportLatexClass = 4
    ExportLatexClassOptions = 5
    ExportLatexHeader = 6
    ExportLatexCompiler = 7
    Ordered = 8
    Effort = 9
    Visibility = 10
    ExportOptions = 11
    Blocker = 12
    Unnumbered = 13
    Created = 14
    Unknown = 15

class SubtreeProperty:
    def __init__(self, mainSetRule: SubtreePropertySetMode, subSetRule: SubtreePropertySetMode, inheritanceMode: SubtreePropertyInheritanceMode, data: SubtreePropertyData) -> None: ...
    def isMatching(self, kind: str, subKind: Optional[str]) -> bool: ...
    def getName(self) -> str: ...
    def getSubKind(self) -> Optional[str]: ...
    def getNonblocking(self) -> SubtreePropertyNonblocking: ...
    def getTrigger(self) -> SubtreePropertyTrigger: ...
    def getOrigin(self) -> SubtreePropertyOrigin: ...
    def getExportLatexClass(self) -> SubtreePropertyExportLatexClass: ...
    def getExportLatexClassOptions(self) -> SubtreePropertyExportLatexClassOptions: ...
    def getExportLatexHeader(self) -> SubtreePropertyExportLatexHeader: ...
    def getExportLatexCompiler(self) -> SubtreePropertyExportLatexCompiler: ...
    def getOrdered(self) -> SubtreePropertyOrdered: ...
    def getEffort(self) -> SubtreePropertyEffort: ...
    def getVisibility(self) -> SubtreePropertyVisibility: ...
    def getExportOptions(self) -> SubtreePropertyExportOptions: ...
    def getBlocker(self) -> SubtreePropertyBlocker: ...
    def getUnnumbered(self) -> SubtreePropertyUnnumbered: ...
    def getCreated(self) -> SubtreePropertyCreated: ...
    def getUnknown(self) -> SubtreePropertyUnknown: ...
    @staticmethod
    def getKindStatic(self, __input: SubtreePropertyData) -> SubtreePropertyKind: ...
    def getKind(self) -> SubtreePropertyKind: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    mainSetRule: SubtreePropertySetMode
    subSetRule: SubtreePropertySetMode
    inheritanceMode: SubtreePropertyInheritanceMode
    data: SubtreePropertyData

class Subtree(Org):
    def __init__(self, level: int, treeId: Optional[str], todo: Optional[str], completion: Optional[Completion], description: Optional[Paragraph], tags: List[HashTag], title: Paragraph, logbook: List[SubtreeLog], properties: List[SubtreeProperty], closed: Optional[Time], deadline: Optional[Time], scheduled: Optional[Time], isComment: bool, isArchived: bool, priority: Optional[str]) -> None: ...
    def getTimePeriods(self, kinds: IntSet[SubtreePeriodKind]) -> List[SubtreePeriod]: ...
    def getProperties(self, kind: str, subkind: Optional[str]) -> List[SubtreeProperty]: ...
    def getProperty(self, kind: str, subkind: Optional[str]) -> Optional[SubtreeProperty]: ...
    def removeProperty(self, kind: str, subkind: Optional[str]) -> None: ...
    def setProperty(self, value: SubtreeProperty) -> None: ...
    def setPropertyStrValue(self, value: str, kind: str, subkind: Optional[str]) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    level: int
    treeId: Optional[str]
    todo: Optional[str]
    completion: Optional[Completion]
    description: Optional[Paragraph]
    tags: List[HashTag]
    title: Paragraph
    logbook: List[SubtreeLog]
    properties: List[SubtreeProperty]
    closed: Optional[Time]
    deadline: Optional[Time]
    scheduled: Optional[Time]
    isComment: bool
    isArchived: bool
    priority: Optional[str]

class LatexBody(Org):
    def __init__(self) -> None: ...

class InlineMath(LatexBody):
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class Leaf(Org):
    def __init__(self, text: str) -> None: ...
    text: str

class Escaped(Leaf):
    def __init__(self, text: str) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    text: str

class Newline(Leaf):
    def __init__(self, text: str) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    text: str

class Space(Leaf):
    def __init__(self, text: str) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    text: str

class Word(Leaf):
    def __init__(self, text: str) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    text: str

class AtMention(Leaf):
    def __init__(self, text: str) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    text: str

class RawText(Leaf):
    def __init__(self, text: str) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    text: str

class Punctuation(Leaf):
    def __init__(self, text: str) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    text: str

class Placeholder(Leaf):
    def __init__(self, text: str) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    text: str

class BigIdent(Leaf):
    def __init__(self, text: str) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    text: str

class RadioTarget(Leaf):
    def __init__(self, text: str) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    text: str

class TextTarget(Leaf):
    def __init__(self, text: str) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    text: str

class Markup(Org):
    def __init__(self) -> None: ...

class Bold(Markup):
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class Underline(Markup):
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class Monospace(Markup):
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class MarkQuote(Markup):
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class Verbatim(Markup):
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class Italic(Markup):
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class Strike(Markup):
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class Par(Markup):
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class List(Stmt):
    def __init__(self, attached: List[Org]) -> None: ...
    def isDescriptionList(self) -> bool: ...
    def isNumberedList(self) -> bool: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getArguments(self, kind: Optional[str]) -> Optional[CmdArgumentList]: ...
    def getFirstArgument(self, kind: str) -> Optional[CmdArgument]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    attached: List[Org]

class ListItemCheckbox(Enum):
    _None = 1
    Done = 2
    Empty = 3
    Partial = 4

class ListItem(Org):
    def __init__(self, checkbox: ListItemCheckbox, header: Optional[Paragraph], bullet: Optional[str]) -> None: ...
    def isDescriptionItem(self) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    checkbox: ListItemCheckbox
    header: Optional[Paragraph]
    bullet: Optional[str]

class LinkRaw:
    def __init__(self, text: str) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    text: str

class LinkId:
    def __init__(self, text: str) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    text: str

class LinkPerson:
    def __init__(self, name: str) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    name: str

class LinkUserProtocol:
    def __init__(self, protocol: str, target: str) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    protocol: str
    target: str

class LinkInternal:
    def __init__(self, target: str) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    target: str

class LinkFootnote:
    def __init__(self, target: str) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    target: str

class LinkFile:
    def __init__(self, file: str) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    file: str

class LinkAttachment:
    def __init__(self, file: str) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    file: str

LinkData = Union[LinkRaw, LinkId, LinkPerson, LinkUserProtocol, LinkInternal, LinkFootnote, LinkFile, LinkAttachment]
class LinkKind(Enum):
    Raw = 1
    Id = 2
    Person = 3
    UserProtocol = 4
    Internal = 5
    Footnote = 6
    File = 7
    Attachment = 8

class Link(Stmt):
    def __init__(self, description: Optional[Paragraph], data: LinkData, attached: List[Org]) -> None: ...
    def getRaw(self) -> LinkRaw: ...
    def getId(self) -> LinkId: ...
    def getPerson(self) -> LinkPerson: ...
    def getUserProtocol(self) -> LinkUserProtocol: ...
    def getInternal(self) -> LinkInternal: ...
    def getFootnote(self) -> LinkFootnote: ...
    def getFile(self) -> LinkFile: ...
    def getAttachment(self) -> LinkAttachment: ...
    @staticmethod
    def getLinkKindStatic(self, __input: LinkData) -> LinkKind: ...
    def getLinkKind(self) -> LinkKind: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getArguments(self, kind: Optional[str]) -> Optional[CmdArgumentList]: ...
    def getFirstArgument(self, kind: str) -> Optional[CmdArgument]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    description: Optional[Paragraph]
    data: LinkData
    attached: List[Org]

class DocumentOptionsExportConfigTaskExport:
    def __init__(self, taskWhitelist: List[str]) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    taskWhitelist: List[str]

class DocumentOptionsExportConfigTagExport(Enum):
    _None = 1
    All = 2
    NotInToc = 3

class DocumentOptionsExportConfigTaskFiltering(Enum):
    Whitelist = 1
    Done = 2
    _None = 3
    All = 4

class DocumentOptionsExportConfigBrokenLinks(Enum):
    Raise = 1
    Ignore = 2
    Mark = 3

class DocumentOptionsExportConfigDoExport:
    def __init__(self, exportToc: bool) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    exportToc: bool

class DocumentOptionsExportConfigExportFixed:
    def __init__(self, exportLevels: int) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    exportLevels: int

DocumentOptionsExportConfigTocExport = Union[DocumentOptionsExportConfigDoExport, DocumentOptionsExportConfigExportFixed]
class DocumentOptionsExportConfigTocExportKind(Enum):
    DoExport = 1
    ExportFixed = 2

class DocumentOptionsExportConfig:
    def __init__(self, inlinetasks: Optional[bool], footnotes: Optional[bool], clock: Optional[bool], author: Optional[bool], emphasis: Optional[bool], specialStrings: Optional[bool], propertyDrawers: Optional[bool], statisticsCookies: Optional[bool], todoText: Optional[bool], brokenLinks: DocumentOptionsExportConfigBrokenLinks, tocExport: DocumentOptionsExportConfigTocExport, tagExport: DocumentOptionsExportConfigTagExport, data: DocumentOptionsExportConfigTocExport) -> None: ...
    def getDoExport(self) -> DocumentOptionsExportConfigDoExport: ...
    def getExportFixed(self) -> DocumentOptionsExportConfigExportFixed: ...
    @staticmethod
    def getTocExportKindStatic(self, __input: DocumentOptionsExportConfigTocExport) -> DocumentOptionsExportConfigTocExportKind: ...
    def getTocExportKind(self) -> DocumentOptionsExportConfigTocExportKind: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    inlinetasks: Optional[bool]
    footnotes: Optional[bool]
    clock: Optional[bool]
    author: Optional[bool]
    emphasis: Optional[bool]
    specialStrings: Optional[bool]
    propertyDrawers: Optional[bool]
    statisticsCookies: Optional[bool]
    todoText: Optional[bool]
    brokenLinks: DocumentOptionsExportConfigBrokenLinks
    tocExport: DocumentOptionsExportConfigTocExport
    tagExport: DocumentOptionsExportConfigTagExport
    data: DocumentOptionsExportConfigTocExport

class DocumentOptionsVisibility(Enum):
    Overview = 1
    Content = 2
    ShowAll = 3
    Show2Levels = 4
    Show3Levels = 5
    Show4Levels = 6
    Show5Levels = 7
    ShowEverything = 8

class DocumentOptions(Org):
    def __init__(self, initialVisibility: DocumentOptionsVisibility, properties: List[SubtreeProperty], exportConfig: DocumentOptionsExportConfig, fixedWidthSections: Optional[bool], startupIndented: Optional[bool], category: Optional[str], setupfile: Optional[str], maxSubtreeLevelExport: Optional[int]) -> None: ...
    def getProperties(self, kind: str, subKind: Optional[str]) -> List[SubtreeProperty]: ...
    def getProperty(self, kind: str, subKind: Optional[str]) -> Optional[SubtreeProperty]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    initialVisibility: DocumentOptionsVisibility
    properties: List[SubtreeProperty]
    exportConfig: DocumentOptionsExportConfig
    fixedWidthSections: Optional[bool]
    startupIndented: Optional[bool]
    category: Optional[str]
    setupfile: Optional[str]
    maxSubtreeLevelExport: Optional[int]

class Document(Org):
    def __init__(self, title: Optional[Paragraph], author: Optional[Paragraph], creator: Optional[Paragraph], filetags: List[HashTag], email: Optional[RawText], language: List[str], options: DocumentOptions, exportFileName: Optional[str]) -> None: ...
    def getProperties(self, kind: str, subKind: Optional[str]) -> List[SubtreeProperty]: ...
    def getProperty(self, kind: str, subKind: Optional[str]) -> Optional[SubtreeProperty]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    title: Optional[Paragraph]
    author: Optional[Paragraph]
    creator: Optional[Paragraph]
    filetags: List[HashTag]
    email: Optional[RawText]
    language: List[str]
    options: DocumentOptions
    exportFileName: Optional[str]

class ParseError(Org):
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class FileTarget(Org):
    def __init__(self, path: str, line: Optional[int], searchTarget: Optional[str], restrictToHeadlines: bool, targetId: Optional[str], regexp: Optional[str]) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    path: str
    line: Optional[int]
    searchTarget: Optional[str]
    restrictToHeadlines: bool
    targetId: Optional[str]
    regexp: Optional[str]

class TextSeparator(Org):
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class IncludeExample:
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class IncludeExport:
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class IncludeSrc:
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class IncludeOrgDocument:
    def __init__(self, minLevel: Optional[int]) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    minLevel: Optional[int]

IncludeData = Union[IncludeExample, IncludeExport, IncludeSrc, IncludeOrgDocument]
class IncludeKind(Enum):
    Example = 1
    Export = 2
    Src = 3
    OrgDocument = 4

class Include(Org):
    def __init__(self, path: str, firstLine: Optional[int], lastLine: Optional[int], data: IncludeData) -> None: ...
    def getExample(self) -> IncludeExample: ...
    def getExport(self) -> IncludeExport: ...
    def getSrc(self) -> IncludeSrc: ...
    def getOrgDocument(self) -> IncludeOrgDocument: ...
    @staticmethod
    def getIncludeKindStatic(self, __input: IncludeData) -> IncludeKind: ...
    def getIncludeKind(self) -> IncludeKind: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    path: str
    firstLine: Optional[int]
    lastLine: Optional[int]
    data: IncludeData

class DocumentGroup(Org):
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class OrgSpecName(Enum):
    Unnamed = 1
    Result = 2
    Year = 3
    Day = 4
    Clock = 5
    Repeater = 6
    Zone = 7
    Link = 8
    Tags = 9
    Tag = 10
    State = 11
    Protocol = 12
    Desc = 13
    Times = 14
    Drawer = 15
    Args = 16
    Name = 17
    Definition = 18
    Body = 19
    HeaderArgs = 20
    File = 21
    Kind = 22
    Lang = 23
    Prefix = 24
    Text = 25
    Todo = 26
    Urgency = 27
    Title = 28
    Completion = 29
    Head = 30
    Subnodes = 31
    Properties = 32
    Logbook = 33
    Description = 34
    Logs = 35
    Newstate = 36
    Oldstate = 37
    Time = 38
    From = 39
    EndArgs = 40
    Flags = 41
    Value = 42
    Assoc = 43
    Main = 44
    Hash = 45
    Bullet = 46
    Counter = 47
    Checkbox = 48
    Header = 49
    To = 50
    Diff = 51
    Property = 52
    Subname = 53
    Values = 54
    Cells = 55
    Rows = 56
    Lines = 57
    Chunks = 58
    InheritanceMode = 59
    MainSetRule = 60
    SubSetRule = 61

class OrgNodeKind(Enum):
    _None = 1
    Document = 2
    UserNode = 3
    Empty = 4
    Error = 5
    ErrorTerminator = 6
    ErrorToken = 7
    InlineStmtList = 8
    StmtList = 9
    AssocStmtList = 10
    Subtree = 11
    SubtreeTimes = 12
    SubtreeStars = 13
    Completion = 14
    Checkbox = 15
    List = 16
    Bullet = 17
    ListItem = 18
    ListTag = 19
    Counter = 20
    Comment = 21
    RawText = 22
    Unparsed = 23
    Command = 24
    CommandArguments = 25
    CommandTitle = 26
    CommandAuthor = 27
    CommandCreator = 28
    CommandInclude = 29
    CommandLanguage = 30
    CommandAttr = 31
    CommandStartup = 32
    CommandName = 33
    CmdCustomTextCommand = 34
    CmdCustomArgsCommand = 35
    CmdCustomRawCommand = 36
    CommandResults = 37
    CommandHeader = 38
    CommandOptions = 39
    CommandTblfm = 40
    CommandBackendOptions = 41
    AttrImg = 42
    CommandCaption = 43
    File = 44
    BlockExport = 45
    InlineExport = 46
    MultilineCommand = 47
    Result = 48
    Ident = 49
    BareIdent = 50
    AdmonitionTag = 51
    BigIdent = 52
    VerbatimMultilineBlock = 53
    CodeLine = 54
    CodeText = 55
    CodeTangle = 56
    CodeCallout = 57
    QuoteBlock = 58
    CommentBlock = 59
    CenterBlock = 60
    VerseBlock = 61
    Example = 62
    ColonExample = 63
    SrcCode = 64
    SrcInlineCode = 65
    InlineCallCode = 66
    CmdCallCode = 67
    PassCode = 68
    CmdArguments = 69
    CmdFlag = 70
    CmdKey = 71
    CmdValue = 72
    CmdNamedValue = 73
    UrgencyStatus = 74
    TextSeparator = 75
    Paragraph = 76
    AnnotatedParagraph = 77
    Bold = 78
    Italic = 79
    Verbatim = 80
    Backtick = 81
    Underline = 82
    Strike = 83
    Quote = 84
    Angle = 85
    Monospace = 86
    Par = 87
    InlineMath = 88
    DisplayMath = 89
    Space = 90
    Punctuation = 91
    Colon = 92
    Word = 93
    Escaped = 94
    Newline = 95
    RawLink = 96
    Link = 97
    Macro = 98
    BackendRaw = 99
    Symbol = 100
    TimeAssoc = 101
    StaticActiveTime = 102
    StaticInactiveTime = 103
    DynamicActiveTime = 104
    DynamicInactiveTime = 105
    TimeRange = 106
    SimpleTime = 107
    Details = 108
    Summary = 109
    Table = 110
    TableRow = 111
    TableCell = 112
    InlineFootnote = 113
    Footnote = 114
    Horizontal = 115
    Filetags = 116
    OrgTag = 117
    HashTag = 118
    MetaSymbol = 119
    AtMention = 120
    BracTag = 121
    Drawer = 122
    LatexClass = 123
    LatexHeader = 124
    LatexCompiler = 125
    LatexClassOptions = 126
    HtmlHead = 127
    Columns = 128
    CmdPropertyArgs = 129
    CmdPropertyText = 130
    CmdPropertyRaw = 131
    PropertyList = 132
    Property = 133
    Placeholder = 134
    SubtreeDescription = 135
    SubtreeUrgency = 136
    Logbook = 137
    LogbookStateChange = 138
    RadioTarget = 139
    Target = 140

class OrgSemKind(Enum):
    ErrorItem = 1
    ErrorGroup = 2
    CmdArgument = 3
    CmdArgumentList = 4
    StmtList = 5
    Empty = 6
    Cell = 7
    Row = 8
    Table = 9
    HashTag = 10
    Footnote = 11
    Completion = 12
    Paragraph = 13
    AnnotatedParagraph = 14
    Center = 15
    Caption = 16
    CmdName = 17
    CmdCustomArgs = 18
    CmdCustomRaw = 19
    CmdCustomText = 20
    CmdResults = 21
    CommandGroup = 22
    Tblfm = 23
    Quote = 24
    CommentBlock = 25
    Verse = 26
    Example = 27
    ColonExample = 28
    CmdArguments = 29
    CmdAttr = 30
    Export = 31
    AdmonitionBlock = 32
    Call = 33
    Code = 34
    Time = 35
    TimeRange = 36
    Macro = 37
    Symbol = 38
    SubtreeLog = 39
    Subtree = 40
    InlineMath = 41
    Escaped = 42
    Newline = 43
    Space = 44
    Word = 45
    AtMention = 46
    RawText = 47
    Punctuation = 48
    Placeholder = 49
    BigIdent = 50
    RadioTarget = 51
    TextTarget = 52
    Bold = 53
    Underline = 54
    Monospace = 55
    MarkQuote = 56
    Verbatim = 57
    Italic = 58
    Strike = 59
    Par = 60
    List = 61
    ListItem = 62
    Link = 63
    DocumentOptions = 64
    Document = 65
    ParseError = 66
    FileTarget = 67
    TextSeparator = 68
    Include = 69
    DocumentGroup = 70

class UserTimeBreakdown:
    def __init__(self, year: Optional[int], month: Optional[int], day: Optional[int], hour: Optional[int], minute: Optional[int], second: Optional[int], zone: Optional[str]) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    year: Optional[int]
    month: Optional[int]
    day: Optional[int]
    hour: Optional[int]
    minute: Optional[int]
    second: Optional[int]
    zone: Optional[str]

class UserTime:
    def __init__(self) -> None: ...
    def getBreakdown(self) -> UserTimeBreakdown: ...
    def format(self) -> str: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class OrgParseParameters:
    def __init__(self, baseTokenTracePath: Optional[str], tokenTracePath: Optional[str], parseTracePath: Optional[str], semTracePath: Optional[str]) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    baseTokenTracePath: Optional[str]
    tokenTracePath: Optional[str]
    parseTracePath: Optional[str]
    semTracePath: Optional[str]

class OrgYamlExportOpts:
    def __init__(self, skipNullFields: bool, skipFalseFields: bool, skipZeroFields: bool, skipLocation: bool, skipId: bool) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    skipNullFields: bool
    skipFalseFields: bool
    skipZeroFields: bool
    skipLocation: bool
    skipId: bool

class OrgTreeExportOpts:
    def __init__(self, withLineCol: bool, withOriginalId: bool, withSubnodeIdx: bool, skipEmptyFields: bool, startLevel: int, withColor: bool, maxDepth: bool) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    withLineCol: bool
    withOriginalId: bool
    withSubnodeIdx: bool
    skipEmptyFields: bool
    startLevel: int
    withColor: bool
    maxDepth: bool

class SubnodeVisitorCtxPart:
    def __init__(self, node: Optional[Org], index: Optional[int], field: Optional[str], kind: Kind) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    node: Optional[Org]
    index: Optional[int]
    field: Optional[str]
    kind: Kind

class SubnodeVisitorOpts:
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class SubnodeVisitorResult:
    def __init__(self, visitNextFields: bool, visitNextSubnodes: bool, visitNextBases: bool) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    visitNextFields: bool
    visitNextSubnodes: bool
    visitNextBases: bool

class OrgDocumentContext:
    def __init__(self) -> None: ...
    def getSubtreeById(self, id: str) -> List[Subtree]: ...
    def getLinkTarget(self, link: Link) -> List[Org]: ...
    def getRadioTarget(self, name: str) -> List[Org]: ...
    def addNodes(self, node: Org) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class OrgSelectorLink:
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class OrgSelectorResult:
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class OrgSelectorCondition:
    def __init__(self, isTarget: bool, debug: Optional[str], link: Optional[OrgSelectorLink]) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    isTarget: bool
    debug: Optional[str]
    link: Optional[OrgSelectorLink]

class OrgDocumentSelector:
    def __init__(self, path: List[OrgSelectorCondition], debug: bool) -> None: ...
    def getMatches(self, node: Org) -> List[Org]: ...
    def linkDirectSubnode(self) -> OrgSelectorLink: ...
    def linkIndirectSubnode(self) -> OrgSelectorLink: ...
    def linkField(self, name: str) -> OrgSelectorLink: ...
    def searchSubtreePlaintextTitle(self, title: str, isTarget: bool, link: Optional[OrgSelectorLink]) -> None: ...
    def searchSubtreeId(self, id: str, isTarget: bool, maxLevel: Optional[int], link: Optional[OrgSelectorLink]) -> None: ...
    def searchAnyKind(self, kinds: IntSet[OrgSemKind], isTarget: bool, link: Optional[OrgSelectorLink]) -> None: ...
    def searchPredicate(self, predicate: OrgSelectorConditionPredicate, isTarget: bool, link: Optional[OrgSelectorLink]) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    path: List[OrgSelectorCondition]
    debug: bool

class SequenceSegment:
    def __init__(self, kind: int, first: int, last: int) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    kind: int
    first: int
    last: int

class SequenceSegmentGroup:
    def __init__(self, kind: int, segments: List[SequenceSegment]) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    kind: int
    segments: List[SequenceSegment]

class SequenceAnnotationTag:
    def __init__(self, groupKind: int, segmentKinds: List[int]) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    groupKind: int
    segmentKinds: List[int]

class SequenceAnnotation:
    def __init__(self, first: int, last: int, annotations: List[SequenceAnnotationTag]) -> None: ...
    def isAnnotatedWith(self, groupKind: int, segmentKind: int) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    first: int
    last: int
    annotations: List[SequenceAnnotationTag]

class ExporterPython:
    def __init__(self) -> None: ...
    def enablePyStreamTrace(self, stream: object) -> None: ...
    def enableBufferTrace(self) -> None: ...
    def getTraceBuffer(self) -> str: ...
    def enableFileTrace(self, path: str, colored: bool) -> None: ...
    def setVisitAnyIdAround(self, cb: function) -> None: ...
    def setVisitAnyIdIn(self, cb: function) -> None: ...
    def setVisitAnyField(self, cb: function) -> None: ...
    def setEvalTopCb(self, cb: function) -> None: ...
    def setVisitIdAround(self, kind: OrgSemKind, cb: function) -> None: ...
    def setEvalIdAround(self, kind: OrgSemKind, cb: function) -> None: ...
    def setVisitIdInCb(self, kind: OrgSemKind, cb: function) -> None: ...
    def setEvalIdIn(self, kind: OrgSemKind, cb: function) -> None: ...
    def setVisitLeafField(self, kind: LeafFieldType, cb: function) -> None: ...
    def setEvalLeafField(self, kind: LeafFieldType, cb: function) -> None: ...
    def setVisitOrgField(self, kind: OrgSemKind, cb: function) -> None: ...
    def setEvalOrgField(self, kind: OrgSemKind, cb: function) -> None: ...
    def setSelf(self, val: object) -> None: ...
    def setNewOrgRes(self, kind: OrgSemKind, cb: function) -> None: ...
    def setNewAnyOrgRes(self, cb: function) -> None: ...
    def setNewLeafRes(self, kind: LeafFieldType, cb: function) -> None: ...
    def setNewAnyLeafRes(self, cb: function) -> None: ...
    def setPushVisitAnyId(self, cb: function) -> None: ...
    def setPopVisitAnyId(self, cb: function) -> None: ...
    def setPushVisitId(self, kind: OrgSemKind, cb: function) -> None: ...
    def setPopVisitIdCb(self, kind: OrgSemKind, cb: function) -> None: ...
    def setVisitAnyHookCb(self, cb: function) -> None: ...
    def setVisitIdHook(self, kind: OrgSemKind, cb: function) -> None: ...
    def evalTop(self, org: Org) -> ExporterPythonRes: ...
    def eval(self, org: Org) -> ExporterPythonRes: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class SubnodeVisitorCtxPartKind(Enum):
    Field = 1
    Index = 2
    Key = 3

class OrgSelectorLinkKind(Enum):
    DirectSubnode = 1
    IndirectSubnode = 2
    FieldName = 3

class LeafFieldType(Enum):
    Int = 1
    UserTimeKind = 2
    QDate = 3
    Bool = 4
    FixedIdVec = 5
    TopIdVec = 6
    QDateTime = 7
    Str = 8
    Any = 9

def newSemTimeStatic(breakdown: UserTimeBreakdown, isActive: bool) -> Time: ...

def parseFile(file: str, opts: OrgParseParameters) -> Document: ...

def parseString(text: str) -> Document: ...

def parseStringOpts(text: str, opts: OrgParseParameters) -> Document: ...

def formatToString(arg: Org) -> str: ...

def exportToYamlString(node: Org, opts: OrgYamlExportOpts) -> str: ...

def exportToYamlFile(node: Org, path: str, opts: OrgYamlExportOpts) -> None: ...

def exportToJsonString(node: Org) -> str: ...

def exportToJsonFile(node: Org, path: str) -> None: ...

def readProtobufFile(file: str) -> Document: ...

def exportToProtobufFile(doc: Document, file: str) -> None: ...

def exportToTreeString(node: Org, opts: OrgTreeExportOpts) -> str: ...

def exportToTreeFile(node: Org, path: str, opts: OrgTreeExportOpts) -> None: ...

def annotateSequence(groups: List[SequenceSegmentGroup], first: int, last: int) -> List[SequenceAnnotation]: ...

def eachSubnodeRec(node: Org, callback: function) -> None: ...

/* clang-format on */