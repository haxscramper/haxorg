from typing import *
from enum import Enum
from datetime import datetime, date, time
class Org:
    def __init__(self, loc: Optional[LineCol], subnodes: List[Org]) -> None: ...
    def getKind(self) -> OrgSemKind: ...
    def isGenerated(self) -> bool: ...
    def push_back(self, sub: Org) -> None: ...
    def insert(self, pos: int, node: Org) -> None: ...
    def at(self, idx: int) -> Org: ...
    def is_(self, kind: OrgSemKind) -> bool: ...
    def __getitem__(self, idx: int) -> orgSemId: ...
    def __iter__(self, node: orgOrg) -> auto: ...
    loc: Optional[LineCol]
    subnodes: List[Org]

class LineCol:
    def __init__(self, line: int, column: int, pos: int) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    line: int
    column: int
    pos: int

class TblfmExprAxisRefPositionIndex:
    def __init__(self, index: int) -> None: ...
    def operator==(self, other: TblfmExprAxisRefPositionIndex) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    index: int

class TblfmExprAxisRefPositionName:
    def __init__(self, name: hstdStr) -> None: ...
    def operator==(self, other: TblfmExprAxisRefPositionName) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    name: hstdStr

TblfmExprAxisRefPositionData = Union[TblfmExprAxisRefPositionIndex, TblfmExprAxisRefPositionName]
class TblfmExprAxisRefPositionKind(Enum):
    Index = 1
    Name = 2

class TblfmExprAxisRefPosition:
    def __init__(self, data: TblfmExprAxisRefPositionData) -> None: ...
    def operator==(self, other: TblfmExprAxisRefPosition) -> bool: ...
    def isIndex(self) -> bool: ...
    def getIndex(self) -> TblfmExprAxisRefPositionIndex: ...
    def isName(self) -> bool: ...
    def getName(self) -> TblfmExprAxisRefPositionName: ...
    @staticmethod
    def getKindStatic(self, __input: TblfmExprAxisRefPositionData) -> TblfmExprAxisRefPositionKind: ...
    def getKind(self) -> TblfmExprAxisRefPositionKind: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    data: TblfmExprAxisRefPositionData

class TblfmExprAxisRef:
    def __init__(self, col: TblfmExprAxisRefPosition, row: hstdOpt[TblfmExprAxisRefPosition]) -> None: ...
    def operator==(self, other: TblfmExprAxisRef) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    col: TblfmExprAxisRefPosition
    row: hstdOpt[TblfmExprAxisRefPosition]

class TblfmExprAxisName:
    def __init__(self, name: hstdStr) -> None: ...
    def operator==(self, other: TblfmExprAxisName) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    name: hstdStr

class TblfmExprIntLiteral:
    def __init__(self, value: int) -> None: ...
    def operator==(self, other: TblfmExprIntLiteral) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    value: int

class TblfmExprFloatLiteral:
    def __init__(self, value: float) -> None: ...
    def operator==(self, other: TblfmExprFloatLiteral) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    value: float

class TblfmExprRangeRef:
    def __init__(self, first: hstdOpt[TblfmExprAxisRef], last: hstdOpt[TblfmExprAxisRef]) -> None: ...
    def operator==(self, other: TblfmExprRangeRef) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    first: hstdOpt[TblfmExprAxisRef]
    last: hstdOpt[TblfmExprAxisRef]

class TblfmExprCall:
    def __init__(self, name: hstdStr, args: hstdVec[TblfmExpr]) -> None: ...
    def operator==(self, other: TblfmExprCall) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    name: hstdStr
    args: hstdVec[TblfmExpr]

class TblfmExprElisp:
    def __init__(self, value: hstdStr) -> None: ...
    def operator==(self, other: TblfmExprElisp) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    value: hstdStr

TblfmExprData = Union[TblfmExprAxisRef, TblfmExprAxisName, TblfmExprIntLiteral, TblfmExprFloatLiteral, TblfmExprRangeRef, TblfmExprCall, TblfmExprElisp]
class TblfmExprKind(Enum):
    AxisRef = 1
    AxisName = 2
    IntLiteral = 3
    FloatLiteral = 4
    RangeRef = 5
    Call = 6
    Elisp = 7

class TblfmExpr:
    def __init__(self, data: TblfmExprData) -> None: ...
    def operator==(self, other: TblfmExpr) -> bool: ...
    def isAxisRef(self) -> bool: ...
    def getAxisRef(self) -> TblfmExprAxisRef: ...
    def isAxisName(self) -> bool: ...
    def getAxisName(self) -> TblfmExprAxisName: ...
    def isIntLiteral(self) -> bool: ...
    def getIntLiteral(self) -> TblfmExprIntLiteral: ...
    def isFloatLiteral(self) -> bool: ...
    def getFloatLiteral(self) -> TblfmExprFloatLiteral: ...
    def isRangeRef(self) -> bool: ...
    def getRangeRef(self) -> TblfmExprRangeRef: ...
    def isCall(self) -> bool: ...
    def getCall(self) -> TblfmExprCall: ...
    def isElisp(self) -> bool: ...
    def getElisp(self) -> TblfmExprElisp: ...
    @staticmethod
    def getKindStatic(self, __input: TblfmExprData) -> TblfmExprKind: ...
    def getKind(self) -> TblfmExprKind: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    data: TblfmExprData

class TblfmAssignFlag(Enum):
    CellLeftAlign = 1
    CellRightAlign = 2
    CellCenterAlign = 3
    CellNumber = 4
    CellExponential = 5
    CellFloating = 6
    CellUnformat = 7
    CellText = 8
    CellBool = 9
    CellDecimal = 10
    CellPercentage = 11
    CellHours = 12
    CellZero = 13
    CellMarkInvalid = 14
    CellQuote = 15

class TblfmAssign:
    def __init__(self, target: TblfmExprAxisRef, expr: hstdVec[TblfmExpr], flags: hstdVec[TblfmAssignFlag]) -> None: ...
    def operator==(self, other: TblfmAssign) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    target: TblfmExprAxisRef
    expr: hstdVec[TblfmExpr]
    flags: hstdVec[TblfmAssignFlag]

class Tblfm:
    def __init__(self, exprs: hstdVec[TblfmAssign]) -> None: ...
    def operator==(self, other: Tblfm) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    exprs: hstdVec[TblfmAssign]

class AttrValueKind(Enum):
    String = 1
    Boolean = 2
    Integer = 3
    Float = 4

class AttrValue:
    def __init__(self, name: hstdOpt[hstdStr], varname: hstdOpt[hstdStr], value: hstdStr, isQuoted: bool) -> None: ...
    def getBool(self) -> hstdOpt[bool]: ...
    def getInt(self) -> hstdOpt[int]: ...
    def getString(self) -> hstdStr: ...
    def getDouble(self) -> hstdOpt[double]: ...
    def operator==(self, other: AttrValue) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    name: hstdOpt[hstdStr]
    varname: hstdOpt[hstdStr]
    value: hstdStr
    isQuoted: bool

class HashTagFlat:
    def __init__(self, tags: hstdVec[hstdStr]) -> None: ...
    def operator==(self, other: HashTagFlat) -> bool: ...
    def operator<(self, other: HashTagFlat) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    tags: hstdVec[hstdStr]

class HashTagText:
    def __init__(self, head: hstdStr, subtags: hstdVec[HashTagText]) -> None: ...
    def operator==(self, other: HashTagText) -> bool: ...
    def prefixMatch(self, prefix: hstdVec[hstdStr]) -> bool: ...
    def getFlatHashes(self, withIntermediate: bool) -> hstdVec[HashTagFlat]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    head: hstdStr
    subtags: hstdVec[HashTagText]

class SubtreePath:
    def __init__(self, path: hstdVec[hstdStr]) -> None: ...
    def operator==(self, other: SubtreePath) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    path: hstdVec[hstdStr]

class LinkTargetRaw:
    def __init__(self, text: hstdStr) -> None: ...
    def operator==(self, other: LinkTargetRaw) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    text: hstdStr

class LinkTargetId:
    def __init__(self, text: hstdStr) -> None: ...
    def operator==(self, other: LinkTargetId) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    text: hstdStr

class LinkTargetCustomId:
    def __init__(self, text: hstdStr) -> None: ...
    def operator==(self, other: LinkTargetCustomId) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    text: hstdStr

class LinkTargetSubtreeTitle:
    def __init__(self, title: SubtreePath, level: int) -> None: ...
    def operator==(self, other: LinkTargetSubtreeTitle) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    title: SubtreePath
    level: int

class LinkTargetPerson:
    def __init__(self, name: hstdStr) -> None: ...
    def operator==(self, other: LinkTargetPerson) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    name: hstdStr

class LinkTargetUserProtocol:
    def __init__(self, protocol: hstdStr, target: hstdStr) -> None: ...
    def operator==(self, other: LinkTargetUserProtocol) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    protocol: hstdStr
    target: hstdStr

class LinkTargetInternal:
    def __init__(self, target: hstdStr) -> None: ...
    def operator==(self, other: LinkTargetInternal) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    target: hstdStr

class LinkTargetFootnote:
    def __init__(self, target: hstdStr) -> None: ...
    def operator==(self, other: LinkTargetFootnote) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    target: hstdStr

class LinkTargetFile:
    def __init__(self, file: hstdStr) -> None: ...
    def operator==(self, other: LinkTargetFile) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    file: hstdStr

class LinkTargetAttachment:
    def __init__(self, file: hstdStr) -> None: ...
    def operator==(self, other: LinkTargetAttachment) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    file: hstdStr

LinkTargetData = Union[LinkTargetRaw, LinkTargetId, LinkTargetCustomId, LinkTargetSubtreeTitle, LinkTargetPerson, LinkTargetUserProtocol, LinkTargetInternal, LinkTargetFootnote, LinkTargetFile, LinkTargetAttachment]
class LinkTargetKind(Enum):
    Raw = 1
    Id = 2
    CustomId = 3
    SubtreeTitle = 4
    Person = 5
    UserProtocol = 6
    Internal = 7
    Footnote = 8
    File = 9
    Attachment = 10

class LinkTarget:
    def __init__(self, data: LinkTargetData) -> None: ...
    def operator==(self, other: LinkTarget) -> bool: ...
    def isRaw(self) -> bool: ...
    def getRaw(self) -> LinkTargetRaw: ...
    def isId(self) -> bool: ...
    def getId(self) -> LinkTargetId: ...
    def isCustomId(self) -> bool: ...
    def getCustomId(self) -> LinkTargetCustomId: ...
    def isSubtreeTitle(self) -> bool: ...
    def getSubtreeTitle(self) -> LinkTargetSubtreeTitle: ...
    def isPerson(self) -> bool: ...
    def getPerson(self) -> LinkTargetPerson: ...
    def isUserProtocol(self) -> bool: ...
    def getUserProtocol(self) -> LinkTargetUserProtocol: ...
    def isInternal(self) -> bool: ...
    def getInternal(self) -> LinkTargetInternal: ...
    def isFootnote(self) -> bool: ...
    def getFootnote(self) -> LinkTargetFootnote: ...
    def isFile(self) -> bool: ...
    def getFile(self) -> LinkTargetFile: ...
    def isAttachment(self) -> bool: ...
    def getAttachment(self) -> LinkTargetAttachment: ...
    @staticmethod
    def getKindStatic(self, __input: LinkTargetData) -> LinkTargetKind: ...
    def getKind(self) -> LinkTargetKind: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    data: LinkTargetData

class SubtreeLogHeadPriorityAction(Enum):
    Added = 1
    Removed = 2
    Changed = 3

class SubtreeLogHeadPriority:
    def __init__(self, oldPriority: hstdOpt[str], newPriority: hstdOpt[str], on: UserTime, action: SubtreeLogHeadPriorityAction) -> None: ...
    def operator==(self, other: SubtreeLogHeadPriority) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    oldPriority: hstdOpt[str]
    newPriority: hstdOpt[str]
    on: UserTime
    action: SubtreeLogHeadPriorityAction

class SubtreeLogHeadNote:
    def __init__(self, on: UserTime) -> None: ...
    def operator==(self, other: SubtreeLogHeadNote) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    on: UserTime

class SubtreeLogHeadRefile:
    def __init__(self, on: UserTime, from_: LinkTarget) -> None: ...
    def operator==(self, other: SubtreeLogHeadRefile) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    on: UserTime
    from_: LinkTarget

class SubtreeLogHeadClock:
    def __init__(self, from_: UserTime, to: hstdOpt[UserTime]) -> None: ...
    def operator==(self, other: SubtreeLogHeadClock) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    from_: UserTime
    to: hstdOpt[UserTime]

class SubtreeLogHeadState:
    def __init__(self, from_: hstdStr, to: hstdStr, on: UserTime) -> None: ...
    def operator==(self, other: SubtreeLogHeadState) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    from_: hstdStr
    to: hstdStr
    on: UserTime

class SubtreeLogHeadDeadline:
    def __init__(self, from_: hstdOpt[UserTime], to: UserTime, on: UserTime) -> None: ...
    def operator==(self, other: SubtreeLogHeadDeadline) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    from_: hstdOpt[UserTime]
    to: UserTime
    on: UserTime

class SubtreeLogHeadSchedule:
    def __init__(self, from_: hstdOpt[UserTime], to: UserTime, on: UserTime) -> None: ...
    def operator==(self, other: SubtreeLogHeadSchedule) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    from_: hstdOpt[UserTime]
    to: UserTime
    on: UserTime

class SubtreeLogHeadTag:
    def __init__(self, on: UserTime, tag: HashTagText, added: bool) -> None: ...
    def operator==(self, other: SubtreeLogHeadTag) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    on: UserTime
    tag: HashTagText
    added: bool

class SubtreeLogHeadUnknown:
    def __init__(self) -> None: ...
    def operator==(self, other: SubtreeLogHeadUnknown) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

SubtreeLogHeadLogEntry = Union[SubtreeLogHeadPriority, SubtreeLogHeadNote, SubtreeLogHeadRefile, SubtreeLogHeadClock, SubtreeLogHeadState, SubtreeLogHeadDeadline, SubtreeLogHeadSchedule, SubtreeLogHeadTag, SubtreeLogHeadUnknown]
class SubtreeLogHeadKind(Enum):
    Priority = 1
    Note = 2
    Refile = 3
    Clock = 4
    State = 5
    Deadline = 6
    Schedule = 7
    Tag = 8
    Unknown = 9

class SubtreeLogHead:
    def __init__(self, log: SubtreeLogHeadLogEntry) -> None: ...
    def operator==(self, other: SubtreeLogHead) -> bool: ...
    def isPriority(self) -> bool: ...
    def getPriority(self) -> SubtreeLogHeadPriority: ...
    def isNote(self) -> bool: ...
    def getNote(self) -> SubtreeLogHeadNote: ...
    def isRefile(self) -> bool: ...
    def getRefile(self) -> SubtreeLogHeadRefile: ...
    def isClock(self) -> bool: ...
    def getClock(self) -> SubtreeLogHeadClock: ...
    def isState(self) -> bool: ...
    def getState(self) -> SubtreeLogHeadState: ...
    def isDeadline(self) -> bool: ...
    def getDeadline(self) -> SubtreeLogHeadDeadline: ...
    def isSchedule(self) -> bool: ...
    def getSchedule(self) -> SubtreeLogHeadSchedule: ...
    def isTag(self) -> bool: ...
    def getTag(self) -> SubtreeLogHeadTag: ...
    def isUnknown(self) -> bool: ...
    def getUnknown(self) -> SubtreeLogHeadUnknown: ...
    @staticmethod
    def getLogKindStatic(self, __input: SubtreeLogHeadLogEntry) -> SubtreeLogHeadKind: ...
    def getLogKind(self) -> SubtreeLogHeadKind: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    log: SubtreeLogHeadLogEntry

class SubtreeCompletion:
    def __init__(self, done: int, full: int, isPercent: bool) -> None: ...
    def operator==(self, other: SubtreeCompletion) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    done: int
    full: int
    isPercent: bool

class AttrList:
    def __init__(self, items: hstdVec[AttrValue]) -> None: ...
    def operator==(self, other: AttrList) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    items: hstdVec[AttrValue]

class AttrGroup:
    def __init__(self, positional: AttrList, named: Dict[hstdStr, AttrList]) -> None: ...
    def getFlatArgs(self) -> hstdVec[AttrValue]: ...
    def getAttrs(self, key: hstdOpt[hstdStr]) -> hstdVec[AttrValue]: ...
    def setNamedAttr(self, key: hstdStr, attrs: hstdVec[AttrValue]) -> None: ...
    def setPositionalAttr(self, items: hstdVec[AttrValue]) -> None: ...
    def getPositionalSize(self) -> int: ...
    def getNamedSize(self) -> int: ...
    def isEmpty(self) -> bool: ...
    def atPositional(self, index: int) -> AttrValue: ...
    def getPositional(self, index: int) -> hstdOpt[AttrValue]: ...
    def atNamed(self, index: hstdStr) -> AttrList: ...
    def getNamed(self, index: hstdStr) -> hstdOpt[AttrList]: ...
    def atFirstNamed(self, index: hstdStr) -> AttrValue: ...
    def getFirstNamed(self, index: hstdStr) -> hstdOpt[AttrValue]: ...
    def operator==(self, other: AttrGroup) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    positional: AttrList
    named: Dict[hstdStr, AttrList]

class ColumnViewSummaryCheckboxAggregateKind(Enum):
    IfAllNested = 1
    AggregateFractionRec = 2
    AggregatePercentRec = 3

class ColumnViewSummaryCheckboxAggregate:
    def __init__(self, kind: ColumnViewSummaryCheckboxAggregateKind) -> None: ...
    def operator==(self, other: ColumnViewSummaryCheckboxAggregate) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    kind: ColumnViewSummaryCheckboxAggregateKind

class ColumnViewSummaryMathAggregateKind(Enum):
    Min = 1
    Max = 2
    Mean = 3
    Sum = 4
    LowHighEst = 5

class ColumnViewSummaryMathAggregate:
    def __init__(self, kind: ColumnViewSummaryMathAggregateKind, formatDigits: hstdOpt[int], formatPrecision: hstdOpt[int]) -> None: ...
    def operator==(self, other: ColumnViewSummaryMathAggregate) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    kind: ColumnViewSummaryMathAggregateKind
    formatDigits: hstdOpt[int]
    formatPrecision: hstdOpt[int]

ColumnViewSummaryData = Union[ColumnViewSummaryCheckboxAggregate, ColumnViewSummaryMathAggregate]
class ColumnViewSummaryKind(Enum):
    CheckboxAggregate = 1
    MathAggregate = 2

class ColumnViewSummary:
    def __init__(self, data: ColumnViewSummaryData) -> None: ...
    def operator==(self, other: ColumnViewSummary) -> bool: ...
    def isCheckboxAggregate(self) -> bool: ...
    def getCheckboxAggregate(self) -> ColumnViewSummaryCheckboxAggregate: ...
    def isMathAggregate(self) -> bool: ...
    def getMathAggregate(self) -> ColumnViewSummaryMathAggregate: ...
    @staticmethod
    def getKindStatic(self, __input: ColumnViewSummaryData) -> ColumnViewSummaryKind: ...
    def getKind(self) -> ColumnViewSummaryKind: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    data: ColumnViewSummaryData

class ColumnViewColumn:
    def __init__(self, summary: hstdOpt[ColumnViewSummary], width: hstdOpt[int], property: hstdOpt[hstdStr], propertyTitle: hstdOpt[hstdStr]) -> None: ...
    def operator==(self, other: ColumnViewColumn) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    summary: hstdOpt[ColumnViewSummary]
    width: hstdOpt[int]
    property: hstdOpt[hstdStr]
    propertyTitle: hstdOpt[hstdStr]

class ColumnView:
    def __init__(self, columns: hstdVec[ColumnViewColumn]) -> None: ...
    def operator==(self, other: ColumnView) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    columns: hstdVec[ColumnViewColumn]

class BlockCodeLinePartRaw:
    def __init__(self, code: hstdStr) -> None: ...
    def operator==(self, other: BlockCodeLinePartRaw) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    code: hstdStr

class BlockCodeLinePartCallout:
    def __init__(self, name: hstdStr) -> None: ...
    def operator==(self, other: BlockCodeLinePartCallout) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    name: hstdStr

class BlockCodeLinePartTangle:
    def __init__(self, target: hstdStr) -> None: ...
    def operator==(self, other: BlockCodeLinePartTangle) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    target: hstdStr

BlockCodeLinePartData = Union[BlockCodeLinePartRaw, BlockCodeLinePartCallout, BlockCodeLinePartTangle]
class BlockCodeLinePartKind(Enum):
    Raw = 1
    Callout = 2
    Tangle = 3

class BlockCodeLinePart:
    def __init__(self, data: BlockCodeLinePartData) -> None: ...
    def operator==(self, other: BlockCodeLinePart) -> bool: ...
    def isRaw(self) -> bool: ...
    def getRaw(self) -> BlockCodeLinePartRaw: ...
    def isCallout(self) -> bool: ...
    def getCallout(self) -> BlockCodeLinePartCallout: ...
    def isTangle(self) -> bool: ...
    def getTangle(self) -> BlockCodeLinePartTangle: ...
    @staticmethod
    def getKindStatic(self, __input: BlockCodeLinePartData) -> BlockCodeLinePartKind: ...
    def getKind(self) -> BlockCodeLinePartKind: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    data: BlockCodeLinePartData

class BlockCodeLine:
    def __init__(self, parts: hstdVec[BlockCodeLinePart]) -> None: ...
    def operator==(self, other: BlockCodeLine) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    parts: hstdVec[BlockCodeLinePart]

class BlockCodeSwitchLineStart:
    def __init__(self, start: int, extendLast: bool) -> None: ...
    def operator==(self, other: BlockCodeSwitchLineStart) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    start: int
    extendLast: bool

class BlockCodeSwitchCalloutFormat:
    def __init__(self, format: hstdStr) -> None: ...
    def operator==(self, other: BlockCodeSwitchCalloutFormat) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    format: hstdStr

class BlockCodeSwitchRemoveCallout:
    def __init__(self, remove: bool) -> None: ...
    def operator==(self, other: BlockCodeSwitchRemoveCallout) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    remove: bool

class BlockCodeSwitchEmphasizeLine:
    def __init__(self, line: hstdVec[int]) -> None: ...
    def operator==(self, other: BlockCodeSwitchEmphasizeLine) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    line: hstdVec[int]

class BlockCodeSwitchDedent:
    def __init__(self, value: int) -> None: ...
    def operator==(self, other: BlockCodeSwitchDedent) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    value: int

BlockCodeSwitchData = Union[BlockCodeSwitchLineStart, BlockCodeSwitchCalloutFormat, BlockCodeSwitchRemoveCallout, BlockCodeSwitchEmphasizeLine, BlockCodeSwitchDedent]
class BlockCodeSwitchKind(Enum):
    LineStart = 1
    CalloutFormat = 2
    RemoveCallout = 3
    EmphasizeLine = 4
    Dedent = 5

class BlockCodeSwitch:
    def __init__(self, data: BlockCodeSwitchData) -> None: ...
    def operator==(self, other: BlockCodeSwitch) -> bool: ...
    def isLineStart(self) -> bool: ...
    def getLineStart(self) -> BlockCodeSwitchLineStart: ...
    def isCalloutFormat(self) -> bool: ...
    def getCalloutFormat(self) -> BlockCodeSwitchCalloutFormat: ...
    def isRemoveCallout(self) -> bool: ...
    def getRemoveCallout(self) -> BlockCodeSwitchRemoveCallout: ...
    def isEmphasizeLine(self) -> bool: ...
    def getEmphasizeLine(self) -> BlockCodeSwitchEmphasizeLine: ...
    def isDedent(self) -> bool: ...
    def getDedent(self) -> BlockCodeSwitchDedent: ...
    @staticmethod
    def getKindStatic(self, __input: BlockCodeSwitchData) -> BlockCodeSwitchKind: ...
    def getKind(self) -> BlockCodeSwitchKind: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    data: BlockCodeSwitchData

class BlockCodeEvalResultNone:
    def __init__(self) -> None: ...
    def operator==(self, other: BlockCodeEvalResultNone) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class BlockCodeEvalResultOrgValue:
    def __init__(self, value: hstdStr) -> None: ...
    def operator==(self, other: BlockCodeEvalResultOrgValue) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    value: hstdStr

class BlockCodeEvalResultFile:
    def __init__(self, path: hstdStr) -> None: ...
    def operator==(self, other: BlockCodeEvalResultFile) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    path: hstdStr

class BlockCodeEvalResultRaw:
    def __init__(self, text: hstdStr) -> None: ...
    def operator==(self, other: BlockCodeEvalResultRaw) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    text: hstdStr

BlockCodeEvalResultData = Union[BlockCodeEvalResultNone, BlockCodeEvalResultOrgValue, BlockCodeEvalResultFile, BlockCodeEvalResultRaw]
class BlockCodeEvalResultKind(Enum):
    _None = 1
    OrgValue = 2
    File = 3
    Raw = 4

class BlockCodeEvalResult:
    def __init__(self, data: BlockCodeEvalResultData) -> None: ...
    def operator==(self, other: BlockCodeEvalResult) -> bool: ...
    def isNone(self) -> bool: ...
    def getNone(self) -> BlockCodeEvalResultNone: ...
    def isOrgValue(self) -> bool: ...
    def getOrgValue(self) -> BlockCodeEvalResultOrgValue: ...
    def isFile(self) -> bool: ...
    def getFile(self) -> BlockCodeEvalResultFile: ...
    def isRaw(self) -> bool: ...
    def getRaw(self) -> BlockCodeEvalResultRaw: ...
    @staticmethod
    def getKindStatic(self, __input: BlockCodeEvalResultData) -> BlockCodeEvalResultKind: ...
    def getKind(self) -> BlockCodeEvalResultKind: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    data: BlockCodeEvalResultData

class DocumentExportConfigTaskExport:
    def __init__(self, taskWhitelist: hstdVec[hstdStr]) -> None: ...
    def operator==(self, other: DocumentExportConfigTaskExport) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    taskWhitelist: hstdVec[hstdStr]

class DocumentExportConfigTagExport(Enum):
    _None = 1
    All = 2
    NotInToc = 3

class DocumentExportConfigTaskFiltering(Enum):
    Whitelist = 1
    Done = 2
    _None = 3
    All = 4

class DocumentExportConfigBrokenLinks(Enum):
    Mark = 1
    Raise = 2
    Ignore = 3

class DocumentExportConfigDoExport:
    def __init__(self, exportToc: bool) -> None: ...
    def operator==(self, other: DocumentExportConfigDoExport) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    exportToc: bool

class DocumentExportConfigExportFixed:
    def __init__(self, exportLevels: int) -> None: ...
    def operator==(self, other: DocumentExportConfigExportFixed) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    exportLevels: int

DocumentExportConfigTocExport = Union[DocumentExportConfigDoExport, DocumentExportConfigExportFixed]
class DocumentExportConfigTocExportKind(Enum):
    DoExport = 1
    ExportFixed = 2

class DocumentExportConfig:
    def __init__(self, inlinetasks: hstdOpt[bool], footnotes: hstdOpt[bool], clock: hstdOpt[bool], author: hstdOpt[bool], emphasis: hstdOpt[bool], specialStrings: hstdOpt[bool], propertyDrawers: hstdOpt[bool], statisticsCookies: hstdOpt[bool], todoText: hstdOpt[bool], brokenLinks: DocumentExportConfigBrokenLinks, tocExport: DocumentExportConfigTocExport, tagExport: DocumentExportConfigTagExport, data: DocumentExportConfigTocExport) -> None: ...
    def operator==(self, other: DocumentExportConfig) -> bool: ...
    def isDoExport(self) -> bool: ...
    def getDoExport(self) -> DocumentExportConfigDoExport: ...
    def isExportFixed(self) -> bool: ...
    def getExportFixed(self) -> DocumentExportConfigExportFixed: ...
    @staticmethod
    def getTocExportKindStatic(self, __input: DocumentExportConfigTocExport) -> DocumentExportConfigTocExportKind: ...
    def getTocExportKind(self) -> DocumentExportConfigTocExportKind: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    inlinetasks: hstdOpt[bool]
    footnotes: hstdOpt[bool]
    clock: hstdOpt[bool]
    author: hstdOpt[bool]
    emphasis: hstdOpt[bool]
    specialStrings: hstdOpt[bool]
    propertyDrawers: hstdOpt[bool]
    statisticsCookies: hstdOpt[bool]
    todoText: hstdOpt[bool]
    brokenLinks: DocumentExportConfigBrokenLinks
    tocExport: DocumentExportConfigTocExport
    tagExport: DocumentExportConfigTagExport
    data: DocumentExportConfigTocExport

class SubtreePeriodKind(Enum):
    Clocked = 1
    Closed = 2
    Scheduled = 3
    Titled = 4
    Deadline = 5
    Created = 6
    Repeated = 7

class SubtreePeriod:
    def __init__(self, kind: SubtreePeriodKind, from_: UserTime, to: hstdOpt[UserTime]) -> None: ...
    def operator==(self, other: SubtreePeriod) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    kind: SubtreePeriodKind
    from_: UserTime
    to: hstdOpt[UserTime]

class NamedPropertyNonblocking:
    def __init__(self, isBlocking: bool) -> None: ...
    def operator==(self, other: NamedPropertyNonblocking) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    isBlocking: bool

class NamedPropertyArchiveTime:
    def __init__(self, time: UserTime) -> None: ...
    def operator==(self, other: NamedPropertyArchiveTime) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    time: UserTime

class NamedPropertyArchiveFile:
    def __init__(self, file: hstdStr) -> None: ...
    def operator==(self, other: NamedPropertyArchiveFile) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    file: hstdStr

class NamedPropertyArchiveOlpath:
    def __init__(self, path: SubtreePath) -> None: ...
    def operator==(self, other: NamedPropertyArchiveOlpath) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    path: SubtreePath

class NamedPropertyArchiveTarget:
    def __init__(self, path: SubtreePath, pattern: hstdStr) -> None: ...
    def operator==(self, other: NamedPropertyArchiveTarget) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    path: SubtreePath
    pattern: hstdStr

class NamedPropertyArchiveCategory:
    def __init__(self, category: hstdStr) -> None: ...
    def operator==(self, other: NamedPropertyArchiveCategory) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    category: hstdStr

class NamedPropertyArchiveTodo:
    def __init__(self, todo: hstdStr) -> None: ...
    def operator==(self, other: NamedPropertyArchiveTodo) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    todo: hstdStr

class NamedPropertyTrigger:
    def __init__(self) -> None: ...
    def operator==(self, other: NamedPropertyTrigger) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class NamedPropertyExportLatexClass:
    def __init__(self, latexClass: hstdStr) -> None: ...
    def operator==(self, other: NamedPropertyExportLatexClass) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    latexClass: hstdStr

class NamedPropertyCookieDataTodoSource(Enum):
    Checkbox = 1
    Todo = 2
    Both = 3

class NamedPropertyCookieData:
    def __init__(self, isRecursive: bool, source: NamedPropertyCookieDataTodoSource) -> None: ...
    def operator==(self, other: NamedPropertyCookieData) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    isRecursive: bool
    source: NamedPropertyCookieDataTodoSource

class NamedPropertyExportLatexClassOptions:
    def __init__(self, options: hstdVec[hstdStr]) -> None: ...
    def operator==(self, other: NamedPropertyExportLatexClassOptions) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    options: hstdVec[hstdStr]

class NamedPropertyExportLatexHeader:
    def __init__(self, header: hstdStr) -> None: ...
    def operator==(self, other: NamedPropertyExportLatexHeader) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    header: hstdStr

class NamedPropertyExportLatexCompiler:
    def __init__(self, compiler: hstdStr) -> None: ...
    def operator==(self, other: NamedPropertyExportLatexCompiler) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    compiler: hstdStr

class NamedPropertyOrdered:
    def __init__(self, isOrdered: bool) -> None: ...
    def operator==(self, other: NamedPropertyOrdered) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    isOrdered: bool

class NamedPropertyEffort:
    def __init__(self, hours: int, minutes: int) -> None: ...
    def operator==(self, other: NamedPropertyEffort) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    hours: int
    minutes: int

class NamedPropertyVisibilityLevel(Enum):
    Folded = 1
    Children = 2
    Content = 3
    All = 4

class NamedPropertyVisibility:
    def __init__(self, level: NamedPropertyVisibilityLevel) -> None: ...
    def operator==(self, other: NamedPropertyVisibility) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    level: NamedPropertyVisibilityLevel

class NamedPropertyExportOptions:
    def __init__(self, backend: hstdStr, values: Dict[hstdStr, hstdStr]) -> None: ...
    def operator==(self, other: NamedPropertyExportOptions) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    backend: hstdStr
    values: Dict[hstdStr, hstdStr]

class NamedPropertyBlocker:
    def __init__(self, blockers: hstdVec[hstdStr]) -> None: ...
    def operator==(self, other: NamedPropertyBlocker) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    blockers: hstdVec[hstdStr]

class NamedPropertyUnnumbered:
    def __init__(self) -> None: ...
    def operator==(self, other: NamedPropertyUnnumbered) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class NamedPropertyCreated:
    def __init__(self, time: UserTime) -> None: ...
    def operator==(self, other: NamedPropertyCreated) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    time: UserTime

class NamedPropertyRadioId:
    def __init__(self, words: hstdVec[hstdStr]) -> None: ...
    def operator==(self, other: NamedPropertyRadioId) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    words: hstdVec[hstdStr]

class NamedPropertyHashtagDef:
    def __init__(self, hashtag: HashTagText) -> None: ...
    def operator==(self, other: NamedPropertyHashtagDef) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    hashtag: HashTagText

class NamedPropertyCustomArgs:
    def __init__(self, name: hstdStr, sub: hstdOpt[hstdStr], attrs: AttrGroup) -> None: ...
    def operator==(self, other: NamedPropertyCustomArgs) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    name: hstdStr
    sub: hstdOpt[hstdStr]
    attrs: AttrGroup

class NamedPropertyCustomRaw:
    def __init__(self, name: hstdStr, value: hstdStr) -> None: ...
    def operator==(self, other: NamedPropertyCustomRaw) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    name: hstdStr
    value: hstdStr

class NamedPropertyCustomSubtreeJson:
    def __init__(self, name: hstdStr, value: OrgJson) -> None: ...
    def operator==(self, other: NamedPropertyCustomSubtreeJson) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    name: hstdStr
    value: OrgJson

class NamedPropertyCustomSubtreeFlags:
    def __init__(self, name: hstdStr, value: AttrGroup) -> None: ...
    def operator==(self, other: NamedPropertyCustomSubtreeFlags) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    name: hstdStr
    value: AttrGroup

NamedPropertyData = Union[NamedPropertyNonblocking, NamedPropertyArchiveTime, NamedPropertyArchiveFile, NamedPropertyArchiveOlpath, NamedPropertyArchiveTarget, NamedPropertyArchiveCategory, NamedPropertyArchiveTodo, NamedPropertyTrigger, NamedPropertyExportLatexClass, NamedPropertyCookieData, NamedPropertyExportLatexClassOptions, NamedPropertyExportLatexHeader, NamedPropertyExportLatexCompiler, NamedPropertyOrdered, NamedPropertyEffort, NamedPropertyVisibility, NamedPropertyExportOptions, NamedPropertyBlocker, NamedPropertyUnnumbered, NamedPropertyCreated, NamedPropertyRadioId, NamedPropertyHashtagDef, NamedPropertyCustomArgs, NamedPropertyCustomRaw, NamedPropertyCustomSubtreeJson, NamedPropertyCustomSubtreeFlags]
class NamedPropertyKind(Enum):
    Nonblocking = 1
    ArchiveTime = 2
    ArchiveFile = 3
    ArchiveOlpath = 4
    ArchiveTarget = 5
    ArchiveCategory = 6
    ArchiveTodo = 7
    Trigger = 8
    ExportLatexClass = 9
    CookieData = 10
    ExportLatexClassOptions = 11
    ExportLatexHeader = 12
    ExportLatexCompiler = 13
    Ordered = 14
    Effort = 15
    Visibility = 16
    ExportOptions = 17
    Blocker = 18
    Unnumbered = 19
    Created = 20
    RadioId = 21
    HashtagDef = 22
    CustomArgs = 23
    CustomRaw = 24
    CustomSubtreeJson = 25
    CustomSubtreeFlags = 26

class NamedProperty:
    def __init__(self, data: NamedPropertyData) -> None: ...
    def isMatching(self, kind: hstdStr, subKind: hstdOpt[hstdStr]) -> bool: ...
    def getName(self) -> hstdStr: ...
    def getSubKind(self) -> hstdOpt[hstdStr]: ...
    def operator==(self, other: NamedProperty) -> bool: ...
    def isNonblocking(self) -> bool: ...
    def getNonblocking(self) -> NamedPropertyNonblocking: ...
    def isArchiveTime(self) -> bool: ...
    def getArchiveTime(self) -> NamedPropertyArchiveTime: ...
    def isArchiveFile(self) -> bool: ...
    def getArchiveFile(self) -> NamedPropertyArchiveFile: ...
    def isArchiveOlpath(self) -> bool: ...
    def getArchiveOlpath(self) -> NamedPropertyArchiveOlpath: ...
    def isArchiveTarget(self) -> bool: ...
    def getArchiveTarget(self) -> NamedPropertyArchiveTarget: ...
    def isArchiveCategory(self) -> bool: ...
    def getArchiveCategory(self) -> NamedPropertyArchiveCategory: ...
    def isArchiveTodo(self) -> bool: ...
    def getArchiveTodo(self) -> NamedPropertyArchiveTodo: ...
    def isTrigger(self) -> bool: ...
    def getTrigger(self) -> NamedPropertyTrigger: ...
    def isExportLatexClass(self) -> bool: ...
    def getExportLatexClass(self) -> NamedPropertyExportLatexClass: ...
    def isCookieData(self) -> bool: ...
    def getCookieData(self) -> NamedPropertyCookieData: ...
    def isExportLatexClassOptions(self) -> bool: ...
    def getExportLatexClassOptions(self) -> NamedPropertyExportLatexClassOptions: ...
    def isExportLatexHeader(self) -> bool: ...
    def getExportLatexHeader(self) -> NamedPropertyExportLatexHeader: ...
    def isExportLatexCompiler(self) -> bool: ...
    def getExportLatexCompiler(self) -> NamedPropertyExportLatexCompiler: ...
    def isOrdered(self) -> bool: ...
    def getOrdered(self) -> NamedPropertyOrdered: ...
    def isEffort(self) -> bool: ...
    def getEffort(self) -> NamedPropertyEffort: ...
    def isVisibility(self) -> bool: ...
    def getVisibility(self) -> NamedPropertyVisibility: ...
    def isExportOptions(self) -> bool: ...
    def getExportOptions(self) -> NamedPropertyExportOptions: ...
    def isBlocker(self) -> bool: ...
    def getBlocker(self) -> NamedPropertyBlocker: ...
    def isUnnumbered(self) -> bool: ...
    def getUnnumbered(self) -> NamedPropertyUnnumbered: ...
    def isCreated(self) -> bool: ...
    def getCreated(self) -> NamedPropertyCreated: ...
    def isRadioId(self) -> bool: ...
    def getRadioId(self) -> NamedPropertyRadioId: ...
    def isHashtagDef(self) -> bool: ...
    def getHashtagDef(self) -> NamedPropertyHashtagDef: ...
    def isCustomArgs(self) -> bool: ...
    def getCustomArgs(self) -> NamedPropertyCustomArgs: ...
    def isCustomRaw(self) -> bool: ...
    def getCustomRaw(self) -> NamedPropertyCustomRaw: ...
    def isCustomSubtreeJson(self) -> bool: ...
    def getCustomSubtreeJson(self) -> NamedPropertyCustomSubtreeJson: ...
    def isCustomSubtreeFlags(self) -> bool: ...
    def getCustomSubtreeFlags(self) -> NamedPropertyCustomSubtreeFlags: ...
    @staticmethod
    def getKindStatic(self, __input: NamedPropertyData) -> NamedPropertyKind: ...
    def getKind(self) -> NamedPropertyKind: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    data: NamedPropertyData

class None(orgOrg):
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class ErrorItem(orgOrg):
    def __init__(self, message: hstdStr, function: hstdOpt[hstdStr], line: hstdOpt[int]) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    message: hstdStr
    function: hstdOpt[hstdStr]
    line: hstdOpt[int]

class ErrorGroup(orgOrg):
    def __init__(self, diagnostics: hstdVec[orgSemId], function: hstdOpt[hstdStr], line: hstdOpt[int]) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    diagnostics: hstdVec[orgSemId]
    function: hstdOpt[hstdStr]
    line: hstdOpt[int]

class Stmt(orgOrg):
    def __init__(self, attached: hstdVec[orgSemId]) -> None: ...
    def getAttached(self, kind: hstdOpt[hstdStr]) -> hstdVec[orgSemId]: ...
    def getCaption(self) -> hstdVec[orgSemId]: ...
    def getName(self) -> hstdVec[hstdStr]: ...
    def getAttrs(self, kind: hstdOpt[hstdStr]) -> hstdVec[AttrValue]: ...
    def getFirstAttr(self, kind: hstdStr) -> hstdOpt[AttrValue]: ...
    attached: hstdVec[orgSemId]

class Inline(orgOrg):
    def __init__(self) -> None: ...

class StmtList(orgOrg):
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class Empty(orgOrg):
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class Cmd(orgStmt):
    def __init__(self, attrs: hstdOpt[AttrGroup], attached: hstdVec[orgSemId]) -> None: ...
    def getAttrs(self, key: hstdOpt[hstdStr]) -> hstdVec[AttrValue]: ...
    def getFirstAttr(self, kind: hstdStr) -> hstdOpt[AttrValue]: ...
    def getAttached(self, kind: hstdOpt[hstdStr]) -> hstdVec[orgSemId]: ...
    def getCaption(self) -> hstdVec[orgSemId]: ...
    def getName(self) -> hstdVec[hstdStr]: ...
    def getAttrs(self, kind: hstdOpt[hstdStr]) -> hstdVec[AttrValue]: ...
    def getFirstAttr(self, kind: hstdStr) -> hstdOpt[AttrValue]: ...
    attrs: hstdOpt[AttrGroup]
    attached: hstdVec[orgSemId]

class Block(orgCmd):
    def __init__(self, attrs: hstdOpt[AttrGroup], attached: hstdVec[orgSemId]) -> None: ...
    def getAttrs(self, key: hstdOpt[hstdStr]) -> hstdVec[AttrValue]: ...
    def getFirstAttr(self, kind: hstdStr) -> hstdOpt[AttrValue]: ...
    def getAttached(self, kind: hstdOpt[hstdStr]) -> hstdVec[orgSemId]: ...
    def getCaption(self) -> hstdVec[orgSemId]: ...
    def getName(self) -> hstdVec[hstdStr]: ...
    def getAttrs(self, kind: hstdOpt[hstdStr]) -> hstdVec[AttrValue]: ...
    def getFirstAttr(self, kind: hstdStr) -> hstdOpt[AttrValue]: ...
    attrs: hstdOpt[AttrGroup]
    attached: hstdVec[orgSemId]

class LineCommand(orgCmd):
    def __init__(self, attrs: hstdOpt[AttrGroup], attached: hstdVec[orgSemId]) -> None: ...
    def getAttrs(self, key: hstdOpt[hstdStr]) -> hstdVec[AttrValue]: ...
    def getFirstAttr(self, kind: hstdStr) -> hstdOpt[AttrValue]: ...
    def getAttached(self, kind: hstdOpt[hstdStr]) -> hstdVec[orgSemId]: ...
    def getCaption(self) -> hstdVec[orgSemId]: ...
    def getName(self) -> hstdVec[hstdStr]: ...
    def getAttrs(self, kind: hstdOpt[hstdStr]) -> hstdVec[AttrValue]: ...
    def getFirstAttr(self, kind: hstdStr) -> hstdOpt[AttrValue]: ...
    attrs: hstdOpt[AttrGroup]
    attached: hstdVec[orgSemId]

class Attached(orgLineCommand):
    def __init__(self, attrs: hstdOpt[AttrGroup], attached: hstdVec[orgSemId]) -> None: ...
    def getAttrs(self, key: hstdOpt[hstdStr]) -> hstdVec[AttrValue]: ...
    def getFirstAttr(self, kind: hstdStr) -> hstdOpt[AttrValue]: ...
    def getAttached(self, kind: hstdOpt[hstdStr]) -> hstdVec[orgSemId]: ...
    def getCaption(self) -> hstdVec[orgSemId]: ...
    def getName(self) -> hstdVec[hstdStr]: ...
    def getAttrs(self, kind: hstdOpt[hstdStr]) -> hstdVec[AttrValue]: ...
    def getFirstAttr(self, kind: hstdStr) -> hstdOpt[AttrValue]: ...
    attrs: hstdOpt[AttrGroup]
    attached: hstdVec[orgSemId]

class Leaf(orgOrg):
    def __init__(self, text: hstdStr) -> None: ...
    def getText(self) -> hstdStr: ...
    text: hstdStr

class CmdCaption(orgAttached):
    def __init__(self, text: orgSemId, attrs: hstdOpt[AttrGroup], attached: hstdVec[orgSemId]) -> None: ...
    def getAttrs(self, key: hstdOpt[hstdStr]) -> hstdVec[AttrValue]: ...
    def getFirstAttr(self, kind: hstdStr) -> hstdOpt[AttrValue]: ...
    def getAttached(self, kind: hstdOpt[hstdStr]) -> hstdVec[orgSemId]: ...
    def getCaption(self) -> hstdVec[orgSemId]: ...
    def getName(self) -> hstdVec[hstdStr]: ...
    def getAttrs(self, kind: hstdOpt[hstdStr]) -> hstdVec[AttrValue]: ...
    def getFirstAttr(self, kind: hstdStr) -> hstdOpt[AttrValue]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    text: orgSemId
    attrs: hstdOpt[AttrGroup]
    attached: hstdVec[orgSemId]

class CmdColumns(orgAttached):
    def __init__(self, view: ColumnView, attrs: hstdOpt[AttrGroup], attached: hstdVec[orgSemId]) -> None: ...
    def getAttrs(self, key: hstdOpt[hstdStr]) -> hstdVec[AttrValue]: ...
    def getFirstAttr(self, kind: hstdStr) -> hstdOpt[AttrValue]: ...
    def getAttached(self, kind: hstdOpt[hstdStr]) -> hstdVec[orgSemId]: ...
    def getCaption(self) -> hstdVec[orgSemId]: ...
    def getName(self) -> hstdVec[hstdStr]: ...
    def getAttrs(self, kind: hstdOpt[hstdStr]) -> hstdVec[AttrValue]: ...
    def getFirstAttr(self, kind: hstdStr) -> hstdOpt[AttrValue]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    view: ColumnView
    attrs: hstdOpt[AttrGroup]
    attached: hstdVec[orgSemId]

class CmdName(orgAttached):
    def __init__(self, name: hstdStr, attrs: hstdOpt[AttrGroup], attached: hstdVec[orgSemId]) -> None: ...
    def getAttrs(self, key: hstdOpt[hstdStr]) -> hstdVec[AttrValue]: ...
    def getFirstAttr(self, kind: hstdStr) -> hstdOpt[AttrValue]: ...
    def getAttached(self, kind: hstdOpt[hstdStr]) -> hstdVec[orgSemId]: ...
    def getCaption(self) -> hstdVec[orgSemId]: ...
    def getName(self) -> hstdVec[hstdStr]: ...
    def getAttrs(self, kind: hstdOpt[hstdStr]) -> hstdVec[AttrValue]: ...
    def getFirstAttr(self, kind: hstdStr) -> hstdOpt[AttrValue]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    name: hstdStr
    attrs: hstdOpt[AttrGroup]
    attached: hstdVec[orgSemId]

class CmdCustomArgs(orgCmd):
    def __init__(self, name: hstdStr, isAttached: bool, attrs: hstdOpt[AttrGroup], attached: hstdVec[orgSemId]) -> None: ...
    def getAttrs(self, key: hstdOpt[hstdStr]) -> hstdVec[AttrValue]: ...
    def getFirstAttr(self, kind: hstdStr) -> hstdOpt[AttrValue]: ...
    def getAttached(self, kind: hstdOpt[hstdStr]) -> hstdVec[orgSemId]: ...
    def getCaption(self) -> hstdVec[orgSemId]: ...
    def getName(self) -> hstdVec[hstdStr]: ...
    def getAttrs(self, kind: hstdOpt[hstdStr]) -> hstdVec[AttrValue]: ...
    def getFirstAttr(self, kind: hstdStr) -> hstdOpt[AttrValue]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    name: hstdStr
    isAttached: bool
    attrs: hstdOpt[AttrGroup]
    attached: hstdVec[orgSemId]

class CmdCustomRaw(orgStmt):
    def __init__(self, name: hstdStr, isAttached: bool, text: hstdStr, attached: hstdVec[orgSemId]) -> None: ...
    def getAttached(self, kind: hstdOpt[hstdStr]) -> hstdVec[orgSemId]: ...
    def getCaption(self) -> hstdVec[orgSemId]: ...
    def getName(self) -> hstdVec[hstdStr]: ...
    def getAttrs(self, kind: hstdOpt[hstdStr]) -> hstdVec[AttrValue]: ...
    def getFirstAttr(self, kind: hstdStr) -> hstdOpt[AttrValue]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    name: hstdStr
    isAttached: bool
    text: hstdStr
    attached: hstdVec[orgSemId]

class CmdCustomText(orgStmt):
    def __init__(self, name: hstdStr, isAttached: bool, text: orgSemId, attached: hstdVec[orgSemId]) -> None: ...
    def getAttached(self, kind: hstdOpt[hstdStr]) -> hstdVec[orgSemId]: ...
    def getCaption(self) -> hstdVec[orgSemId]: ...
    def getName(self) -> hstdVec[hstdStr]: ...
    def getAttrs(self, kind: hstdOpt[hstdStr]) -> hstdVec[AttrValue]: ...
    def getFirstAttr(self, kind: hstdStr) -> hstdOpt[AttrValue]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    name: hstdStr
    isAttached: bool
    text: orgSemId
    attached: hstdVec[orgSemId]

class CmdResults(orgAttached):
    def __init__(self, attrs: hstdOpt[AttrGroup], attached: hstdVec[orgSemId]) -> None: ...
    def getAttrs(self, key: hstdOpt[hstdStr]) -> hstdVec[AttrValue]: ...
    def getFirstAttr(self, kind: hstdStr) -> hstdOpt[AttrValue]: ...
    def getAttached(self, kind: hstdOpt[hstdStr]) -> hstdVec[orgSemId]: ...
    def getCaption(self) -> hstdVec[orgSemId]: ...
    def getName(self) -> hstdVec[hstdStr]: ...
    def getAttrs(self, kind: hstdOpt[hstdStr]) -> hstdVec[AttrValue]: ...
    def getFirstAttr(self, kind: hstdStr) -> hstdOpt[AttrValue]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    attrs: hstdOpt[AttrGroup]
    attached: hstdVec[orgSemId]

class CmdTblfm(orgCmd):
    def __init__(self, expr: Tblfm, attrs: hstdOpt[AttrGroup], attached: hstdVec[orgSemId]) -> None: ...
    def getAttrs(self, key: hstdOpt[hstdStr]) -> hstdVec[AttrValue]: ...
    def getFirstAttr(self, kind: hstdStr) -> hstdOpt[AttrValue]: ...
    def getAttached(self, kind: hstdOpt[hstdStr]) -> hstdVec[orgSemId]: ...
    def getCaption(self) -> hstdVec[orgSemId]: ...
    def getName(self) -> hstdVec[hstdStr]: ...
    def getAttrs(self, kind: hstdOpt[hstdStr]) -> hstdVec[AttrValue]: ...
    def getFirstAttr(self, kind: hstdStr) -> hstdOpt[AttrValue]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    expr: Tblfm
    attrs: hstdOpt[AttrGroup]
    attached: hstdVec[orgSemId]

class HashTag(orgInline):
    def __init__(self, text: HashTagText) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    text: HashTagText

class InlineFootnote(orgInline):
    def __init__(self, tag: hstdStr, definition: hstdOpt[orgSemId]) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    tag: hstdStr
    definition: hstdOpt[orgSemId]

class InlineExport(orgInline):
    def __init__(self, exporter: hstdStr, content: hstdStr) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    exporter: hstdStr
    content: hstdStr

class TimeRepeatMode(Enum):
    _None = 1
    Exact = 2
    FirstMatch = 3
    SameDay = 4

class TimeRepeatPeriod(Enum):
    Year = 1
    Month = 2
    Week = 3
    Day = 4
    Hour = 5
    Minute = 6

class TimeRepeat:
    def __init__(self, mode: TimeRepeatMode, period: TimeRepeatPeriod, count: int) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    mode: TimeRepeatMode
    period: TimeRepeatPeriod
    count: int

class TimeStatic:
    def __init__(self, repeat: hstdOpt[TimeRepeat], time: UserTime) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    repeat: hstdOpt[TimeRepeat]
    time: UserTime

class TimeDynamic:
    def __init__(self, expr: hstdStr) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    expr: hstdStr

TimeTimeVariant = Union[TimeStatic, TimeDynamic]
class TimeTimeKind(Enum):
    Static = 1
    Dynamic = 2

class Time(orgOrg):
    def __init__(self, isActive: bool, time: TimeTimeVariant) -> None: ...
    def getYear(self) -> hstdOpt[int]: ...
    def getMonth(self) -> hstdOpt[int]: ...
    def getDay(self) -> hstdOpt[int]: ...
    def getHour(self) -> hstdOpt[int]: ...
    def getMinute(self) -> hstdOpt[int]: ...
    def getSecond(self) -> hstdOpt[int]: ...
    def getStaticTime(self) -> UserTime: ...
    def isStatic(self) -> bool: ...
    def getStatic(self) -> TimeStatic: ...
    def isDynamic(self) -> bool: ...
    def getDynamic(self) -> TimeDynamic: ...
    @staticmethod
    def getTimeKindStatic(self, __input: TimeTimeVariant) -> TimeTimeKind: ...
    def getTimeKind(self) -> TimeTimeKind: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    isActive: bool
    time: TimeTimeVariant

class TimeRange(orgOrg):
    def __init__(self, from_: orgSemId, to: orgSemId) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    from_: orgSemId
    to: orgSemId

class Macro(orgOrg):
    def __init__(self, name: hstdStr, attrs: AttrGroup) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    name: hstdStr
    attrs: AttrGroup

class SymbolParam:
    def __init__(self, key: hstdOpt[hstdStr], value: hstdStr) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    key: hstdOpt[hstdStr]
    value: hstdStr

class Symbol(orgOrg):
    def __init__(self, name: hstdStr, parameters: hstdVec[SymbolParam], positional: hstdVec[orgSemId]) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    name: hstdStr
    parameters: hstdVec[SymbolParam]
    positional: hstdVec[orgSemId]

class Escaped(orgLeaf):
    def __init__(self, text: hstdStr) -> None: ...
    def getText(self) -> hstdStr: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    text: hstdStr

class Newline(orgLeaf):
    def __init__(self, text: hstdStr) -> None: ...
    def getText(self) -> hstdStr: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    text: hstdStr

class Space(orgLeaf):
    def __init__(self, text: hstdStr) -> None: ...
    def getText(self) -> hstdStr: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    text: hstdStr

class Word(orgLeaf):
    def __init__(self, text: hstdStr) -> None: ...
    def getText(self) -> hstdStr: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    text: hstdStr

class AtMention(orgLeaf):
    def __init__(self, text: hstdStr) -> None: ...
    def getText(self) -> hstdStr: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    text: hstdStr

class RawText(orgLeaf):
    def __init__(self, text: hstdStr) -> None: ...
    def getText(self) -> hstdStr: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    text: hstdStr

class Punctuation(orgLeaf):
    def __init__(self, text: hstdStr) -> None: ...
    def getText(self) -> hstdStr: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    text: hstdStr

class Placeholder(orgLeaf):
    def __init__(self, text: hstdStr) -> None: ...
    def getText(self) -> hstdStr: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    text: hstdStr

class BigIdent(orgLeaf):
    def __init__(self, text: hstdStr) -> None: ...
    def getText(self) -> hstdStr: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    text: hstdStr

class TextTarget(orgLeaf):
    def __init__(self, text: hstdStr) -> None: ...
    def getText(self) -> hstdStr: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    text: hstdStr

class Markup(orgOrg):
    def __init__(self) -> None: ...

class Bold(orgMarkup):
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class Underline(orgMarkup):
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class Monospace(orgMarkup):
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class MarkQuote(orgMarkup):
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class Verbatim(orgMarkup):
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class Italic(orgMarkup):
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class Strike(orgMarkup):
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class Par(orgMarkup):
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class RadioTarget(orgOrg):
    def __init__(self, words: hstdVec[hstdStr]) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    words: hstdVec[hstdStr]

class Latex(orgOrg):
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class Link(orgStmt):
    def __init__(self, description: hstdOpt[orgSemId], target: LinkTarget, attached: hstdVec[orgSemId]) -> None: ...
    def getAttached(self, kind: hstdOpt[hstdStr]) -> hstdVec[orgSemId]: ...
    def getCaption(self) -> hstdVec[orgSemId]: ...
    def getName(self) -> hstdVec[hstdStr]: ...
    def getAttrs(self, kind: hstdOpt[hstdStr]) -> hstdVec[AttrValue]: ...
    def getFirstAttr(self, kind: hstdStr) -> hstdOpt[AttrValue]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    description: hstdOpt[orgSemId]
    target: LinkTarget
    attached: hstdVec[orgSemId]

class BlockCenter(orgBlock):
    def __init__(self, attrs: hstdOpt[AttrGroup], attached: hstdVec[orgSemId]) -> None: ...
    def getAttrs(self, key: hstdOpt[hstdStr]) -> hstdVec[AttrValue]: ...
    def getFirstAttr(self, kind: hstdStr) -> hstdOpt[AttrValue]: ...
    def getAttached(self, kind: hstdOpt[hstdStr]) -> hstdVec[orgSemId]: ...
    def getCaption(self) -> hstdVec[orgSemId]: ...
    def getName(self) -> hstdVec[hstdStr]: ...
    def getAttrs(self, kind: hstdOpt[hstdStr]) -> hstdVec[AttrValue]: ...
    def getFirstAttr(self, kind: hstdStr) -> hstdOpt[AttrValue]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    attrs: hstdOpt[AttrGroup]
    attached: hstdVec[orgSemId]

class BlockQuote(orgBlock):
    def __init__(self, attrs: hstdOpt[AttrGroup], attached: hstdVec[orgSemId]) -> None: ...
    def getAttrs(self, key: hstdOpt[hstdStr]) -> hstdVec[AttrValue]: ...
    def getFirstAttr(self, kind: hstdStr) -> hstdOpt[AttrValue]: ...
    def getAttached(self, kind: hstdOpt[hstdStr]) -> hstdVec[orgSemId]: ...
    def getCaption(self) -> hstdVec[orgSemId]: ...
    def getName(self) -> hstdVec[hstdStr]: ...
    def getAttrs(self, kind: hstdOpt[hstdStr]) -> hstdVec[AttrValue]: ...
    def getFirstAttr(self, kind: hstdStr) -> hstdOpt[AttrValue]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    attrs: hstdOpt[AttrGroup]
    attached: hstdVec[orgSemId]

class BlockComment(orgStmt):
    def __init__(self, attached: hstdVec[orgSemId]) -> None: ...
    def getAttached(self, kind: hstdOpt[hstdStr]) -> hstdVec[orgSemId]: ...
    def getCaption(self) -> hstdVec[orgSemId]: ...
    def getName(self) -> hstdVec[hstdStr]: ...
    def getAttrs(self, kind: hstdOpt[hstdStr]) -> hstdVec[AttrValue]: ...
    def getFirstAttr(self, kind: hstdStr) -> hstdOpt[AttrValue]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    attached: hstdVec[orgSemId]

class BlockVerse(orgBlock):
    def __init__(self, attrs: hstdOpt[AttrGroup], attached: hstdVec[orgSemId]) -> None: ...
    def getAttrs(self, key: hstdOpt[hstdStr]) -> hstdVec[AttrValue]: ...
    def getFirstAttr(self, kind: hstdStr) -> hstdOpt[AttrValue]: ...
    def getAttached(self, kind: hstdOpt[hstdStr]) -> hstdVec[orgSemId]: ...
    def getCaption(self) -> hstdVec[orgSemId]: ...
    def getName(self) -> hstdVec[hstdStr]: ...
    def getAttrs(self, kind: hstdOpt[hstdStr]) -> hstdVec[AttrValue]: ...
    def getFirstAttr(self, kind: hstdStr) -> hstdOpt[AttrValue]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    attrs: hstdOpt[AttrGroup]
    attached: hstdVec[orgSemId]

class BlockDynamicFallback(orgBlock):
    def __init__(self, name: hstdStr, attrs: hstdOpt[AttrGroup], attached: hstdVec[orgSemId]) -> None: ...
    def getAttrs(self, key: hstdOpt[hstdStr]) -> hstdVec[AttrValue]: ...
    def getFirstAttr(self, kind: hstdStr) -> hstdOpt[AttrValue]: ...
    def getAttached(self, kind: hstdOpt[hstdStr]) -> hstdVec[orgSemId]: ...
    def getCaption(self) -> hstdVec[orgSemId]: ...
    def getName(self) -> hstdVec[hstdStr]: ...
    def getAttrs(self, kind: hstdOpt[hstdStr]) -> hstdVec[AttrValue]: ...
    def getFirstAttr(self, kind: hstdStr) -> hstdOpt[AttrValue]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    name: hstdStr
    attrs: hstdOpt[AttrGroup]
    attached: hstdVec[orgSemId]

class BlockExample(orgBlock):
    def __init__(self, attrs: hstdOpt[AttrGroup], attached: hstdVec[orgSemId]) -> None: ...
    def getAttrs(self, key: hstdOpt[hstdStr]) -> hstdVec[AttrValue]: ...
    def getFirstAttr(self, kind: hstdStr) -> hstdOpt[AttrValue]: ...
    def getAttached(self, kind: hstdOpt[hstdStr]) -> hstdVec[orgSemId]: ...
    def getCaption(self) -> hstdVec[orgSemId]: ...
    def getName(self) -> hstdVec[hstdStr]: ...
    def getAttrs(self, kind: hstdOpt[hstdStr]) -> hstdVec[AttrValue]: ...
    def getFirstAttr(self, kind: hstdStr) -> hstdOpt[AttrValue]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    attrs: hstdOpt[AttrGroup]
    attached: hstdVec[orgSemId]

class BlockExport(orgBlock):
    def __init__(self, exporter: hstdStr, content: hstdStr, attrs: hstdOpt[AttrGroup], attached: hstdVec[orgSemId]) -> None: ...
    def getPlacement(self) -> hstdOpt[hstdStr]: ...
    def getAttrs(self, key: hstdOpt[hstdStr]) -> hstdVec[AttrValue]: ...
    def getFirstAttr(self, kind: hstdStr) -> hstdOpt[AttrValue]: ...
    def getAttached(self, kind: hstdOpt[hstdStr]) -> hstdVec[orgSemId]: ...
    def getCaption(self) -> hstdVec[orgSemId]: ...
    def getName(self) -> hstdVec[hstdStr]: ...
    def getAttrs(self, kind: hstdOpt[hstdStr]) -> hstdVec[AttrValue]: ...
    def getFirstAttr(self, kind: hstdStr) -> hstdOpt[AttrValue]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    exporter: hstdStr
    content: hstdStr
    attrs: hstdOpt[AttrGroup]
    attached: hstdVec[orgSemId]

class BlockAdmonition(orgBlock):
    def __init__(self, attrs: hstdOpt[AttrGroup], attached: hstdVec[orgSemId]) -> None: ...
    def getAttrs(self, key: hstdOpt[hstdStr]) -> hstdVec[AttrValue]: ...
    def getFirstAttr(self, kind: hstdStr) -> hstdOpt[AttrValue]: ...
    def getAttached(self, kind: hstdOpt[hstdStr]) -> hstdVec[orgSemId]: ...
    def getCaption(self) -> hstdVec[orgSemId]: ...
    def getName(self) -> hstdVec[hstdStr]: ...
    def getAttrs(self, kind: hstdOpt[hstdStr]) -> hstdVec[AttrValue]: ...
    def getFirstAttr(self, kind: hstdStr) -> hstdOpt[AttrValue]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    attrs: hstdOpt[AttrGroup]
    attached: hstdVec[orgSemId]

class BlockCode(orgBlock):
    def __init__(self, lang: hstdOpt[hstdStr], switches: hstdVec[BlockCodeSwitch], exports: BlockCodeExports, result: hstdOpt[BlockCodeEvalResult], lines: hstdVec[BlockCodeLine], cache: bool, eval: bool, noweb: bool, hlines: bool, tangle: bool, attrs: hstdOpt[AttrGroup], attached: hstdVec[orgSemId]) -> None: ...
    def getAttrs(self, key: hstdOpt[hstdStr]) -> hstdVec[AttrValue]: ...
    def getFirstAttr(self, kind: hstdStr) -> hstdOpt[AttrValue]: ...
    def getAttached(self, kind: hstdOpt[hstdStr]) -> hstdVec[orgSemId]: ...
    def getCaption(self) -> hstdVec[orgSemId]: ...
    def getName(self) -> hstdVec[hstdStr]: ...
    def getAttrs(self, kind: hstdOpt[hstdStr]) -> hstdVec[AttrValue]: ...
    def getFirstAttr(self, kind: hstdStr) -> hstdOpt[AttrValue]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    lang: hstdOpt[hstdStr]
    switches: hstdVec[BlockCodeSwitch]
    exports: BlockCodeExports
    result: hstdOpt[BlockCodeEvalResult]
    lines: hstdVec[BlockCodeLine]
    cache: bool
    eval: bool
    noweb: bool
    hlines: bool
    tangle: bool
    attrs: hstdOpt[AttrGroup]
    attached: hstdVec[orgSemId]

class SubtreeLog(orgOrg):
    def __init__(self, head: SubtreeLogHead, desc: hstdOpt[orgSemId]) -> None: ...
    def setDescription(self, desc: orgSemId) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    head: SubtreeLogHead
    desc: hstdOpt[orgSemId]

class Subtree(orgOrg):
    def __init__(self, level: int, treeId: hstdOpt[hstdStr], todo: hstdOpt[hstdStr], completion: hstdOpt[SubtreeCompletion], description: hstdOpt[orgSemId], tags: hstdVec[orgSemId], title: orgSemId, logbook: hstdVec[orgSemId], properties: hstdVec[NamedProperty], closed: hstdOpt[UserTime], deadline: hstdOpt[UserTime], scheduled: hstdOpt[UserTime], isComment: bool, isArchived: bool, priority: hstdOpt[hstdStr]) -> None: ...
    def getTimePeriods(self, kinds: IntSet[SubtreePeriodKind]) -> hstdVec[SubtreePeriod]: ...
    def getProperties(self, kind: hstdStr, subkind: hstdOpt[hstdStr]) -> hstdVec[NamedProperty]: ...
    def getProperty(self, kind: hstdStr, subkind: hstdOpt[hstdStr]) -> hstdOpt[NamedProperty]: ...
    def removeProperty(self, kind: hstdStr, subkind: hstdOpt[hstdStr]) -> None: ...
    def setProperty(self, value: NamedProperty) -> None: ...
    def setPropertyStrValue(self, value: hstdStr, kind: hstdStr, subkind: hstdOpt[hstdStr]) -> None: ...
    def getCleanTitle(self) -> hstdStr: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    level: int
    treeId: hstdOpt[hstdStr]
    todo: hstdOpt[hstdStr]
    completion: hstdOpt[SubtreeCompletion]
    description: hstdOpt[orgSemId]
    tags: hstdVec[orgSemId]
    title: orgSemId
    logbook: hstdVec[orgSemId]
    properties: hstdVec[NamedProperty]
    closed: hstdOpt[UserTime]
    deadline: hstdOpt[UserTime]
    scheduled: hstdOpt[UserTime]
    isComment: bool
    isArchived: bool
    priority: hstdOpt[hstdStr]

class Cell(orgCmd):
    def __init__(self, isBlock: bool, attrs: hstdOpt[AttrGroup], attached: hstdVec[orgSemId]) -> None: ...
    def getAttrs(self, key: hstdOpt[hstdStr]) -> hstdVec[AttrValue]: ...
    def getFirstAttr(self, kind: hstdStr) -> hstdOpt[AttrValue]: ...
    def getAttached(self, kind: hstdOpt[hstdStr]) -> hstdVec[orgSemId]: ...
    def getCaption(self) -> hstdVec[orgSemId]: ...
    def getName(self) -> hstdVec[hstdStr]: ...
    def getAttrs(self, kind: hstdOpt[hstdStr]) -> hstdVec[AttrValue]: ...
    def getFirstAttr(self, kind: hstdStr) -> hstdOpt[AttrValue]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    isBlock: bool
    attrs: hstdOpt[AttrGroup]
    attached: hstdVec[orgSemId]

class Row(orgCmd):
    def __init__(self, cells: hstdVec[orgSemId], isBlock: bool, attrs: hstdOpt[AttrGroup], attached: hstdVec[orgSemId]) -> None: ...
    def getAttrs(self, key: hstdOpt[hstdStr]) -> hstdVec[AttrValue]: ...
    def getFirstAttr(self, kind: hstdStr) -> hstdOpt[AttrValue]: ...
    def getAttached(self, kind: hstdOpt[hstdStr]) -> hstdVec[orgSemId]: ...
    def getCaption(self) -> hstdVec[orgSemId]: ...
    def getName(self) -> hstdVec[hstdStr]: ...
    def getAttrs(self, kind: hstdOpt[hstdStr]) -> hstdVec[AttrValue]: ...
    def getFirstAttr(self, kind: hstdStr) -> hstdOpt[AttrValue]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    cells: hstdVec[orgSemId]
    isBlock: bool
    attrs: hstdOpt[AttrGroup]
    attached: hstdVec[orgSemId]

class Table(orgBlock):
    def __init__(self, rows: hstdVec[orgSemId], isBlock: bool, attrs: hstdOpt[AttrGroup], attached: hstdVec[orgSemId]) -> None: ...
    def getAttrs(self, key: hstdOpt[hstdStr]) -> hstdVec[AttrValue]: ...
    def getFirstAttr(self, kind: hstdStr) -> hstdOpt[AttrValue]: ...
    def getAttached(self, kind: hstdOpt[hstdStr]) -> hstdVec[orgSemId]: ...
    def getCaption(self) -> hstdVec[orgSemId]: ...
    def getName(self) -> hstdVec[hstdStr]: ...
    def getAttrs(self, kind: hstdOpt[hstdStr]) -> hstdVec[AttrValue]: ...
    def getFirstAttr(self, kind: hstdStr) -> hstdOpt[AttrValue]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    rows: hstdVec[orgSemId]
    isBlock: bool
    attrs: hstdOpt[AttrGroup]
    attached: hstdVec[orgSemId]

class Paragraph(orgStmt):
    def __init__(self, attached: hstdVec[orgSemId]) -> None: ...
    def isFootnoteDefinition(self) -> bool: ...
    def getFootnoteName(self) -> hstdOpt[hstdStr]: ...
    def hasAdmonition(self) -> bool: ...
    def getAdmonitions(self) -> hstdVec[hstdStr]: ...
    def getAdmonitionNodes(self) -> hstdVec[orgSemId]: ...
    def hasTimestamp(self) -> bool: ...
    def getTimestamps(self) -> hstdVec[UserTime]: ...
    def getTimestampNodes(self) -> hstdVec[orgSemId]: ...
    def hasLeadHashtags(self) -> bool: ...
    def getLeadHashtags(self) -> hstdVec[orgSemId]: ...
    def getBody(self) -> hstdVec[orgSemId]: ...
    def getAttached(self, kind: hstdOpt[hstdStr]) -> hstdVec[orgSemId]: ...
    def getCaption(self) -> hstdVec[orgSemId]: ...
    def getName(self) -> hstdVec[hstdStr]: ...
    def getAttrs(self, kind: hstdOpt[hstdStr]) -> hstdVec[AttrValue]: ...
    def getFirstAttr(self, kind: hstdStr) -> hstdOpt[AttrValue]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    attached: hstdVec[orgSemId]

class ColonExample(orgOrg):
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class CmdAttr(orgAttached):
    def __init__(self, target: hstdStr, attrs: hstdOpt[AttrGroup], attached: hstdVec[orgSemId]) -> None: ...
    def getAttrs(self, key: hstdOpt[hstdStr]) -> hstdVec[AttrValue]: ...
    def getFirstAttr(self, kind: hstdStr) -> hstdOpt[AttrValue]: ...
    def getAttached(self, kind: hstdOpt[hstdStr]) -> hstdVec[orgSemId]: ...
    def getCaption(self) -> hstdVec[orgSemId]: ...
    def getName(self) -> hstdVec[hstdStr]: ...
    def getAttrs(self, kind: hstdOpt[hstdStr]) -> hstdVec[AttrValue]: ...
    def getFirstAttr(self, kind: hstdStr) -> hstdOpt[AttrValue]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    target: hstdStr
    attrs: hstdOpt[AttrGroup]
    attached: hstdVec[orgSemId]

class CmdExport(orgAttached):
    def __init__(self, exporter: hstdStr, content: hstdStr, attrs: hstdOpt[AttrGroup], attached: hstdVec[orgSemId]) -> None: ...
    def getAttrs(self, key: hstdOpt[hstdStr]) -> hstdVec[AttrValue]: ...
    def getFirstAttr(self, kind: hstdStr) -> hstdOpt[AttrValue]: ...
    def getAttached(self, kind: hstdOpt[hstdStr]) -> hstdVec[orgSemId]: ...
    def getCaption(self) -> hstdVec[orgSemId]: ...
    def getName(self) -> hstdVec[hstdStr]: ...
    def getAttrs(self, kind: hstdOpt[hstdStr]) -> hstdVec[AttrValue]: ...
    def getFirstAttr(self, kind: hstdStr) -> hstdOpt[AttrValue]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    exporter: hstdStr
    content: hstdStr
    attrs: hstdOpt[AttrGroup]
    attached: hstdVec[orgSemId]

class Call(orgOrg):
    def __init__(self, name: hstdStr, attrs: AttrGroup, isCommand: bool) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    name: hstdStr
    attrs: AttrGroup
    isCommand: bool

class List(orgStmt):
    def __init__(self, attached: hstdVec[orgSemId]) -> None: ...
    def getListAttrs(self, key: hstdStr) -> hstdVec[AttrValue]: ...
    def getListFormattingMode(self) -> ListFormattingMode: ...
    def isDescriptionList(self) -> bool: ...
    def isNumberedList(self) -> bool: ...
    def getAttached(self, kind: hstdOpt[hstdStr]) -> hstdVec[orgSemId]: ...
    def getCaption(self) -> hstdVec[orgSemId]: ...
    def getName(self) -> hstdVec[hstdStr]: ...
    def getAttrs(self, kind: hstdOpt[hstdStr]) -> hstdVec[AttrValue]: ...
    def getFirstAttr(self, kind: hstdStr) -> hstdOpt[AttrValue]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    attached: hstdVec[orgSemId]

class ListItemCheckbox(Enum):
    _None = 1
    Done = 2
    Empty = 3
    Partial = 4

class ListItem(orgOrg):
    def __init__(self, checkbox: ListItemCheckbox, header: hstdOpt[orgSemId], bullet: hstdOpt[hstdStr]) -> None: ...
    def isDescriptionItem(self) -> bool: ...
    def getCleanHeader(self) -> hstdOpt[hstdStr]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    checkbox: ListItemCheckbox
    header: hstdOpt[orgSemId]
    bullet: hstdOpt[hstdStr]

class DocumentOptions(orgOrg):
    def __init__(self, initialVisibility: InitialSubtreeVisibility, properties: hstdVec[NamedProperty], exportConfig: DocumentExportConfig, fixedWidthSections: hstdOpt[bool], startupIndented: hstdOpt[bool], category: hstdOpt[hstdStr], setupfile: hstdOpt[hstdStr], maxSubtreeLevelExport: hstdOpt[int], columns: hstdOpt[ColumnView]) -> None: ...
    def getProperties(self, kind: hstdStr, subKind: hstdOpt[hstdStr]) -> hstdVec[NamedProperty]: ...
    def getProperty(self, kind: hstdStr, subKind: hstdOpt[hstdStr]) -> hstdOpt[NamedProperty]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    initialVisibility: InitialSubtreeVisibility
    properties: hstdVec[NamedProperty]
    exportConfig: DocumentExportConfig
    fixedWidthSections: hstdOpt[bool]
    startupIndented: hstdOpt[bool]
    category: hstdOpt[hstdStr]
    setupfile: hstdOpt[hstdStr]
    maxSubtreeLevelExport: hstdOpt[int]
    columns: hstdOpt[ColumnView]

class Document(orgOrg):
    def __init__(self, title: hstdOpt[orgSemId], author: hstdOpt[orgSemId], creator: hstdOpt[orgSemId], filetags: hstdVec[orgSemId], email: hstdOpt[orgSemId], language: hstdVec[hstdStr], options: orgSemId, exportFileName: hstdOpt[hstdStr]) -> None: ...
    def getProperties(self, kind: hstdStr, subKind: hstdOpt[hstdStr]) -> hstdVec[NamedProperty]: ...
    def getProperty(self, kind: hstdStr, subKind: hstdOpt[hstdStr]) -> hstdOpt[NamedProperty]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    title: hstdOpt[orgSemId]
    author: hstdOpt[orgSemId]
    creator: hstdOpt[orgSemId]
    filetags: hstdVec[orgSemId]
    email: hstdOpt[orgSemId]
    language: hstdVec[hstdStr]
    options: orgSemId
    exportFileName: hstdOpt[hstdStr]

class FileTarget(orgOrg):
    def __init__(self, path: hstdStr, line: hstdOpt[int], searchTarget: hstdOpt[hstdStr], restrictToHeadlines: bool, targetId: hstdOpt[hstdStr], regexp: hstdOpt[hstdStr]) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    path: hstdStr
    line: hstdOpt[int]
    searchTarget: hstdOpt[hstdStr]
    restrictToHeadlines: bool
    targetId: hstdOpt[hstdStr]
    regexp: hstdOpt[hstdStr]

class TextSeparator(orgOrg):
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class DocumentGroup(orgOrg):
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class FileDocument:
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class FileAttachment:
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class FileSource:
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

FileData = Union[FileDocument, FileAttachment, FileSource]
class FileKind(Enum):
    Document = 1
    Attachment = 2
    Source = 3

class File(orgOrg):
    def __init__(self, relPath: hstdStr, absPath: hstdStr, data: FileData) -> None: ...
    def isDocument(self) -> bool: ...
    def getDocument(self) -> FileDocument: ...
    def isAttachment(self) -> bool: ...
    def getAttachment(self) -> FileAttachment: ...
    def isSource(self) -> bool: ...
    def getSource(self) -> FileSource: ...
    @staticmethod
    def getFileKindStatic(self, __input: FileData) -> FileKind: ...
    def getFileKind(self) -> FileKind: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    relPath: hstdStr
    absPath: hstdStr
    data: FileData

class Directory(orgOrg):
    def __init__(self, relPath: hstdStr, absPath: hstdStr) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    relPath: hstdStr
    absPath: hstdStr

class Symlink(orgOrg):
    def __init__(self, isDirectory: bool, absPath: hstdStr) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    isDirectory: bool
    absPath: hstdStr

class CmdIncludeIncludeBase:
    def __init__(self) -> None: ...
    def IncludeBase(self) ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class CmdIncludeExample(CmdIncludeIncludeBase):
    def __init__(self) -> None: ...
    def Example(self) ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class CmdIncludeExport(CmdIncludeIncludeBase):
    def __init__(self, language: hstdStr) -> None: ...
    def Export(self) ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    language: hstdStr

class CmdIncludeCustom(CmdIncludeIncludeBase):
    def __init__(self, blockName: hstdStr) -> None: ...
    def Custom(self) ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    blockName: hstdStr

class CmdIncludeSrc(CmdIncludeIncludeBase):
    def __init__(self, language: hstdStr) -> None: ...
    def Src(self) ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    language: hstdStr

class CmdIncludeOrgDocument(CmdIncludeIncludeBase):
    def __init__(self, onlyContent: hstdOpt[bool], subtreePath: hstdOpt[SubtreePath], minLevel: hstdOpt[int], customIdTarget: hstdOpt[hstdStr]) -> None: ...
    def OrgDocument(self) ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    onlyContent: hstdOpt[bool]
    subtreePath: hstdOpt[SubtreePath]
    minLevel: hstdOpt[int]
    customIdTarget: hstdOpt[hstdStr]

CmdIncludeData = Union[CmdIncludeExample, CmdIncludeExport, CmdIncludeCustom, CmdIncludeSrc, CmdIncludeOrgDocument]
class CmdIncludeKind(Enum):
    Example = 1
    Export = 2
    Custom = 3
    Src = 4
    OrgDocument = 5

class CmdInclude(orgOrg):
    def __init__(self, path: hstdStr, firstLine: hstdOpt[int], lastLine: hstdOpt[int], data: CmdIncludeData) -> None: ...
    def isExample(self) -> bool: ...
    def getExample(self) -> CmdIncludeExample: ...
    def isExport(self) -> bool: ...
    def getExport(self) -> CmdIncludeExport: ...
    def isCustom(self) -> bool: ...
    def getCustom(self) -> CmdIncludeCustom: ...
    def isSrc(self) -> bool: ...
    def getSrc(self) -> CmdIncludeSrc: ...
    def isOrgDocument(self) -> bool: ...
    def getOrgDocument(self) -> CmdIncludeOrgDocument: ...
    @staticmethod
    def getIncludeKindStatic(self, __input: CmdIncludeData) -> CmdIncludeKind: ...
    def getIncludeKind(self) -> CmdIncludeKind: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    path: hstdStr
    firstLine: hstdOpt[int]
    lastLine: hstdOpt[int]
    data: CmdIncludeData

class ListFormattingMode(Enum):
    _None = 1
    Table1D1Col = 2
    Table1D2Col = 3
    Table2DColFirst = 4

class InitialSubtreeVisibility(Enum):
    Overview = 1
    Content = 2
    ShowAll = 3
    Show2Levels = 4
    Show3Levels = 5
    Show4Levels = 6
    Show5Levels = 7
    ShowEverything = 8

class BlockCodeResults(Enum):
    Replace = 1

class BlockCodeExports(Enum):
    _None = 1
    Both = 2
    Code = 3
    Results = 4

class OrgSpecName(Enum):
    Unnamed = 1
    Result = 2
    Year = 3
    Day = 4
    Clock = 5
    Repeater = 6
    Zone = 7
    Link = 8
    Tags = 9
    Tag = 10
    State = 11
    Protocol = 12
    Desc = 13
    Times = 14
    Drawer = 15
    Args = 16
    Name = 17
    Definition = 18
    Body = 19
    HeaderArgs = 20
    File = 21
    Kind = 22
    Lang = 23
    Prefix = 24
    Text = 25
    Todo = 26
    Importance = 27
    Title = 28
    Completion = 29
    Head = 30
    Subnodes = 31
    Properties = 32
    Logbook = 33
    Description = 34
    Logs = 35
    Newstate = 36
    Oldstate = 37
    Time = 38
    From = 39
    EndArgs = 40
    Flags = 41
    Value = 42
    Assoc = 43
    Main = 44
    Hash = 45
    Bullet = 46
    Counter = 47
    Checkbox = 48
    Header = 49
    To = 50
    Diff = 51
    Property = 52
    Subname = 53
    Values = 54
    Cells = 55
    Rows = 56
    Lines = 57
    Chunks = 58

class OrgNodeKind(Enum):
    _None = 1
    Document = 2
    Empty = 3
    InlineStmtList = 4
    StmtList = 5
    Checkbox = 6
    List = 7
    Bullet = 8
    ListItem = 9
    ListTag = 10
    Counter = 11
    File = 12
    ColonExample = 13
    TextSeparator = 14
    Paragraph = 15
    TableRow = 16
    TableCell = 17
    Table = 18
    InlineFootnote = 19
    Footnote = 20
    Cmd = 21
    Attrs = 22
    CmdTitle = 23
    CmdAuthor = 24
    CmdCreator = 25
    CmdInclude = 26
    CmdLanguage = 27
    CmdAttr = 28
    CmdStartup = 29
    CmdName = 30
    CmdCustomTextCommand = 31
    CmdCustomArgsCommand = 32
    CmdCustomRawCommand = 33
    CmdResults = 34
    CmdHeader = 35
    CmdOptions = 36
    CmdTblfm = 37
    CmdCaption = 38
    CmdResult = 39
    CmdCallCode = 40
    CmdFlag = 41
    CmdKey = 42
    CmdValue = 43
    CmdNamedValue = 44
    CmdLatexClass = 45
    CmdLatexHeader = 46
    CmdLatexCompiler = 47
    CmdLatexClassOptions = 48
    CmdHtmlHead = 49
    CmdColumns = 50
    CmdPropertyArgs = 51
    CmdPropertyText = 52
    CmdPropertyRaw = 53
    CmdFiletags = 54
    BlockVerbatimMultiline = 55
    CodeLine = 56
    CodeText = 57
    CodeTangle = 58
    CodeCallout = 59
    BlockCode = 60
    BlockQuote = 61
    BlockComment = 62
    BlockCenter = 63
    BlockVerse = 64
    BlockExample = 65
    BlockExport = 66
    BlockDetails = 67
    BlockSummary = 68
    BlockDynamicFallback = 69
    BigIdent = 70
    Bold = 71
    ErrorWrap = 72
    ErrorToken = 73
    Italic = 74
    Verbatim = 75
    Backtick = 76
    Underline = 77
    Strike = 78
    Quote = 79
    Angle = 80
    Monospace = 81
    Par = 82
    InlineMath = 83
    DisplayMath = 84
    Space = 85
    Punctuation = 86
    Colon = 87
    Word = 88
    Escaped = 89
    Newline = 90
    RawLink = 91
    Link = 92
    Macro = 93
    Symbol = 94
    StaticActiveTime = 95
    StaticInactiveTime = 96
    DynamicActiveTime = 97
    DynamicInactiveTime = 98
    TimeRange = 99
    SimpleTime = 100
    HashTag = 101
    MetaSymbol = 102
    AtMention = 103
    Placeholder = 104
    RadioTarget = 105
    Target = 106
    SrcInlineCode = 107
    InlineCallCode = 108
    InlineExport = 109
    InlineComment = 110
    RawText = 111
    SubtreeDescription = 112
    SubtreeUrgency = 113
    DrawerLogbook = 114
    Drawer = 115
    DrawerPropertyList = 116
    DrawerProperty = 117
    Subtree = 118
    SubtreeTimes = 119
    SubtreeStars = 120
    SubtreeCompletion = 121
    SubtreeImportance = 122

class OrgJsonKind(Enum):
    Null = 1
    Object = 2
    Array = 3
    String = 4
    Boolean = 5
    Int = 6
    Float = 7

class OrgSemKind(Enum):
    _None = 1
    ErrorItem = 2
    ErrorGroup = 3
    StmtList = 4
    Empty = 5
    CmdCaption = 6
    CmdColumns = 7
    CmdName = 8
    CmdCustomArgs = 9
    CmdCustomRaw = 10
    CmdCustomText = 11
    CmdResults = 12
    CmdTblfm = 13
    HashTag = 14
    InlineFootnote = 15
    InlineExport = 16
    Time = 17
    TimeRange = 18
    Macro = 19
    Symbol = 20
    Escaped = 21
    Newline = 22
    Space = 23
    Word = 24
    AtMention = 25
    RawText = 26
    Punctuation = 27
    Placeholder = 28
    BigIdent = 29
    TextTarget = 30
    Bold = 31
    Underline = 32
    Monospace = 33
    MarkQuote = 34
    Verbatim = 35
    Italic = 36
    Strike = 37
    Par = 38
    RadioTarget = 39
    Latex = 40
    Link = 41
    BlockCenter = 42
    BlockQuote = 43
    BlockComment = 44
    BlockVerse = 45
    BlockDynamicFallback = 46
    BlockExample = 47
    BlockExport = 48
    BlockAdmonition = 49
    BlockCode = 50
    SubtreeLog = 51
    Subtree = 52
    Cell = 53
    Row = 54
    Table = 55
    Paragraph = 56
    ColonExample = 57
    CmdAttr = 58
    CmdExport = 59
    Call = 60
    List = 61
    ListItem = 62
    DocumentOptions = 63
    Document = 64
    FileTarget = 65
    TextSeparator = 66
    DocumentGroup = 67
    File = 68
    Directory = 69
    Symlink = 70
    CmdInclude = 71

class UserTimeBreakdown:
    def __init__(self, year: Optional[int], month: Optional[int], day: Optional[int], hour: Optional[int], minute: Optional[int], second: Optional[int], zone: Optional[str]) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    year: Optional[int]
    month: Optional[int]
    day: Optional[int]
    hour: Optional[int]
    minute: Optional[int]
    second: Optional[int]
    zone: Optional[str]

class UserTime:
    def __init__(self) -> None: ...
    def getBreakdown(self) -> UserTimeBreakdown: ...
    def format(self) -> str: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class OrgJson:
    def __init__(self) -> None: ...
    def getKind(self) -> OrgJsonKind: ...
    def at(self, idx: int) -> OrgJson: ...
    def at(self, name: str) -> OrgJson: ...
    def getString(self) -> str: ...
    def getField(self, name: str) -> OrgJson: ...
    def getItem(self, index: int) -> OrgJson: ...
    def getInt(self) -> int: ...
    def getBool(self) -> bool: ...
    def getArray(self) -> List[OrgJson]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class OrgParseParameters:
    def __init__(self, baseTokenTracePath: Optional[str], tokenTracePath: Optional[str], parseTracePath: Optional[str], semTracePath: Optional[str]) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    baseTokenTracePath: Optional[str]
    tokenTracePath: Optional[str]
    parseTracePath: Optional[str]
    semTracePath: Optional[str]

class OrgDirectoryParseParameters:
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class OrgYamlExportOpts:
    def __init__(self, skipNullFields: bool, skipFalseFields: bool, skipZeroFields: bool, skipLocation: bool, skipId: bool) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    skipNullFields: bool
    skipFalseFields: bool
    skipZeroFields: bool
    skipLocation: bool
    skipId: bool

class OrgTreeExportOpts:
    def __init__(self, withLineCol: bool, withOriginalId: bool, withSubnodeIdx: bool, skipEmptyFields: bool, startLevel: int, withColor: bool, maxDepth: int) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    withLineCol: bool
    withOriginalId: bool
    withSubnodeIdx: bool
    skipEmptyFields: bool
    startLevel: int
    withColor: bool
    maxDepth: int

class AstTrackingPath:
    def __init__(self, path: List[Org]) -> None: ...
    def getParent(self, offset: int) -> Org: ...
    def getNode(self) -> Org: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    path: List[Org]

class AstTrackingAlternatives:
    def __init__(self) -> None: ...
    def getAllNodes(self) -> List[Org]: ...
    def getNode(self) -> Org: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class AstTrackingGroup:
    def __init__(self) -> None: ...
    def getRadioTarget(self) -> AstTrackingGroupRadioTarget: ...
    def getTrackedHashtag(self) -> AstTrackingGroupTrackedHashtag: ...
    def getSingle(self) -> AstTrackingGroupSingle: ...
    def getRadioTarget(self) -> AstTrackingGroupRadioTarget: ...
    def getSingle(self) -> AstTrackingGroupSingle: ...
    def isSingle(self) -> bool: ...
    def isTrackedHashtag(self) -> bool: ...
    def isRadioTarget(self) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class AstTrackingGroupRadioTarget:
    def __init__(self, target: AstTrackingPath, nodes: List[Org]) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    target: AstTrackingPath
    nodes: List[Org]

class AstTrackingGroupSingle:
    def __init__(self, node: Org) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    node: Org

class AstTrackingGroupTrackedHashtag:
    def __init__(self, tag: Org, targets: Dict[HashTagFlat, AstTrackingPath]) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    tag: Org
    targets: Dict[HashTagFlat, AstTrackingPath]

class AstTrackingMap:
    def __init__(self, footnotes: Dict[str, AstTrackingAlternatives], subtrees: Dict[str, AstTrackingAlternatives], names: Dict[str, AstTrackingAlternatives], anchorTargets: Dict[str, AstTrackingAlternatives], radioTargets: Dict[str, AstTrackingAlternatives], hashtagDefinitions: Dict[HashTagFlat, AstTrackingAlternatives]) -> None: ...
    def getIdPath(self, id: str) -> Optional[AstTrackingAlternatives]: ...
    def getNamePath(self, id: str) -> Optional[AstTrackingAlternatives]: ...
    def getAnchorTarget(self, id: str) -> Optional[AstTrackingAlternatives]: ...
    def getFootnotePath(self, id: str) -> Optional[AstTrackingAlternatives]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    footnotes: Dict[str, AstTrackingAlternatives]
    subtrees: Dict[str, AstTrackingAlternatives]
    names: Dict[str, AstTrackingAlternatives]
    anchorTargets: Dict[str, AstTrackingAlternatives]
    radioTargets: Dict[str, AstTrackingAlternatives]
    hashtagDefinitions: Dict[HashTagFlat, AstTrackingAlternatives]

class SequenceSegment:
    def __init__(self, kind: int, first: int, last: int) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    kind: int
    first: int
    last: int

class SequenceSegmentGroup:
    def __init__(self, kind: int, segments: List[SequenceSegment]) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    kind: int
    segments: List[SequenceSegment]

class SequenceAnnotationTag:
    def __init__(self, groupKind: int, segmentKinds: List[int]) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    groupKind: int
    segmentKinds: List[int]

class SequenceAnnotation:
    def __init__(self, first: int, last: int, annotations: List[SequenceAnnotationTag]) -> None: ...
    def isAnnotatedWith(self, groupKind: int, segmentKind: int) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    first: int
    last: int
    annotations: List[SequenceAnnotationTag]

class ExporterPython:
    def __init__(self) -> None: ...
    def enableBufferTrace(self) -> None: ...
    def getTraceBuffer(self) -> str: ...
    def enableFileTrace(self, path: str, colored: bool) -> None: ...
    def setVisitAnyIdAround(self, cb: function) -> None: ...
    def setVisitAnyIdIn(self, cb: function) -> None: ...
    def setVisitAnyField(self, cb: function) -> None: ...
    def setEvalTopCb(self, cb: function) -> None: ...
    def setVisitIdAround(self, kind: OrgSemKind, cb: function) -> None: ...
    def setEvalIdAround(self, kind: OrgSemKind, cb: function) -> None: ...
    def setVisitIdInCb(self, kind: OrgSemKind, cb: function) -> None: ...
    def setEvalIdIn(self, kind: OrgSemKind, cb: function) -> None: ...
    def setVisitLeafField(self, kind: LeafFieldType, cb: function) -> None: ...
    def setEvalLeafField(self, kind: LeafFieldType, cb: function) -> None: ...
    def setVisitOrgField(self, kind: OrgSemKind, cb: function) -> None: ...
    def setEvalOrgField(self, kind: OrgSemKind, cb: function) -> None: ...
    def setSelf(self, val: object) -> None: ...
    def setNewOrgRes(self, kind: OrgSemKind, cb: function) -> None: ...
    def setNewAnyOrgRes(self, cb: function) -> None: ...
    def setNewLeafRes(self, kind: LeafFieldType, cb: function) -> None: ...
    def setNewAnyLeafRes(self, cb: function) -> None: ...
    def setPushVisitAnyId(self, cb: function) -> None: ...
    def setPopVisitAnyId(self, cb: function) -> None: ...
    def setPushVisitId(self, kind: OrgSemKind, cb: function) -> None: ...
    def setPopVisitIdCb(self, kind: OrgSemKind, cb: function) -> None: ...
    def setVisitAnyHookCb(self, cb: function) -> None: ...
    def setVisitIdHook(self, kind: OrgSemKind, cb: function) -> None: ...
    def print_trace(self, trace: str, file: str, function: str, line: int) -> None: ...
    def evalTop(self, org: Org) -> ExporterPythonRes: ...
    def eval(self, org: Org) -> ExporterPythonRes: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class AstTrackingGroupKind(Enum):
    RadioTarget = 1
    Single = 2
    TrackedHashtag = 3

class LeafFieldType(Enum):
    Int = 1
    UserTimeKind = 2
    QDate = 3
    Bool = 4
    FixedIdVec = 5
    TopIdVec = 6
    QDateTime = 7
    Str = 8
    Any = 9

def newSemTimeStatic(breakdown: UserTimeBreakdown, isActive: bool) -> Time: ...

def parseFile(file: str, opts: OrgParseParameters) -> Document: ...

def parseString(text: str) -> Document: ...

def parseStringOpts(text: str, opts: OrgParseParameters) -> Document: ...

def parseDirectoryOpts(path: str, opts: OrgDirectoryParseParameters) -> Optional[Org]: ...

def parseFileWithIncludes(file: str, opts: OrgDirectoryParseParameters) -> File: ...

def asOneNode(arg: OrgArg) -> Org: ...

def formatToString(arg: Org) -> str: ...

def exportToYamlString(node: Org, opts: OrgYamlExportOpts) -> str: ...

def exportToYamlFile(node: Org, path: str, opts: OrgYamlExportOpts) -> None: ...

def exportToJsonString(node: Org) -> str: ...

def exportToJsonFile(node: Org, path: str) -> None: ...

def readProtobufFile(file: str) -> Document: ...

def exportToProtobufFile(doc: Document, file: str) -> None: ...

def exportToTreeString(node: Org, opts: OrgTreeExportOpts) -> str: ...

def exportToTreeFile(node: Org, path: str, opts: OrgTreeExportOpts) -> None: ...

def getAstTrackingMap(nodes: List[Org]) -> AstTrackingMap: ...

def getSubnodeGroups(node: Org, map: AstTrackingMap) -> List[AstTrackingGroup]: ...

def annotateSequence(groups: List[SequenceSegmentGroup], first: int, last: int) -> List[SequenceAnnotation]: ...

def eachSubnodeRec(node: Org, callback: function) -> None: ...

def eachSubnodeRecSimplePath(node: Org, callback: function) -> None: ...
