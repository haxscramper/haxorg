from typing import *
from enum import Enum
from datetime import datetime, date, time
class Org:
    def __init__(self, loc: Optional[LineCol], documentId: Optional[int], subnodes: List[Org]) -> None: ...
    def getKind(self) -> OrgSemKind: ...
    def isGenerated(self) -> bool: ...
    def push_back(self, sub: Org) -> None: ...
    def insert(self, pos: int, node: Org) -> None: ...
    def at(self, idx: int) -> Org: ...
    def is_(self, kind: OrgSemKind) -> bool: ...
    def __getitem__(self, idx: int) -> Org: ...
    def __iter__(self, node: Org) -> auto: ...
    loc: Optional[LineCol]
    documentId: Optional[int]
    subnodes: List[Org]

class LineCol:
    def __init__(self, line: int, column: int, pos: int) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    line: int
    column: int
    pos: int

class TblfmExprAxisRef:
    def __init__(self, colIndex: Optional[int], rowIndex: Optional[int], colFromTop: bool, rowFromTop: bool) -> None: ...
    def operator==(self, other: TblfmExprAxisRef) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    colIndex: Optional[int]
    rowIndex: Optional[int]
    colFromTop: bool
    rowFromTop: bool

class TblfmExprRangeRef:
    def __init__(self, first: Optional[TblfmExprAxisRef], last: Optional[TblfmExprAxisRef]) -> None: ...
    def operator==(self, other: TblfmExprRangeRef) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    first: Optional[TblfmExprAxisRef]
    last: Optional[TblfmExprAxisRef]

class TblfmExprCall:
    def __init__(self, name: str, args: List[TblfmExpr]) -> None: ...
    def operator==(self, other: TblfmExprCall) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    name: str
    args: List[TblfmExpr]

class TblfmExprElisp:
    def __init__(self, value: str) -> None: ...
    def operator==(self, other: TblfmExprElisp) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    value: str

class TblfmExprAssignFlag(Enum):
    CellLeftAlign = 1
    CellRightAlign = 2
    CellCenterAlign = 3
    CellNumber = 4
    CellExponential = 5
    CellFloating = 6
    CellUnformat = 7
    CellText = 8
    CellBool = 9
    CellDecimal = 10
    CellPercentage = 11
    CellHours = 12
    CellZero = 13
    CellMarkInvalid = 14
    CellQuote = 15

class TblfmExprAssign:
    def __init__(self, target: TblfmExprAxisRef, expr: List[TblfmExpr], flags: List[TblfmExprAssignFlag]) -> None: ...
    def operator==(self, other: TblfmExprAssign) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    target: TblfmExprAxisRef
    expr: List[TblfmExpr]
    flags: List[TblfmExprAssignFlag]

TblfmExprData = Union[TblfmExprAxisRef, TblfmExprRangeRef, TblfmExprCall, TblfmExprElisp, TblfmExprAssign]
class TblfmExprKind(Enum):
    AxisRef = 1
    RangeRef = 2
    Call = 3
    Elisp = 4
    Assign = 5

class TblfmExpr:
    def __init__(self, data: TblfmExprData) -> None: ...
    def operator==(self, other: TblfmExpr) -> bool: ...
    def isAxisRef(self) -> bool: ...
    def getAxisRef(self) -> TblfmExprAxisRef: ...
    def isRangeRef(self) -> bool: ...
    def getRangeRef(self) -> TblfmExprRangeRef: ...
    def isCall(self) -> bool: ...
    def getCall(self) -> TblfmExprCall: ...
    def isElisp(self) -> bool: ...
    def getElisp(self) -> TblfmExprElisp: ...
    def isAssign(self) -> bool: ...
    def getAssign(self) -> TblfmExprAssign: ...
    @staticmethod
    def getKindStatic(self, __input: TblfmExprData) -> TblfmExprKind: ...
    def getKind(self) -> TblfmExprKind: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    data: TblfmExprData

class Tblfm:
    def __init__(self, exprs: List[TblfmExpr]) -> None: ...
    def operator==(self, other: Tblfm) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    exprs: List[TblfmExpr]

class AttrValue:
    def __init__(self, name: Optional[str], varname: Optional[str], value: str) -> None: ...
    def getBool(self) -> Optional[bool]: ...
    def getInt(self) -> Optional[int]: ...
    def getString(self) -> str: ...
    def operator==(self, other: AttrValue) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    name: Optional[str]
    varname: Optional[str]
    value: str

class SubtreePath:
    def __init__(self, path: List[str]) -> None: ...
    def operator==(self, other: SubtreePath) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    path: List[str]

class BlockCodeLinePartRaw:
    def __init__(self, code: str) -> None: ...
    def operator==(self, other: BlockCodeLinePartRaw) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    code: str

class BlockCodeLinePartCallout:
    def __init__(self, name: str) -> None: ...
    def operator==(self, other: BlockCodeLinePartCallout) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    name: str

class BlockCodeLinePartTangle:
    def __init__(self, target: str) -> None: ...
    def operator==(self, other: BlockCodeLinePartTangle) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    target: str

BlockCodeLinePartData = Union[BlockCodeLinePartRaw, BlockCodeLinePartCallout, BlockCodeLinePartTangle]
class BlockCodeLinePartKind(Enum):
    Raw = 1
    Callout = 2
    Tangle = 3

class BlockCodeLinePart:
    def __init__(self, data: BlockCodeLinePartData) -> None: ...
    def operator==(self, other: BlockCodeLinePart) -> bool: ...
    def isRaw(self) -> bool: ...
    def getRaw(self) -> BlockCodeLinePartRaw: ...
    def isCallout(self) -> bool: ...
    def getCallout(self) -> BlockCodeLinePartCallout: ...
    def isTangle(self) -> bool: ...
    def getTangle(self) -> BlockCodeLinePartTangle: ...
    @staticmethod
    def getKindStatic(self, __input: BlockCodeLinePartData) -> BlockCodeLinePartKind: ...
    def getKind(self) -> BlockCodeLinePartKind: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    data: BlockCodeLinePartData

class BlockCodeLine:
    def __init__(self, parts: List[BlockCodeLinePart]) -> None: ...
    def operator==(self, other: BlockCodeLine) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    parts: List[BlockCodeLinePart]

class BlockCodeSwitchLineStart:
    def __init__(self, start: int, extendLast: bool) -> None: ...
    def operator==(self, other: BlockCodeSwitchLineStart) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    start: int
    extendLast: bool

class BlockCodeSwitchCalloutFormat:
    def __init__(self, format: str) -> None: ...
    def operator==(self, other: BlockCodeSwitchCalloutFormat) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    format: str

class BlockCodeSwitchRemoveCallout:
    def __init__(self, remove: bool) -> None: ...
    def operator==(self, other: BlockCodeSwitchRemoveCallout) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    remove: bool

class BlockCodeSwitchEmphasizeLine:
    def __init__(self, line: List[int]) -> None: ...
    def operator==(self, other: BlockCodeSwitchEmphasizeLine) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    line: List[int]

class BlockCodeSwitchDedent:
    def __init__(self, value: int) -> None: ...
    def operator==(self, other: BlockCodeSwitchDedent) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    value: int

BlockCodeSwitchData = Union[BlockCodeSwitchLineStart, BlockCodeSwitchCalloutFormat, BlockCodeSwitchRemoveCallout, BlockCodeSwitchEmphasizeLine, BlockCodeSwitchDedent]
class BlockCodeSwitchKind(Enum):
    LineStart = 1
    CalloutFormat = 2
    RemoveCallout = 3
    EmphasizeLine = 4
    Dedent = 5

class BlockCodeSwitch:
    def __init__(self, data: BlockCodeSwitchData) -> None: ...
    def operator==(self, other: BlockCodeSwitch) -> bool: ...
    def isLineStart(self) -> bool: ...
    def getLineStart(self) -> BlockCodeSwitchLineStart: ...
    def isCalloutFormat(self) -> bool: ...
    def getCalloutFormat(self) -> BlockCodeSwitchCalloutFormat: ...
    def isRemoveCallout(self) -> bool: ...
    def getRemoveCallout(self) -> BlockCodeSwitchRemoveCallout: ...
    def isEmphasizeLine(self) -> bool: ...
    def getEmphasizeLine(self) -> BlockCodeSwitchEmphasizeLine: ...
    def isDedent(self) -> bool: ...
    def getDedent(self) -> BlockCodeSwitchDedent: ...
    @staticmethod
    def getKindStatic(self, __input: BlockCodeSwitchData) -> BlockCodeSwitchKind: ...
    def getKind(self) -> BlockCodeSwitchKind: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    data: BlockCodeSwitchData

class BlockCodeEvalResultNone:
    def __init__(self) -> None: ...
    def operator==(self, other: BlockCodeEvalResultNone) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class BlockCodeEvalResultOrgValue:
    def __init__(self, value: str) -> None: ...
    def operator==(self, other: BlockCodeEvalResultOrgValue) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    value: str

class BlockCodeEvalResultFile:
    def __init__(self, path: str) -> None: ...
    def operator==(self, other: BlockCodeEvalResultFile) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    path: str

class BlockCodeEvalResultRaw:
    def __init__(self, text: str) -> None: ...
    def operator==(self, other: BlockCodeEvalResultRaw) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    text: str

BlockCodeEvalResultData = Union[BlockCodeEvalResultNone, BlockCodeEvalResultOrgValue, BlockCodeEvalResultFile, BlockCodeEvalResultRaw]
class BlockCodeEvalResultKind(Enum):
    _None = 1
    OrgValue = 2
    File = 3
    Raw = 4

class BlockCodeEvalResult:
    def __init__(self, data: BlockCodeEvalResultData) -> None: ...
    def operator==(self, other: BlockCodeEvalResult) -> bool: ...
    def isNone(self) -> bool: ...
    def getNone(self) -> BlockCodeEvalResultNone: ...
    def isOrgValue(self) -> bool: ...
    def getOrgValue(self) -> BlockCodeEvalResultOrgValue: ...
    def isFile(self) -> bool: ...
    def getFile(self) -> BlockCodeEvalResultFile: ...
    def isRaw(self) -> bool: ...
    def getRaw(self) -> BlockCodeEvalResultRaw: ...
    @staticmethod
    def getKindStatic(self, __input: BlockCodeEvalResultData) -> BlockCodeEvalResultKind: ...
    def getKind(self) -> BlockCodeEvalResultKind: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    data: BlockCodeEvalResultData

class DocumentExportConfigTaskExport:
    def __init__(self, taskWhitelist: List[str]) -> None: ...
    def operator==(self, other: DocumentExportConfigTaskExport) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    taskWhitelist: List[str]

class DocumentExportConfigTagExport(Enum):
    _None = 1
    All = 2
    NotInToc = 3

class DocumentExportConfigTaskFiltering(Enum):
    Whitelist = 1
    Done = 2
    _None = 3
    All = 4

class DocumentExportConfigBrokenLinks(Enum):
    Mark = 1
    Raise = 2
    Ignore = 3

class DocumentExportConfigDoExport:
    def __init__(self, exportToc: bool) -> None: ...
    def operator==(self, other: DocumentExportConfigDoExport) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    exportToc: bool

class DocumentExportConfigExportFixed:
    def __init__(self, exportLevels: int) -> None: ...
    def operator==(self, other: DocumentExportConfigExportFixed) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    exportLevels: int

DocumentExportConfigTocExport = Union[DocumentExportConfigDoExport, DocumentExportConfigExportFixed]
class DocumentExportConfigTocExportKind(Enum):
    DoExport = 1
    ExportFixed = 2

class DocumentExportConfig:
    def __init__(self, inlinetasks: Optional[bool], footnotes: Optional[bool], clock: Optional[bool], author: Optional[bool], emphasis: Optional[bool], specialStrings: Optional[bool], propertyDrawers: Optional[bool], statisticsCookies: Optional[bool], todoText: Optional[bool], brokenLinks: DocumentExportConfigBrokenLinks, tocExport: DocumentExportConfigTocExport, tagExport: DocumentExportConfigTagExport, data: DocumentExportConfigTocExport) -> None: ...
    def operator==(self, other: DocumentExportConfig) -> bool: ...
    def isDoExport(self) -> bool: ...
    def getDoExport(self) -> DocumentExportConfigDoExport: ...
    def isExportFixed(self) -> bool: ...
    def getExportFixed(self) -> DocumentExportConfigExportFixed: ...
    @staticmethod
    def getTocExportKindStatic(self, __input: DocumentExportConfigTocExport) -> DocumentExportConfigTocExportKind: ...
    def getTocExportKind(self) -> DocumentExportConfigTocExportKind: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    inlinetasks: Optional[bool]
    footnotes: Optional[bool]
    clock: Optional[bool]
    author: Optional[bool]
    emphasis: Optional[bool]
    specialStrings: Optional[bool]
    propertyDrawers: Optional[bool]
    statisticsCookies: Optional[bool]
    todoText: Optional[bool]
    brokenLinks: DocumentExportConfigBrokenLinks
    tocExport: DocumentExportConfigTocExport
    tagExport: DocumentExportConfigTagExport
    data: DocumentExportConfigTocExport

class SubtreePeriodKind(Enum):
    Clocked = 1
    Closed = 2
    Scheduled = 3
    Titled = 4
    Deadline = 5
    Created = 6
    Repeated = 7

class SubtreePeriod:
    def __init__(self, kind: SubtreePeriodKind, from_: UserTime, to: Optional[UserTime]) -> None: ...
    def operator==(self, other: SubtreePeriod) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    kind: SubtreePeriodKind
    from_: UserTime
    to: Optional[UserTime]

class NamedPropertySetMode(Enum):
    Override = 1
    Add = 2
    Subtract = 3

class NamedPropertyInheritanceMode(Enum):
    ThisAndSub = 1
    OnlyThis = 2
    OnlySub = 3

class NamedPropertyNonblocking:
    def __init__(self, isBlocking: bool) -> None: ...
    def operator==(self, other: NamedPropertyNonblocking) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    isBlocking: bool

class NamedPropertyArchiveTime:
    def __init__(self, time: UserTime) -> None: ...
    def operator==(self, other: NamedPropertyArchiveTime) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    time: UserTime

class NamedPropertyArchiveFile:
    def __init__(self, file: str) -> None: ...
    def operator==(self, other: NamedPropertyArchiveFile) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    file: str

class NamedPropertyArchiveOlpath:
    def __init__(self, path: SubtreePath) -> None: ...
    def operator==(self, other: NamedPropertyArchiveOlpath) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    path: SubtreePath

class NamedPropertyArchiveTarget:
    def __init__(self, path: SubtreePath, pattern: str) -> None: ...
    def operator==(self, other: NamedPropertyArchiveTarget) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    path: SubtreePath
    pattern: str

class NamedPropertyArchiveCategory:
    def __init__(self, category: str) -> None: ...
    def operator==(self, other: NamedPropertyArchiveCategory) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    category: str

class NamedPropertyArchiveTodo:
    def __init__(self, todo: str) -> None: ...
    def operator==(self, other: NamedPropertyArchiveTodo) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    todo: str

class NamedPropertyTrigger:
    def __init__(self) -> None: ...
    def operator==(self, other: NamedPropertyTrigger) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class NamedPropertyExportLatexClass:
    def __init__(self, latexClass: str) -> None: ...
    def operator==(self, other: NamedPropertyExportLatexClass) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    latexClass: str

class NamedPropertyExportLatexClassOptions:
    def __init__(self, options: List[str]) -> None: ...
    def operator==(self, other: NamedPropertyExportLatexClassOptions) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    options: List[str]

class NamedPropertyExportLatexHeader:
    def __init__(self, header: str) -> None: ...
    def operator==(self, other: NamedPropertyExportLatexHeader) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    header: str

class NamedPropertyExportLatexCompiler:
    def __init__(self, compiler: str) -> None: ...
    def operator==(self, other: NamedPropertyExportLatexCompiler) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    compiler: str

class NamedPropertyOrdered:
    def __init__(self, isOrdered: bool) -> None: ...
    def operator==(self, other: NamedPropertyOrdered) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    isOrdered: bool

class NamedPropertyEffort:
    def __init__(self, hours: int, minutes: int) -> None: ...
    def operator==(self, other: NamedPropertyEffort) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    hours: int
    minutes: int

class NamedPropertyVisibilityLevel(Enum):
    Folded = 1
    Children = 2
    Content = 3
    All = 4

class NamedPropertyVisibility:
    def __init__(self, level: NamedPropertyVisibilityLevel) -> None: ...
    def operator==(self, other: NamedPropertyVisibility) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    level: NamedPropertyVisibilityLevel

class NamedPropertyExportOptions:
    def __init__(self, backend: str, values: Dict[str, str]) -> None: ...
    def operator==(self, other: NamedPropertyExportOptions) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    backend: str
    values: Dict[str, str]

class NamedPropertyBlocker:
    def __init__(self, blockers: List[str]) -> None: ...
    def operator==(self, other: NamedPropertyBlocker) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    blockers: List[str]

class NamedPropertyUnnumbered:
    def __init__(self) -> None: ...
    def operator==(self, other: NamedPropertyUnnumbered) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class NamedPropertyCreated:
    def __init__(self, time: UserTime) -> None: ...
    def operator==(self, other: NamedPropertyCreated) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    time: UserTime

class NamedPropertyCustomArgs:
    def __init__(self, name: str, sub: Optional[str], attrs: List[AttrValue]) -> None: ...
    def operator==(self, other: NamedPropertyCustomArgs) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    name: str
    sub: Optional[str]
    attrs: List[AttrValue]

class NamedPropertyCustomRaw:
    def __init__(self, name: str, value: str) -> None: ...
    def operator==(self, other: NamedPropertyCustomRaw) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    name: str
    value: str

NamedPropertyData = Union[NamedPropertyNonblocking, NamedPropertyArchiveTime, NamedPropertyArchiveFile, NamedPropertyArchiveOlpath, NamedPropertyArchiveTarget, NamedPropertyArchiveCategory, NamedPropertyArchiveTodo, NamedPropertyTrigger, NamedPropertyExportLatexClass, NamedPropertyExportLatexClassOptions, NamedPropertyExportLatexHeader, NamedPropertyExportLatexCompiler, NamedPropertyOrdered, NamedPropertyEffort, NamedPropertyVisibility, NamedPropertyExportOptions, NamedPropertyBlocker, NamedPropertyUnnumbered, NamedPropertyCreated, NamedPropertyCustomArgs, NamedPropertyCustomRaw]
class NamedPropertyKind(Enum):
    Nonblocking = 1
    ArchiveTime = 2
    ArchiveFile = 3
    ArchiveOlpath = 4
    ArchiveTarget = 5
    ArchiveCategory = 6
    ArchiveTodo = 7
    Trigger = 8
    ExportLatexClass = 9
    ExportLatexClassOptions = 10
    ExportLatexHeader = 11
    ExportLatexCompiler = 12
    Ordered = 13
    Effort = 14
    Visibility = 15
    ExportOptions = 16
    Blocker = 17
    Unnumbered = 18
    Created = 19
    CustomArgs = 20
    CustomRaw = 21

class NamedProperty:
    def __init__(self, mainSetRule: NamedPropertySetMode, subSetRule: NamedPropertySetMode, inheritanceMode: NamedPropertyInheritanceMode, data: NamedPropertyData) -> None: ...
    def isMatching(self, kind: str, subKind: Optional[str]) -> bool: ...
    def getName(self) -> str: ...
    def getSubKind(self) -> Optional[str]: ...
    def operator==(self, other: NamedProperty) -> bool: ...
    def isNonblocking(self) -> bool: ...
    def getNonblocking(self) -> NamedPropertyNonblocking: ...
    def isArchiveTime(self) -> bool: ...
    def getArchiveTime(self) -> NamedPropertyArchiveTime: ...
    def isArchiveFile(self) -> bool: ...
    def getArchiveFile(self) -> NamedPropertyArchiveFile: ...
    def isArchiveOlpath(self) -> bool: ...
    def getArchiveOlpath(self) -> NamedPropertyArchiveOlpath: ...
    def isArchiveTarget(self) -> bool: ...
    def getArchiveTarget(self) -> NamedPropertyArchiveTarget: ...
    def isArchiveCategory(self) -> bool: ...
    def getArchiveCategory(self) -> NamedPropertyArchiveCategory: ...
    def isArchiveTodo(self) -> bool: ...
    def getArchiveTodo(self) -> NamedPropertyArchiveTodo: ...
    def isTrigger(self) -> bool: ...
    def getTrigger(self) -> NamedPropertyTrigger: ...
    def isExportLatexClass(self) -> bool: ...
    def getExportLatexClass(self) -> NamedPropertyExportLatexClass: ...
    def isExportLatexClassOptions(self) -> bool: ...
    def getExportLatexClassOptions(self) -> NamedPropertyExportLatexClassOptions: ...
    def isExportLatexHeader(self) -> bool: ...
    def getExportLatexHeader(self) -> NamedPropertyExportLatexHeader: ...
    def isExportLatexCompiler(self) -> bool: ...
    def getExportLatexCompiler(self) -> NamedPropertyExportLatexCompiler: ...
    def isOrdered(self) -> bool: ...
    def getOrdered(self) -> NamedPropertyOrdered: ...
    def isEffort(self) -> bool: ...
    def getEffort(self) -> NamedPropertyEffort: ...
    def isVisibility(self) -> bool: ...
    def getVisibility(self) -> NamedPropertyVisibility: ...
    def isExportOptions(self) -> bool: ...
    def getExportOptions(self) -> NamedPropertyExportOptions: ...
    def isBlocker(self) -> bool: ...
    def getBlocker(self) -> NamedPropertyBlocker: ...
    def isUnnumbered(self) -> bool: ...
    def getUnnumbered(self) -> NamedPropertyUnnumbered: ...
    def isCreated(self) -> bool: ...
    def getCreated(self) -> NamedPropertyCreated: ...
    def isCustomArgs(self) -> bool: ...
    def getCustomArgs(self) -> NamedPropertyCustomArgs: ...
    def isCustomRaw(self) -> bool: ...
    def getCustomRaw(self) -> NamedPropertyCustomRaw: ...
    @staticmethod
    def getKindStatic(self, __input: NamedPropertyData) -> NamedPropertyKind: ...
    def getKind(self) -> NamedPropertyKind: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    mainSetRule: NamedPropertySetMode
    subSetRule: NamedPropertySetMode
    inheritanceMode: NamedPropertyInheritanceMode
    data: NamedPropertyData

class None(Org):
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class Attr(Org):
    def __init__(self, arg: AttrValue) -> None: ...
    def getName(self) -> str: ...
    def getValue(self) -> str: ...
    def getVarname(self) -> str: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    arg: AttrValue

class AttrList(Org):
    def __init__(self, args: List[Attr]) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    args: List[Attr]

class Attrs(Org):
    def __init__(self, positional: AttrList, named: Dict[str, AttrList]) -> None: ...
    def getAttrs(self, key: Optional[str]) -> List[AttrValue]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    positional: AttrList
    named: Dict[str, AttrList]

class ErrorItem(Org):
    def __init__(self, message: str, function: Optional[str], line: Optional[int]) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    message: str
    function: Optional[str]
    line: Optional[int]

class ErrorGroup(Org):
    def __init__(self, diagnostics: List[ErrorItem], function: Optional[str], line: Optional[str]) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    diagnostics: List[ErrorItem]
    function: Optional[str]
    line: Optional[str]

class Stmt(Org):
    def __init__(self, attached: List[Org]) -> None: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getCaption(self) -> List[Org]: ...
    def getName(self) -> List[str]: ...
    def getAttrs(self, kind: Optional[str]) -> List[AttrValue]: ...
    def getFirstAttr(self, kind: str) -> Optional[AttrValue]: ...
    attached: List[Org]

class Inline(Org):
    def __init__(self) -> None: ...

class StmtList(Org):
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class Empty(Org):
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class Cmd(Stmt):
    def __init__(self, attrs: Optional[Attrs], attached: List[Org]) -> None: ...
    def getAttrs(self, key: Optional[str]) -> List[AttrValue]: ...
    def getFirstAttr(self, kind: str) -> Optional[AttrValue]: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getCaption(self) -> List[Org]: ...
    def getName(self) -> List[str]: ...
    def getAttrs(self, kind: Optional[str]) -> List[AttrValue]: ...
    def getFirstAttr(self, kind: str) -> Optional[AttrValue]: ...
    attrs: Optional[Attrs]
    attached: List[Org]

class Block(Cmd):
    def __init__(self, attrs: Optional[Attrs], attached: List[Org]) -> None: ...
    def getAttrs(self, key: Optional[str]) -> List[AttrValue]: ...
    def getFirstAttr(self, kind: str) -> Optional[AttrValue]: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getCaption(self) -> List[Org]: ...
    def getName(self) -> List[str]: ...
    def getAttrs(self, kind: Optional[str]) -> List[AttrValue]: ...
    def getFirstAttr(self, kind: str) -> Optional[AttrValue]: ...
    attrs: Optional[Attrs]
    attached: List[Org]

class LineCommand(Cmd):
    def __init__(self, attrs: Optional[Attrs], attached: List[Org]) -> None: ...
    def getAttrs(self, key: Optional[str]) -> List[AttrValue]: ...
    def getFirstAttr(self, kind: str) -> Optional[AttrValue]: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getCaption(self) -> List[Org]: ...
    def getName(self) -> List[str]: ...
    def getAttrs(self, kind: Optional[str]) -> List[AttrValue]: ...
    def getFirstAttr(self, kind: str) -> Optional[AttrValue]: ...
    attrs: Optional[Attrs]
    attached: List[Org]

class Attached(LineCommand):
    def __init__(self, attrs: Optional[Attrs], attached: List[Org]) -> None: ...
    def getAttrs(self, key: Optional[str]) -> List[AttrValue]: ...
    def getFirstAttr(self, kind: str) -> Optional[AttrValue]: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getCaption(self) -> List[Org]: ...
    def getName(self) -> List[str]: ...
    def getAttrs(self, kind: Optional[str]) -> List[AttrValue]: ...
    def getFirstAttr(self, kind: str) -> Optional[AttrValue]: ...
    attrs: Optional[Attrs]
    attached: List[Org]

class Leaf(Org):
    def __init__(self, text: str) -> None: ...
    def getText(self) -> str: ...
    text: str

class CmdCaption(Attached):
    def __init__(self, text: Paragraph, attrs: Optional[Attrs], attached: List[Org]) -> None: ...
    def getAttrs(self, key: Optional[str]) -> List[AttrValue]: ...
    def getFirstAttr(self, kind: str) -> Optional[AttrValue]: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getCaption(self) -> List[Org]: ...
    def getName(self) -> List[str]: ...
    def getAttrs(self, kind: Optional[str]) -> List[AttrValue]: ...
    def getFirstAttr(self, kind: str) -> Optional[AttrValue]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    text: Paragraph
    attrs: Optional[Attrs]
    attached: List[Org]

class CmdName(Attached):
    def __init__(self, name: str, attrs: Optional[Attrs], attached: List[Org]) -> None: ...
    def getAttrs(self, key: Optional[str]) -> List[AttrValue]: ...
    def getFirstAttr(self, kind: str) -> Optional[AttrValue]: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getCaption(self) -> List[Org]: ...
    def getName(self) -> List[str]: ...
    def getAttrs(self, kind: Optional[str]) -> List[AttrValue]: ...
    def getFirstAttr(self, kind: str) -> Optional[AttrValue]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    name: str
    attrs: Optional[Attrs]
    attached: List[Org]

class CmdCustomArgs(Cmd):
    def __init__(self, name: str, isAttached: bool, attrs: Optional[Attrs], attached: List[Org]) -> None: ...
    def getAttrs(self, key: Optional[str]) -> List[AttrValue]: ...
    def getFirstAttr(self, kind: str) -> Optional[AttrValue]: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getCaption(self) -> List[Org]: ...
    def getName(self) -> List[str]: ...
    def getAttrs(self, kind: Optional[str]) -> List[AttrValue]: ...
    def getFirstAttr(self, kind: str) -> Optional[AttrValue]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    name: str
    isAttached: bool
    attrs: Optional[Attrs]
    attached: List[Org]

class CmdCustomRaw(Stmt):
    def __init__(self, name: str, isAttached: bool, text: str, attached: List[Org]) -> None: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getCaption(self) -> List[Org]: ...
    def getName(self) -> List[str]: ...
    def getAttrs(self, kind: Optional[str]) -> List[AttrValue]: ...
    def getFirstAttr(self, kind: str) -> Optional[AttrValue]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    name: str
    isAttached: bool
    text: str
    attached: List[Org]

class CmdCustomText(Stmt):
    def __init__(self, name: str, isAttached: bool, text: Paragraph, attached: List[Org]) -> None: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getCaption(self) -> List[Org]: ...
    def getName(self) -> List[str]: ...
    def getAttrs(self, kind: Optional[str]) -> List[AttrValue]: ...
    def getFirstAttr(self, kind: str) -> Optional[AttrValue]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    name: str
    isAttached: bool
    text: Paragraph
    attached: List[Org]

class CmdResults(Attached):
    def __init__(self, attrs: Optional[Attrs], attached: List[Org]) -> None: ...
    def getAttrs(self, key: Optional[str]) -> List[AttrValue]: ...
    def getFirstAttr(self, kind: str) -> Optional[AttrValue]: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getCaption(self) -> List[Org]: ...
    def getName(self) -> List[str]: ...
    def getAttrs(self, kind: Optional[str]) -> List[AttrValue]: ...
    def getFirstAttr(self, kind: str) -> Optional[AttrValue]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    attrs: Optional[Attrs]
    attached: List[Org]

class CmdTblfm(Cmd):
    def __init__(self, expr: Tblfm, attrs: Optional[Attrs], attached: List[Org]) -> None: ...
    def getAttrs(self, key: Optional[str]) -> List[AttrValue]: ...
    def getFirstAttr(self, kind: str) -> Optional[AttrValue]: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getCaption(self) -> List[Org]: ...
    def getName(self) -> List[str]: ...
    def getAttrs(self, kind: Optional[str]) -> List[AttrValue]: ...
    def getFirstAttr(self, kind: str) -> Optional[AttrValue]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    expr: Tblfm
    attrs: Optional[Attrs]
    attached: List[Org]

class HashTag(Inline):
    def __init__(self, head: str, subtags: List[HashTag]) -> None: ...
    def prefixMatch(self, prefix: List[str]) -> bool: ...
    def getFlatHashes(self, withIntermediate: bool) -> List[List[str]]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    head: str
    subtags: List[HashTag]

class InlineFootnote(Inline):
    def __init__(self, tag: str, definition: Optional[Org]) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    tag: str
    definition: Optional[Org]

class TimeRepeatMode(Enum):
    _None = 1
    Exact = 2
    FirstMatch = 3
    SameDay = 4

class TimeRepeatPeriod(Enum):
    Year = 1
    Month = 2
    Week = 3
    Day = 4
    Hour = 5
    Minute = 6

class TimeRepeat:
    def __init__(self, mode: TimeRepeatMode, period: TimeRepeatPeriod, count: int) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    mode: TimeRepeatMode
    period: TimeRepeatPeriod
    count: int

class TimeStatic:
    def __init__(self, repeat: Optional[TimeRepeat], time: UserTime) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    repeat: Optional[TimeRepeat]
    time: UserTime

class TimeDynamic:
    def __init__(self, expr: str) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    expr: str

TimeTimeVariant = Union[TimeStatic, TimeDynamic]
class TimeTimeKind(Enum):
    Static = 1
    Dynamic = 2

class Time(Org):
    def __init__(self, isActive: bool, time: TimeTimeVariant) -> None: ...
    def getYear(self) -> Optional[int]: ...
    def getMonth(self) -> Optional[int]: ...
    def getDay(self) -> Optional[int]: ...
    def getHour(self) -> Optional[int]: ...
    def getMinute(self) -> Optional[int]: ...
    def getSecond(self) -> Optional[int]: ...
    def getStaticTime(self) -> UserTime: ...
    def isStatic(self) -> bool: ...
    def getStatic(self) -> TimeStatic: ...
    def isDynamic(self) -> bool: ...
    def getDynamic(self) -> TimeDynamic: ...
    @staticmethod
    def getTimeKindStatic(self, __input: TimeTimeVariant) -> TimeTimeKind: ...
    def getTimeKind(self) -> TimeTimeKind: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    isActive: bool
    time: TimeTimeVariant

class TimeRange(Org):
    def __init__(self, from_: Time, to: Time) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    from_: Time
    to: Time

class Macro(Org):
    def __init__(self, name: str, attrs: Attrs) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    name: str
    attrs: Attrs

class SymbolParam:
    def __init__(self, key: Optional[str], value: str) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    key: Optional[str]
    value: str

class Symbol(Org):
    def __init__(self, name: str, parameters: List[SymbolParam], positional: List[Org]) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    name: str
    parameters: List[SymbolParam]
    positional: List[Org]

class Escaped(Leaf):
    def __init__(self, text: str) -> None: ...
    def getText(self) -> str: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    text: str

class Newline(Leaf):
    def __init__(self, text: str) -> None: ...
    def getText(self) -> str: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    text: str

class Space(Leaf):
    def __init__(self, text: str) -> None: ...
    def getText(self) -> str: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    text: str

class Word(Leaf):
    def __init__(self, text: str) -> None: ...
    def getText(self) -> str: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    text: str

class AtMention(Leaf):
    def __init__(self, text: str) -> None: ...
    def getText(self) -> str: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    text: str

class RawText(Leaf):
    def __init__(self, text: str) -> None: ...
    def getText(self) -> str: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    text: str

class Punctuation(Leaf):
    def __init__(self, text: str) -> None: ...
    def getText(self) -> str: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    text: str

class Placeholder(Leaf):
    def __init__(self, text: str) -> None: ...
    def getText(self) -> str: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    text: str

class BigIdent(Leaf):
    def __init__(self, text: str) -> None: ...
    def getText(self) -> str: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    text: str

class RadioTarget(Leaf):
    def __init__(self, text: str) -> None: ...
    def getText(self) -> str: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    text: str

class TextTarget(Leaf):
    def __init__(self, text: str) -> None: ...
    def getText(self) -> str: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    text: str

class Markup(Org):
    def __init__(self) -> None: ...

class Bold(Markup):
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class Underline(Markup):
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class Monospace(Markup):
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class MarkQuote(Markup):
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class Verbatim(Markup):
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class Italic(Markup):
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class Strike(Markup):
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class Par(Markup):
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class Latex(Org):
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class LinkRaw:
    def __init__(self, text: str) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    text: str

class LinkId:
    def __init__(self, text: str) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    text: str

class LinkPerson:
    def __init__(self, name: str) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    name: str

class LinkUserProtocol:
    def __init__(self, protocol: str, target: str) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    protocol: str
    target: str

class LinkInternal:
    def __init__(self, target: str) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    target: str

class LinkFootnote:
    def __init__(self, target: str) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    target: str

class LinkFile:
    def __init__(self, file: str) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    file: str

class LinkAttachment:
    def __init__(self, file: str) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    file: str

LinkData = Union[LinkRaw, LinkId, LinkPerson, LinkUserProtocol, LinkInternal, LinkFootnote, LinkFile, LinkAttachment]
class LinkKind(Enum):
    Raw = 1
    Id = 2
    Person = 3
    UserProtocol = 4
    Internal = 5
    Footnote = 6
    File = 7
    Attachment = 8

class Link(Stmt):
    def __init__(self, description: Optional[Paragraph], data: LinkData, attached: List[Org]) -> None: ...
    def isRaw(self) -> bool: ...
    def getRaw(self) -> LinkRaw: ...
    def isId(self) -> bool: ...
    def getId(self) -> LinkId: ...
    def isPerson(self) -> bool: ...
    def getPerson(self) -> LinkPerson: ...
    def isUserProtocol(self) -> bool: ...
    def getUserProtocol(self) -> LinkUserProtocol: ...
    def isInternal(self) -> bool: ...
    def getInternal(self) -> LinkInternal: ...
    def isFootnote(self) -> bool: ...
    def getFootnote(self) -> LinkFootnote: ...
    def isFile(self) -> bool: ...
    def getFile(self) -> LinkFile: ...
    def isAttachment(self) -> bool: ...
    def getAttachment(self) -> LinkAttachment: ...
    @staticmethod
    def getLinkKindStatic(self, __input: LinkData) -> LinkKind: ...
    def getLinkKind(self) -> LinkKind: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getCaption(self) -> List[Org]: ...
    def getName(self) -> List[str]: ...
    def getAttrs(self, kind: Optional[str]) -> List[AttrValue]: ...
    def getFirstAttr(self, kind: str) -> Optional[AttrValue]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    description: Optional[Paragraph]
    data: LinkData
    attached: List[Org]

class BlockCenter(Block):
    def __init__(self, attrs: Optional[Attrs], attached: List[Org]) -> None: ...
    def getAttrs(self, key: Optional[str]) -> List[AttrValue]: ...
    def getFirstAttr(self, kind: str) -> Optional[AttrValue]: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getCaption(self) -> List[Org]: ...
    def getName(self) -> List[str]: ...
    def getAttrs(self, kind: Optional[str]) -> List[AttrValue]: ...
    def getFirstAttr(self, kind: str) -> Optional[AttrValue]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    attrs: Optional[Attrs]
    attached: List[Org]

class BlockQuote(Block):
    def __init__(self, attrs: Optional[Attrs], attached: List[Org]) -> None: ...
    def getAttrs(self, key: Optional[str]) -> List[AttrValue]: ...
    def getFirstAttr(self, kind: str) -> Optional[AttrValue]: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getCaption(self) -> List[Org]: ...
    def getName(self) -> List[str]: ...
    def getAttrs(self, kind: Optional[str]) -> List[AttrValue]: ...
    def getFirstAttr(self, kind: str) -> Optional[AttrValue]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    attrs: Optional[Attrs]
    attached: List[Org]

class BlockComment(Stmt):
    def __init__(self, attached: List[Org]) -> None: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getCaption(self) -> List[Org]: ...
    def getName(self) -> List[str]: ...
    def getAttrs(self, kind: Optional[str]) -> List[AttrValue]: ...
    def getFirstAttr(self, kind: str) -> Optional[AttrValue]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    attached: List[Org]

class BlockVerse(Block):
    def __init__(self, attrs: Optional[Attrs], attached: List[Org]) -> None: ...
    def getAttrs(self, key: Optional[str]) -> List[AttrValue]: ...
    def getFirstAttr(self, kind: str) -> Optional[AttrValue]: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getCaption(self) -> List[Org]: ...
    def getName(self) -> List[str]: ...
    def getAttrs(self, kind: Optional[str]) -> List[AttrValue]: ...
    def getFirstAttr(self, kind: str) -> Optional[AttrValue]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    attrs: Optional[Attrs]
    attached: List[Org]

class BlockDynamicFallback(Block):
    def __init__(self, name: str, attrs: Optional[Attrs], attached: List[Org]) -> None: ...
    def getAttrs(self, key: Optional[str]) -> List[AttrValue]: ...
    def getFirstAttr(self, kind: str) -> Optional[AttrValue]: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getCaption(self) -> List[Org]: ...
    def getName(self) -> List[str]: ...
    def getAttrs(self, kind: Optional[str]) -> List[AttrValue]: ...
    def getFirstAttr(self, kind: str) -> Optional[AttrValue]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    name: str
    attrs: Optional[Attrs]
    attached: List[Org]

class BlockExample(Block):
    def __init__(self, attrs: Optional[Attrs], attached: List[Org]) -> None: ...
    def getAttrs(self, key: Optional[str]) -> List[AttrValue]: ...
    def getFirstAttr(self, kind: str) -> Optional[AttrValue]: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getCaption(self) -> List[Org]: ...
    def getName(self) -> List[str]: ...
    def getAttrs(self, kind: Optional[str]) -> List[AttrValue]: ...
    def getFirstAttr(self, kind: str) -> Optional[AttrValue]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    attrs: Optional[Attrs]
    attached: List[Org]

class BlockExportFormat(Enum):
    Inline = 1
    Line = 2
    Block = 3

class BlockExport(Block):
    def __init__(self, format: BlockExportFormat, exporter: str, placement: Optional[str], content: str, attrs: Optional[Attrs], attached: List[Org]) -> None: ...
    def getAttrs(self, key: Optional[str]) -> List[AttrValue]: ...
    def getFirstAttr(self, kind: str) -> Optional[AttrValue]: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getCaption(self) -> List[Org]: ...
    def getName(self) -> List[str]: ...
    def getAttrs(self, kind: Optional[str]) -> List[AttrValue]: ...
    def getFirstAttr(self, kind: str) -> Optional[AttrValue]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    format: BlockExportFormat
    exporter: str
    placement: Optional[str]
    content: str
    attrs: Optional[Attrs]
    attached: List[Org]

class BlockAdmonition(Block):
    def __init__(self, attrs: Optional[Attrs], attached: List[Org]) -> None: ...
    def getAttrs(self, key: Optional[str]) -> List[AttrValue]: ...
    def getFirstAttr(self, kind: str) -> Optional[AttrValue]: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getCaption(self) -> List[Org]: ...
    def getName(self) -> List[str]: ...
    def getAttrs(self, kind: Optional[str]) -> List[AttrValue]: ...
    def getFirstAttr(self, kind: str) -> Optional[AttrValue]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    attrs: Optional[Attrs]
    attached: List[Org]

class BlockCode(Block):
    def __init__(self, lang: Optional[str], switches: List[BlockCodeSwitch], exports: BlockCodeExports, result: Optional[BlockCodeEvalResult], lines: List[BlockCodeLine], cache: bool, eval: bool, noweb: bool, hlines: bool, tangle: bool, attrs: Optional[Attrs], attached: List[Org]) -> None: ...
    def getAttrs(self, key: Optional[str]) -> List[AttrValue]: ...
    def getFirstAttr(self, kind: str) -> Optional[AttrValue]: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getCaption(self) -> List[Org]: ...
    def getName(self) -> List[str]: ...
    def getAttrs(self, kind: Optional[str]) -> List[AttrValue]: ...
    def getFirstAttr(self, kind: str) -> Optional[AttrValue]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    lang: Optional[str]
    switches: List[BlockCodeSwitch]
    exports: BlockCodeExports
    result: Optional[BlockCodeEvalResult]
    lines: List[BlockCodeLine]
    cache: bool
    eval: bool
    noweb: bool
    hlines: bool
    tangle: bool
    attrs: Optional[Attrs]
    attached: List[Org]

class SubtreeLogDescribedLog:
    def __init__(self, desc: Optional[StmtList]) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    desc: Optional[StmtList]

class SubtreeLogPriorityAction(Enum):
    Added = 1
    Removed = 2
    Changed = 3

class SubtreeLogPriority(SubtreeLogDescribedLog):
    def __init__(self, oldPriority: Optional[str], newPriority: Optional[str], on: Time, action: SubtreeLogPriorityAction) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    oldPriority: Optional[str]
    newPriority: Optional[str]
    on: Time
    action: SubtreeLogPriorityAction

class SubtreeLogNote(SubtreeLogDescribedLog):
    def __init__(self, on: Time) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    on: Time

class SubtreeLogRefile(SubtreeLogDescribedLog):
    def __init__(self, on: Time, from_: Link) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    on: Time
    from_: Link

class SubtreeLogClock(SubtreeLogDescribedLog):
    def __init__(self, from_: Time, to: Optional[Time]) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    from_: Time
    to: Optional[Time]

class SubtreeLogState(SubtreeLogDescribedLog):
    def __init__(self, from_: str, to: str, on: Time) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    from_: str
    to: str
    on: Time

class SubtreeLogTag(SubtreeLogDescribedLog):
    def __init__(self, on: Time, tag: HashTag, added: bool) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    on: Time
    tag: HashTag
    added: bool

class SubtreeLogUnknown(SubtreeLogDescribedLog):
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

SubtreeLogLogEntry = Union[SubtreeLogPriority, SubtreeLogNote, SubtreeLogRefile, SubtreeLogClock, SubtreeLogState, SubtreeLogTag, SubtreeLogUnknown]
class SubtreeLogKind(Enum):
    Priority = 1
    Note = 2
    Refile = 3
    Clock = 4
    State = 5
    Tag = 6
    Unknown = 7

class SubtreeLog(Org):
    def __init__(self, log: SubtreeLogLogEntry) -> None: ...
    def setDescription(self, desc: StmtList) -> None: ...
    def isPriority(self) -> bool: ...
    def getPriority(self) -> SubtreeLogPriority: ...
    def isNote(self) -> bool: ...
    def getNote(self) -> SubtreeLogNote: ...
    def isRefile(self) -> bool: ...
    def getRefile(self) -> SubtreeLogRefile: ...
    def isClock(self) -> bool: ...
    def getClock(self) -> SubtreeLogClock: ...
    def isState(self) -> bool: ...
    def getState(self) -> SubtreeLogState: ...
    def isTag(self) -> bool: ...
    def getTag(self) -> SubtreeLogTag: ...
    def isUnknown(self) -> bool: ...
    def getUnknown(self) -> SubtreeLogUnknown: ...
    @staticmethod
    def getLogKindStatic(self, __input: SubtreeLogLogEntry) -> SubtreeLogKind: ...
    def getLogKind(self) -> SubtreeLogKind: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    log: SubtreeLogLogEntry

class Subtree(Org):
    def __init__(self, level: int, treeId: Optional[str], todo: Optional[str], completion: Optional[SubtreeCompletion], description: Optional[Paragraph], tags: List[HashTag], title: Paragraph, logbook: List[SubtreeLog], properties: List[NamedProperty], closed: Optional[Time], deadline: Optional[Time], scheduled: Optional[Time], isComment: bool, isArchived: bool, priority: Optional[str]) -> None: ...
    def getTimePeriods(self, kinds: IntSet[SubtreePeriodKind]) -> List[SubtreePeriod]: ...
    def getProperties(self, kind: str, subkind: Optional[str]) -> List[NamedProperty]: ...
    def getProperty(self, kind: str, subkind: Optional[str]) -> Optional[NamedProperty]: ...
    def removeProperty(self, kind: str, subkind: Optional[str]) -> None: ...
    def setProperty(self, value: NamedProperty) -> None: ...
    def setPropertyStrValue(self, value: str, kind: str, subkind: Optional[str]) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    level: int
    treeId: Optional[str]
    todo: Optional[str]
    completion: Optional[SubtreeCompletion]
    description: Optional[Paragraph]
    tags: List[HashTag]
    title: Paragraph
    logbook: List[SubtreeLog]
    properties: List[NamedProperty]
    closed: Optional[Time]
    deadline: Optional[Time]
    scheduled: Optional[Time]
    isComment: bool
    isArchived: bool
    priority: Optional[str]

class SubtreeCompletion(Inline):
    def __init__(self, done: int, full: int, isPercent: bool) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    done: int
    full: int
    isPercent: bool

class Cell(Cmd):
    def __init__(self, isBlock: bool, attrs: Optional[Attrs], attached: List[Org]) -> None: ...
    def getAttrs(self, key: Optional[str]) -> List[AttrValue]: ...
    def getFirstAttr(self, kind: str) -> Optional[AttrValue]: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getCaption(self) -> List[Org]: ...
    def getName(self) -> List[str]: ...
    def getAttrs(self, kind: Optional[str]) -> List[AttrValue]: ...
    def getFirstAttr(self, kind: str) -> Optional[AttrValue]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    isBlock: bool
    attrs: Optional[Attrs]
    attached: List[Org]

class Row(Cmd):
    def __init__(self, cells: List[Cell], isBlock: bool, attrs: Optional[Attrs], attached: List[Org]) -> None: ...
    def getAttrs(self, key: Optional[str]) -> List[AttrValue]: ...
    def getFirstAttr(self, kind: str) -> Optional[AttrValue]: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getCaption(self) -> List[Org]: ...
    def getName(self) -> List[str]: ...
    def getAttrs(self, kind: Optional[str]) -> List[AttrValue]: ...
    def getFirstAttr(self, kind: str) -> Optional[AttrValue]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    cells: List[Cell]
    isBlock: bool
    attrs: Optional[Attrs]
    attached: List[Org]

class Table(Block):
    def __init__(self, rows: List[Row], isBlock: bool, attrs: Optional[Attrs], attached: List[Org]) -> None: ...
    def getAttrs(self, key: Optional[str]) -> List[AttrValue]: ...
    def getFirstAttr(self, kind: str) -> Optional[AttrValue]: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getCaption(self) -> List[Org]: ...
    def getName(self) -> List[str]: ...
    def getAttrs(self, kind: Optional[str]) -> List[AttrValue]: ...
    def getFirstAttr(self, kind: str) -> Optional[AttrValue]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    rows: List[Row]
    isBlock: bool
    attrs: Optional[Attrs]
    attached: List[Org]

class Paragraph(Stmt):
    def __init__(self, attached: List[Org]) -> None: ...
    def isFootnoteDefinition(self) -> bool: ...
    def getFootnoteName(self) -> Optional[str]: ...
    def hasAdmonition(self) -> bool: ...
    def getAdmonitions(self) -> List[str]: ...
    def getAdmonitionNodes(self) -> List[BigIdent]: ...
    def hasTimestamp(self) -> bool: ...
    def getTimestamps(self) -> List[UserTime]: ...
    def getTimestampNodes(self) -> List[Time]: ...
    def hasLeadHashtags(self) -> bool: ...
    def getLeadHashtags(self) -> List[HashTag]: ...
    def getBody(self) -> List[Org]: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getCaption(self) -> List[Org]: ...
    def getName(self) -> List[str]: ...
    def getAttrs(self, kind: Optional[str]) -> List[AttrValue]: ...
    def getFirstAttr(self, kind: str) -> Optional[AttrValue]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    attached: List[Org]

class ColonExample(Org):
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class CmdAttr(Attached):
    def __init__(self, target: str, attrs: Optional[Attrs], attached: List[Org]) -> None: ...
    def getAttrs(self, key: Optional[str]) -> List[AttrValue]: ...
    def getFirstAttr(self, kind: str) -> Optional[AttrValue]: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getCaption(self) -> List[Org]: ...
    def getName(self) -> List[str]: ...
    def getAttrs(self, kind: Optional[str]) -> List[AttrValue]: ...
    def getFirstAttr(self, kind: str) -> Optional[AttrValue]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    target: str
    attrs: Optional[Attrs]
    attached: List[Org]

class Call(Org):
    def __init__(self, name: str, attrs: Attrs, isCommand: bool) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    name: str
    attrs: Attrs
    isCommand: bool

class List(Stmt):
    def __init__(self, attached: List[Org]) -> None: ...
    def getListAttrs(self, key: str) -> List[AttrValue]: ...
    def isDescriptionList(self) -> bool: ...
    def isNumberedList(self) -> bool: ...
    def getAttached(self, kind: Optional[str]) -> List[Org]: ...
    def getCaption(self) -> List[Org]: ...
    def getName(self) -> List[str]: ...
    def getAttrs(self, kind: Optional[str]) -> List[AttrValue]: ...
    def getFirstAttr(self, kind: str) -> Optional[AttrValue]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    attached: List[Org]

class ListItemCheckbox(Enum):
    _None = 1
    Done = 2
    Empty = 3
    Partial = 4

class ListItem(Org):
    def __init__(self, checkbox: ListItemCheckbox, header: Optional[Paragraph], bullet: Optional[str]) -> None: ...
    def isDescriptionItem(self) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    checkbox: ListItemCheckbox
    header: Optional[Paragraph]
    bullet: Optional[str]

class DocumentOptions(Org):
    def __init__(self, initialVisibility: InitialSubtreeVisibility, properties: List[NamedProperty], exportConfig: DocumentExportConfig, fixedWidthSections: Optional[bool], startupIndented: Optional[bool], category: Optional[str], setupfile: Optional[str], maxSubtreeLevelExport: Optional[int]) -> None: ...
    def getProperties(self, kind: str, subKind: Optional[str]) -> List[NamedProperty]: ...
    def getProperty(self, kind: str, subKind: Optional[str]) -> Optional[NamedProperty]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    initialVisibility: InitialSubtreeVisibility
    properties: List[NamedProperty]
    exportConfig: DocumentExportConfig
    fixedWidthSections: Optional[bool]
    startupIndented: Optional[bool]
    category: Optional[str]
    setupfile: Optional[str]
    maxSubtreeLevelExport: Optional[int]

class Document(Org):
    def __init__(self, title: Optional[Paragraph], author: Optional[Paragraph], creator: Optional[Paragraph], filetags: List[HashTag], email: Optional[RawText], language: List[str], options: DocumentOptions, exportFileName: Optional[str]) -> None: ...
    def getProperties(self, kind: str, subKind: Optional[str]) -> List[NamedProperty]: ...
    def getProperty(self, kind: str, subKind: Optional[str]) -> Optional[NamedProperty]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    title: Optional[Paragraph]
    author: Optional[Paragraph]
    creator: Optional[Paragraph]
    filetags: List[HashTag]
    email: Optional[RawText]
    language: List[str]
    options: DocumentOptions
    exportFileName: Optional[str]

class FileTarget(Org):
    def __init__(self, path: str, line: Optional[int], searchTarget: Optional[str], restrictToHeadlines: bool, targetId: Optional[str], regexp: Optional[str]) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    path: str
    line: Optional[int]
    searchTarget: Optional[str]
    restrictToHeadlines: bool
    targetId: Optional[str]
    regexp: Optional[str]

class TextSeparator(Org):
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class IncludeExample:
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class IncludeExport:
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class IncludeSrc:
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class IncludeOrgDocument:
    def __init__(self, minLevel: Optional[int]) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    minLevel: Optional[int]

IncludeData = Union[IncludeExample, IncludeExport, IncludeSrc, IncludeOrgDocument]
class IncludeKind(Enum):
    Example = 1
    Export = 2
    Src = 3
    OrgDocument = 4

class Include(Org):
    def __init__(self, path: str, firstLine: Optional[int], lastLine: Optional[int], data: IncludeData) -> None: ...
    def isExample(self) -> bool: ...
    def getExample(self) -> IncludeExample: ...
    def isExport(self) -> bool: ...
    def getExport(self) -> IncludeExport: ...
    def isSrc(self) -> bool: ...
    def getSrc(self) -> IncludeSrc: ...
    def isOrgDocument(self) -> bool: ...
    def getOrgDocument(self) -> IncludeOrgDocument: ...
    @staticmethod
    def getIncludeKindStatic(self, __input: IncludeData) -> IncludeKind: ...
    def getIncludeKind(self) -> IncludeKind: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    path: str
    firstLine: Optional[int]
    lastLine: Optional[int]
    data: IncludeData

class DocumentGroup(Org):
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class ListFormattingMode(Enum):
    _None = 1
    Table1D1Col = 2
    Table1D2Col = 3
    Table2DColFirst = 4

class NodeAttachMode(Enum):
    _None = 1
    Subtree = 2

class InitialSubtreeVisibility(Enum):
    Overview = 1
    Content = 2
    ShowAll = 3
    Show2Levels = 4
    Show3Levels = 5
    Show4Levels = 6
    Show5Levels = 7
    ShowEverything = 8

class BlockCodeResults(Enum):
    Replace = 1

class BlockCodeExports(Enum):
    _None = 1
    Both = 2
    Code = 3
    Results = 4

class OrgSpecName(Enum):
    Unnamed = 1
    Result = 2
    Year = 3
    Day = 4
    Clock = 5
    Repeater = 6
    Zone = 7
    Link = 8
    Tags = 9
    Tag = 10
    State = 11
    Protocol = 12
    Desc = 13
    Times = 14
    Drawer = 15
    Args = 16
    Name = 17
    Definition = 18
    Body = 19
    HeaderArgs = 20
    File = 21
    Kind = 22
    Lang = 23
    Prefix = 24
    Text = 25
    Todo = 26
    Importance = 27
    Title = 28
    Completion = 29
    Head = 30
    Subnodes = 31
    Properties = 32
    Logbook = 33
    Description = 34
    Logs = 35
    Newstate = 36
    Oldstate = 37
    Time = 38
    From = 39
    EndArgs = 40
    Flags = 41
    Value = 42
    Assoc = 43
    Main = 44
    Hash = 45
    Bullet = 46
    Counter = 47
    Checkbox = 48
    Header = 49
    To = 50
    Diff = 51
    Property = 52
    Subname = 53
    Values = 54
    Cells = 55
    Rows = 56
    Lines = 57
    Chunks = 58
    InheritanceMode = 59
    MainSetRule = 60
    SubSetRule = 61

class OrgNodeKind(Enum):
    _None = 1
    Document = 2
    Empty = 3
    InlineStmtList = 4
    StmtList = 5
    Checkbox = 6
    List = 7
    Bullet = 8
    ListItem = 9
    ListTag = 10
    Counter = 11
    File = 12
    ColonExample = 13
    TextSeparator = 14
    Paragraph = 15
    TableRow = 16
    TableCell = 17
    Table = 18
    InlineFootnote = 19
    Footnote = 20
    Cmd = 21
    Attrs = 22
    CmdTitle = 23
    CmdAuthor = 24
    CmdCreator = 25
    CmdInclude = 26
    CmdLanguage = 27
    CmdAttr = 28
    CmdStartup = 29
    CmdName = 30
    CmdCustomTextCommand = 31
    CmdCustomArgsCommand = 32
    CmdCustomRawCommand = 33
    CmdResults = 34
    CmdHeader = 35
    CmdOptions = 36
    CmdTblfm = 37
    CmdCaption = 38
    CmdResult = 39
    CmdCallCode = 40
    CmdFlag = 41
    CmdKey = 42
    CmdValue = 43
    CmdNamedValue = 44
    CmdLatexClass = 45
    CmdLatexHeader = 46
    CmdLatexCompiler = 47
    CmdLatexClassOptions = 48
    CmdHtmlHead = 49
    CmdColumns = 50
    CmdPropertyArgs = 51
    CmdPropertyText = 52
    CmdPropertyRaw = 53
    CmdFiletags = 54
    BlockVerbatimMultiline = 55
    CodeLine = 56
    CodeText = 57
    CodeTangle = 58
    CodeCallout = 59
    BlockCode = 60
    BlockQuote = 61
    BlockComment = 62
    BlockCenter = 63
    BlockVerse = 64
    BlockExample = 65
    BlockExport = 66
    BlockDetails = 67
    BlockSummary = 68
    BlockDynamicFallback = 69
    BigIdent = 70
    Bold = 71
    Italic = 72
    Verbatim = 73
    Backtick = 74
    Underline = 75
    Strike = 76
    Quote = 77
    Angle = 78
    Monospace = 79
    Par = 80
    InlineMath = 81
    DisplayMath = 82
    Space = 83
    Punctuation = 84
    Colon = 85
    Word = 86
    Escaped = 87
    Newline = 88
    RawLink = 89
    Link = 90
    Macro = 91
    Symbol = 92
    StaticActiveTime = 93
    StaticInactiveTime = 94
    DynamicActiveTime = 95
    DynamicInactiveTime = 96
    TimeRange = 97
    SimpleTime = 98
    HashTag = 99
    MetaSymbol = 100
    AtMention = 101
    Placeholder = 102
    RadioTarget = 103
    Target = 104
    SrcInlineCode = 105
    InlineCallCode = 106
    InlineExport = 107
    InlineComment = 108
    RawText = 109
    SubtreeDescription = 110
    SubtreeUrgency = 111
    DrawerLogbook = 112
    Drawer = 113
    DrawerPropertyList = 114
    DrawerProperty = 115
    Subtree = 116
    SubtreeTimes = 117
    SubtreeStars = 118
    SubtreeCompletion = 119
    SubtreeImportance = 120

class OrgSemKind(Enum):
    _None = 1
    Attr = 2
    AttrList = 3
    Attrs = 4
    ErrorItem = 5
    ErrorGroup = 6
    StmtList = 7
    Empty = 8
    CmdCaption = 9
    CmdName = 10
    CmdCustomArgs = 11
    CmdCustomRaw = 12
    CmdCustomText = 13
    CmdResults = 14
    CmdTblfm = 15
    HashTag = 16
    InlineFootnote = 17
    Time = 18
    TimeRange = 19
    Macro = 20
    Symbol = 21
    Escaped = 22
    Newline = 23
    Space = 24
    Word = 25
    AtMention = 26
    RawText = 27
    Punctuation = 28
    Placeholder = 29
    BigIdent = 30
    RadioTarget = 31
    TextTarget = 32
    Bold = 33
    Underline = 34
    Monospace = 35
    MarkQuote = 36
    Verbatim = 37
    Italic = 38
    Strike = 39
    Par = 40
    Latex = 41
    Link = 42
    BlockCenter = 43
    BlockQuote = 44
    BlockComment = 45
    BlockVerse = 46
    BlockDynamicFallback = 47
    BlockExample = 48
    BlockExport = 49
    BlockAdmonition = 50
    BlockCode = 51
    SubtreeLog = 52
    Subtree = 53
    SubtreeCompletion = 54
    Cell = 55
    Row = 56
    Table = 57
    Paragraph = 58
    ColonExample = 59
    CmdAttr = 60
    Call = 61
    List = 62
    ListItem = 63
    DocumentOptions = 64
    Document = 65
    FileTarget = 66
    TextSeparator = 67
    Include = 68
    DocumentGroup = 69

class UserTimeBreakdown:
    def __init__(self, year: Optional[int], month: Optional[int], day: Optional[int], hour: Optional[int], minute: Optional[int], second: Optional[int], zone: Optional[str]) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    year: Optional[int]
    month: Optional[int]
    day: Optional[int]
    hour: Optional[int]
    minute: Optional[int]
    second: Optional[int]
    zone: Optional[str]

class UserTime:
    def __init__(self) -> None: ...
    def getBreakdown(self) -> UserTimeBreakdown: ...
    def format(self) -> str: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class OrgParseParameters:
    def __init__(self, baseTokenTracePath: Optional[str], tokenTracePath: Optional[str], parseTracePath: Optional[str], semTracePath: Optional[str]) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    baseTokenTracePath: Optional[str]
    tokenTracePath: Optional[str]
    parseTracePath: Optional[str]
    semTracePath: Optional[str]

class OrgYamlExportOpts:
    def __init__(self, skipNullFields: bool, skipFalseFields: bool, skipZeroFields: bool, skipLocation: bool, skipId: bool) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    skipNullFields: bool
    skipFalseFields: bool
    skipZeroFields: bool
    skipLocation: bool
    skipId: bool

class OrgTreeExportOpts:
    def __init__(self, withLineCol: bool, withOriginalId: bool, withSubnodeIdx: bool, skipEmptyFields: bool, startLevel: int, withColor: bool, maxDepth: int) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    withLineCol: bool
    withOriginalId: bool
    withSubnodeIdx: bool
    skipEmptyFields: bool
    startLevel: int
    withColor: bool
    maxDepth: int

class SequenceSegment:
    def __init__(self, kind: int, first: int, last: int) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    kind: int
    first: int
    last: int

class SequenceSegmentGroup:
    def __init__(self, kind: int, segments: List[SequenceSegment]) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    kind: int
    segments: List[SequenceSegment]

class SequenceAnnotationTag:
    def __init__(self, groupKind: int, segmentKinds: List[int]) -> None: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    groupKind: int
    segmentKinds: List[int]

class SequenceAnnotation:
    def __init__(self, first: int, last: int, annotations: List[SequenceAnnotationTag]) -> None: ...
    def isAnnotatedWith(self, groupKind: int, segmentKind: int) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...
    first: int
    last: int
    annotations: List[SequenceAnnotationTag]

class ExporterPython:
    def __init__(self) -> None: ...
    def enableBufferTrace(self) -> None: ...
    def getTraceBuffer(self) -> str: ...
    def enableFileTrace(self, path: str, colored: bool) -> None: ...
    def setVisitAnyIdAround(self, cb: function) -> None: ...
    def setVisitAnyIdIn(self, cb: function) -> None: ...
    def setVisitAnyField(self, cb: function) -> None: ...
    def setEvalTopCb(self, cb: function) -> None: ...
    def setVisitIdAround(self, kind: OrgSemKind, cb: function) -> None: ...
    def setEvalIdAround(self, kind: OrgSemKind, cb: function) -> None: ...
    def setVisitIdInCb(self, kind: OrgSemKind, cb: function) -> None: ...
    def setEvalIdIn(self, kind: OrgSemKind, cb: function) -> None: ...
    def setVisitLeafField(self, kind: LeafFieldType, cb: function) -> None: ...
    def setEvalLeafField(self, kind: LeafFieldType, cb: function) -> None: ...
    def setVisitOrgField(self, kind: OrgSemKind, cb: function) -> None: ...
    def setEvalOrgField(self, kind: OrgSemKind, cb: function) -> None: ...
    def setSelf(self, val: object) -> None: ...
    def setNewOrgRes(self, kind: OrgSemKind, cb: function) -> None: ...
    def setNewAnyOrgRes(self, cb: function) -> None: ...
    def setNewLeafRes(self, kind: LeafFieldType, cb: function) -> None: ...
    def setNewAnyLeafRes(self, cb: function) -> None: ...
    def setPushVisitAnyId(self, cb: function) -> None: ...
    def setPopVisitAnyId(self, cb: function) -> None: ...
    def setPushVisitId(self, kind: OrgSemKind, cb: function) -> None: ...
    def setPopVisitIdCb(self, kind: OrgSemKind, cb: function) -> None: ...
    def setVisitAnyHookCb(self, cb: function) -> None: ...
    def setVisitIdHook(self, kind: OrgSemKind, cb: function) -> None: ...
    def evalTop(self, org: Org) -> ExporterPythonRes: ...
    def eval(self, org: Org) -> ExporterPythonRes: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> object: ...

class LeafFieldType(Enum):
    Int = 1
    UserTimeKind = 2
    QDate = 3
    Bool = 4
    FixedIdVec = 5
    TopIdVec = 6
    QDateTime = 7
    Str = 8
    Any = 9

def newSemTimeStatic(breakdown: UserTimeBreakdown, isActive: bool) -> Time: ...

def parseFile(file: str, opts: OrgParseParameters) -> Document: ...

def parseString(text: str) -> Document: ...

def parseStringOpts(text: str, opts: OrgParseParameters) -> Document: ...

def asOneNode(arg: OrgArg) -> Org: ...

def formatToString(arg: Org) -> str: ...

def exportToYamlString(node: Org, opts: OrgYamlExportOpts) -> str: ...

def exportToYamlFile(node: Org, path: str, opts: OrgYamlExportOpts) -> None: ...

def exportToJsonString(node: Org) -> str: ...

def exportToJsonFile(node: Org, path: str) -> None: ...

def readProtobufFile(file: str) -> Document: ...

def exportToProtobufFile(doc: Document, file: str) -> None: ...

def exportToTreeString(node: Org, opts: OrgTreeExportOpts) -> str: ...

def exportToTreeFile(node: Org, path: str, opts: OrgTreeExportOpts) -> None: ...

def annotateSequence(groups: List[SequenceSegmentGroup], first: int, last: int) -> List[SequenceAnnotation]: ...

def eachSubnodeRec(node: Org, callback: function) -> None: ...
